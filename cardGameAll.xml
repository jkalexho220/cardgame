<?xml version = "1.0"?>
<trigger version="2">

<!-- Z DUSK Triggers -->

<Conditions>
	<Condition name="$$22289$$Always">
		<Expression>true</Expression>
	</Condition>

</Conditions>

<Effects>
	<Effect name="$$22355$$SetIdleProcessing">
    	<Param name="IdleProc" dispName="$$22356$$Process Idle:" varType="bool">true</Param>
    	<Command>trSetUnitIdleProcessing(%mod%IdleProc%mod%);</Command>
	</Effect>

<Effect name=" Card Game">
<Command>xsDisableSelf();}}</Command>

<Command>rule context_change_always</Command>
<Command>active</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command>}</Command>

<Command>const int mInt = 0;</Command>
<Command>const int mFloat = 1;</Command>
<Command>const int mString = 2;</Command>
<Command>const int mVector = 3;</Command>
<Command>const int mBool = 4;</Command>

<Command>const int xMetadata = 0; // contains current pointer and database size and numVariables. However, malloc doesn't have metadata so they have to shift down 1</Command>
<Command>const int xDirtyBit = 1;</Command>
<Command>const int xNextBlock = 2;</Command>
<Command>const int xPrevBlock = 3; // for databases, xData is unused and xPrevBlock takes its place</Command>
<Command>const int xData = 3;</Command>
<Command>const int xVarNames = 4; // list of variable names</Command>
<Command>const int xVariables = 5;</Command>

<Command>const int mPointer = 0;</Command>
<Command>const int mCount = 1;</Command>
<Command>const int mNextFree = 2;</Command>
<Command>const int mNewestBlock = 3;</Command>
<Command>const int mCacheHead = 4; // the cache stores items that you want to temporarily remove</Command>
<Command>const int mCacheCount = 5;</Command>
<Command>const int mVariableTypes = 5;</Command>

<Command>const int NEXTFREE = 0; // the very first block contains the next free pointer and nothing else</Command>

<Command>int MALLOC = 0;</Command>
<Command>int ARRAYS = 0;</Command>
<Command>int mNumArrays = 0;</Command>

<Command>void debugLog(string msg = "") {</Command>
<Command>}</Command>


<Command>string datatypeName(int data = 0) {</Command>
<Command>	string name = "void";</Command>
<Command><![CDATA[	if (data >= 0 && data <= 4) {]]></Command>
<Command>		name = aiPlanGetUserVariableString(MALLOC,15,data);</Command>
<Command>	}</Command>
<Command>	return(name);</Command>
<Command>}</Command>

<Command>int zNewArray(int type = 0, int size = 1, string name = "") {</Command>
<Command>	int index = mNumArrays;</Command>
<Command>	mNumArrays = mNumArrays + 1;</Command>
<Command>	switch(type)</Command>
<Command>	{</Command>
<Command>		case mInt:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableInt(ARRAYS,index,name,size);</Command>
<Command>		}</Command>
<Command>		case mFloat:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableFloat(ARRAYS,index,name,size);</Command>
<Command>		}</Command>
<Command>		case mString:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableString(ARRAYS,index,name,size);</Command>
<Command>		}</Command>
<Command>		case mVector:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableVector(ARRAYS,index,name,size);</Command>
<Command>		}</Command>
<Command>		case mBool:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableBool(ARRAYS,index,name,size);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool free(int type = -1, int index = -1) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, index,</Command>
<Command>			aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE));</Command>
<Command>		aiPlanSetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index, false);</Command>
<Command>		aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE, index); // set next free to be the newly added block</Command>
<Command>		success = true;</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int malloc(int type = -1) {</Command>
<Command>	int next = aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE);</Command>
<Command>	if (next == 0) {</Command>
<Command>		next = aiPlanGetNumberUserVariableValues(MALLOC,type * 3 + xNextBlock - 1);</Command>
<Command><![CDATA[		for(i=type * 3; < type * 3 + 3) {]]></Command>
<Command>			aiPlanSetNumberUserVariableValues(MALLOC,i,next + 1, false); // resizing seems to be a little expensive?</Command>
<Command>		}</Command>
<Command>		aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1, next, 0); // next free block is 0 for a newly created block</Command>
<Command>	} else {</Command>
<Command>		aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,NEXTFREE,</Command>
<Command>			aiPlanGetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,next));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableBool(MALLOC,type * 3 + xDirtyBit - 1, next, true); // set dirty bit</Command>

<Command>	return(next);</Command>
<Command>}</Command>

<Command>bool zGetBool(int index = 0) {</Command>
<Command>	bool val = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		val = aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index);</Command>
<Command>	}</Command>
<Command>	return(val);</Command>
<Command>}</Command>

<Command>bool zSetBool(int index = 0, bool val = false) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		success = aiPlanSetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index, val);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int zNewBool(bool val = false) {</Command>
<Command>	int index = malloc(mBool);</Command>
<Command>	zSetBool(index, val);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool zFreeBool(int index = 0) {</Command>
<Command>	return(free(mBool, index));</Command>
<Command>}</Command>


<Command>string zGetString(int index = 0) {</Command>
<Command>	string val = "";</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		val = aiPlanGetUserVariableString(MALLOC, mString * 3 + xData - 1, index);</Command>
<Command>	}</Command>
<Command>	return(val);</Command>
<Command>}</Command>

<Command>bool zSetString(int index = 0, string val = "") {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		success = aiPlanSetUserVariableString(MALLOC, mString * 3 + xData - 1, index, val);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int zNewString(string val = "") {</Command>
<Command>	int index = malloc(mString);</Command>
<Command>	zSetString(index, val);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool zFreeString(int index = 0) {</Command>
<Command>	return(free(mString, index));</Command>
<Command>}</Command>

<Command>int zGetInt(int index = 0) {</Command>
<Command>	int val = -1;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		val = aiPlanGetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index);</Command>
<Command>	}</Command>
<Command>	return(val);</Command>
<Command>}</Command>

<Command>bool zSetInt(int index = 0, int val = 0) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		success = aiPlanSetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index, val);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int zNewInt(int val = 0) {</Command>
<Command>	int index = malloc(mInt);</Command>
<Command>	zSetInt(index, val);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool zFreeInt(int index = 0) {</Command>
<Command>	return(free(mInt, index));</Command>
<Command>}</Command>

<Command>float zGetFloat(int index = 0) {</Command>
<Command>	float val = -1;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		val = aiPlanGetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index);</Command>
<Command>	}</Command>
<Command>	return(val);</Command>
<Command>}</Command>

<Command>bool zSetFloat(int index = 0, float val = 0) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		success = aiPlanSetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index, val);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int zNewFloat(float val = 0) {</Command>
<Command>	int index = malloc(mFloat);</Command>
<Command>	zSetFloat(index, val);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool zFreeFloat(int index = 0) {</Command>
<Command>	return(free(mFloat, index));</Command>
<Command>}</Command>

<Command>vector zGetVector(int index = 0) {</Command>
<Command>	vector val = vector(-1,-1,-1);</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		val = aiPlanGetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index);</Command>
<Command>	}</Command>
<Command>	return(val);</Command>
<Command>}</Command>

<Command>bool zSetVector(int index = 0, vector val = vector(0,0,0)) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {</Command>
<Command>		success = aiPlanSetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index, val);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int zNewVector(vector val = vector(0,0,0)) {</Command>
<Command>	int index = malloc(mVector);</Command>
<Command>	zSetVector(index, val);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>bool zFreeVector(int index = 0) {</Command>
<Command>	return(free(mVector, index));</Command>
<Command>}</Command>

<Command>int xInitDatabase(string name = "", int size = 0) {</Command>
<Command>	int id = aiPlanCreate(name, 8);</Command>
<Command>	aiPlanAddUserVariableBool(id,xDirtyBit,"DirtyBit",size+1);</Command>
<Command>	aiPlanAddUserVariableInt(id,xNextBlock,"NextBlock",size+1);</Command>
<Command>	aiPlanAddUserVariableInt(id,xPrevBlock,"PrevBlock",size+1);</Command>
<Command>	aiPlanAddUserVariableInt(id,xMetadata,"Metadata",6);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCount,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);</Command>

<Command>	aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size);</Command>
<Command>	aiPlanSetUserVariableInt(id,xNextBlock,0,0);</Command>
<Command><![CDATA[	for(i=1; <= size) { // connect all the free buffers together]]></Command>
<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,i,false);</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);</Command>
<Command>	}</Command>
<Command>	aiPlanAddUserVariableString(id,xVarNames,"VarNames",1);</Command>
<Command>	aiPlanSetUserVariableString(id,xVarNames,0,"none");</Command>
<Command>	return(id);</Command>
<Command>}</Command>

<Command>int xInitAddVar(int id = 0, string name = "", int type = 0) {</Command>
<Command>	int count = aiPlanGetNumberUserVariableValues(id,xDirtyBit);</Command>
<Command>	int index = aiPlanGetNumberUserVariableValues(id,xMetadata);</Command>
<Command>	aiPlanSetNumberUserVariableValues(id,xMetadata,index + 1,false);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,index,type);</Command>

<Command>	index = aiPlanGetNumberUserVariableValues(id,xVarNames);</Command>
<Command>	aiPlanSetNumberUserVariableValues(id,xVarNames,index+1,false);</Command>
<Command>	aiPlanSetUserVariableString(id,xVarNames,index,name);</Command>
<Command>	index = xVarNames + index;</Command>
<Command>	switch(type)</Command>
<Command>	{</Command>
<Command>		case mInt:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableInt(id,index,name,count);</Command>
<Command>		}</Command>
<Command>		case mFloat:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableFloat(id,index,name,count);</Command>
<Command>		}</Command>
<Command>		case mString:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableString(id,index,name,count);</Command>
<Command>		}</Command>
<Command>		case mVector:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableVector(id,index,name,count);</Command>
<Command>		}</Command>
<Command>		case mBool:</Command>
<Command>		{</Command>
<Command>			aiPlanAddUserVariableBool(id,index,name,count);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>int xInitAddInt(int id = 0, string name = "", int defVal = 0) {</Command>
<Command>	int index = xInitAddVar(id,name,mInt);</Command>
<Command>	aiPlanSetUserVariableInt(id, index, 0, defVal);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>int xInitAddFloat(int id = 0, string name = "", float defVal = 0) {</Command>
<Command>	int index = xInitAddVar(id, name, mFloat);</Command>
<Command>	aiPlanSetUserVariableFloat(id, index, 0, defVal);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>int xInitAddString(int id = 0, string name = "", string defVal = "") {</Command>
<Command>	int index = xInitAddVar(id, name, mString);</Command>
<Command>	aiPlanSetUserVariableString(id, index, 0, defVal);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>int xInitAddVector(int id = 0, string name = "", vector defVal = vector(0,0,0)) {</Command>
<Command>	int index = xInitAddVar(id, name, mVector);</Command>
<Command>	aiPlanSetUserVariableVector(id, index, 0, defVal);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>int xInitAddBool(int id = 0, string name = "", bool defVal = false) {</Command>
<Command>	int index = xInitAddVar(id,name,mBool);</Command>
<Command>	aiPlanSetUserVariableBool(id, index, 0, defVal);</Command>
<Command>	return(index);</Command>
<Command>}</Command>

<Command>void xResetValues(int id = 0, int index = -1, int stopAt = -1) {</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	if (stopAt == -1) {</Command>
<Command>		stopAt = aiPlanGetNumberUserVariableValues(id, xVarNames);</Command>
<Command>	} else {</Command>
<Command>		stopAt = stopAt - mVariableTypes;</Command>
<Command>	}</Command>
<Command><![CDATA[	for(i = 1; < stopAt) {]]></Command>
<Command>		switch(aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i))</Command>
<Command>		{</Command>
<Command>			case mInt:</Command>
<Command>			{</Command>
<Command>				aiPlanSetUserVariableInt(id,xVarNames + i,index,aiPlanGetUserVariableInt(id,xVarNames + i,0));</Command>
<Command>			}</Command>
<Command>			case mFloat:</Command>
<Command>			{</Command>
<Command>				aiPlanSetUserVariableFloat(id,xVarNames + i,index,aiPlanGetUserVariableFloat(id,xVarNames + i,0));</Command>
<Command>			}</Command>
<Command>			case mString:</Command>
<Command>			{</Command>
<Command>				aiPlanSetUserVariableString(id,xVarNames + i,index,aiPlanGetUserVariableString(id,xVarNames + i,0));</Command>
<Command>			}</Command>
<Command>			case mVector:</Command>
<Command>			{</Command>
<Command>				aiPlanSetUserVariableVector(id,xVarNames + i,index,aiPlanGetUserVariableVector(id,xVarNames + i,0));</Command>
<Command>			}</Command>
<Command>			case mBool:</Command>
<Command>			{</Command>
<Command>				aiPlanSetUserVariableBool(id,xVarNames + i,index,aiPlanGetUserVariableBool(id,xVarNames + i,0));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool xSetPointer(int id = 0, int index = 0) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);</Command>
<Command>		success = true;</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int xAddDatabaseBlock(int id = 0, bool setPointer = false) {</Command>
<Command>	int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);</Command>
<Command>	if (next == 0) {</Command>
<Command>		next = aiPlanGetNumberUserVariableValues(id,xDirtyBit);</Command>
<Command>		for(i=aiPlanGetNumberUserVariableValues(id,xVarNames) - 1; > 0) {</Command>
<Command>			aiPlanSetNumberUserVariableValues(id,i + xVarNames,next+1,false);</Command>
<Command>		}</Command>
<Command>		for(i=xPrevBlock; > xMetadata) {</Command>
<Command>			aiPlanSetNumberUserVariableValues(id,i,next+1,false);</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,next));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableBool(id,xDirtyBit,next,true);</Command>

<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,next,next);</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,next,next);</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mPointer,next);</Command>
<Command>	} else {</Command>
<Command>		int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>		int after = aiPlanGetUserVariableInt(id,xNextBlock,before);</Command>

<Command>		aiPlanSetUserVariableInt(id,xNextBlock,next,after); // next of me is after</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,next,before); // prev of me is before</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,before,next); // next of before is me</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,after,next); // prev of after is me</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mNewestBlock,next);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCount, 1 + aiPlanGetUserVariableInt(id,xMetadata,mCount));</Command>
<Command>	xResetValues(id,next);</Command>
<Command>	if (setPointer) {</Command>
<Command>		xSetPointer(id, next);</Command>
<Command>	}</Command>
<Command>	return(next);</Command>
<Command>}</Command>


<Command>bool xFreeDatabaseBlock(int id = 0, int index = -1) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {</Command>
<Command>		int after = aiPlanGetUserVariableInt(id,xNextBlock,index);</Command>
<Command>		int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,before,after); // next block of before is after</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,after,before); // prev block of after is before</Command>

<Command>		aiPlanSetUserVariableInt(id,xNextBlock,index,aiPlanGetUserVariableInt(id,xMetadata,mNextFree));</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mNextFree,index);</Command>
<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,index,false);</Command>

<Command>		if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xPrevBlock,index));</Command>
<Command>		}</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);</Command>
<Command>		success = true;</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>// Detaches the block and saves it in the cache.</Command>
<Command>bool xDetachDatabaseBlock(int id = 0, int index = -1) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {</Command>
<Command>		int after = aiPlanGetUserVariableInt(id,xNextBlock,index);</Command>
<Command>		int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,before,after); // next block of before is after</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,after,before); // prev block of after is before</Command>

<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,index,false);</Command>

<Command>		if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mPointer,before);</Command>
<Command>		}</Command>

<Command>		if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) == 0) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xNextBlock,index,index);</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,index,index);</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,index);</Command>
<Command>		} else {</Command>
<Command>			before = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);</Command>
<Command>			after = aiPlanGetUserVariableInt(id,xNextBlock,before);</Command>

<Command>			aiPlanSetUserVariableInt(id,xNextBlock,index,after); // next of me is after</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,index,before); // prev of me is before</Command>
<Command>			aiPlanSetUserVariableInt(id,xNextBlock,before,index); // next of before is me</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,after,index); // prev of after is me</Command>
<Command>		}</Command>

<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) + 1);</Command>
<Command>		success = true;</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>bool xRestoreDatabaseBlock(int id = 0, int index = -1) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);</Command>
<Command>	}</Command>
<Command>	if (aiPlanGetUserVariableBool(id,xDirtyBit,index) == false) {</Command>
<Command>		int after = aiPlanGetUserVariableInt(id,xNextBlock,index);</Command>
<Command>		int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,before,after); // next block of before is after</Command>
<Command>		aiPlanSetUserVariableInt(id,xPrevBlock,after,before); // prev block of after is before</Command>

<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,index,true);</Command>

<Command>		if (index == aiPlanGetUserVariableInt(id,xMetadata,mCacheHead)) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,aiPlanGetUserVariableInt(id,xPrevBlock,index));</Command>
<Command>		}</Command>

<Command>		if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xNextBlock,index,index);</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,index,index);</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);</Command>
<Command>		} else {</Command>
<Command>			before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>			after = aiPlanGetUserVariableInt(id,xNextBlock,before);</Command>

<Command>			aiPlanSetUserVariableInt(id,xNextBlock,index,after); // next of me is after</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,index,before); // prev of me is before</Command>
<Command>			aiPlanSetUserVariableInt(id,xNextBlock,before,index); // next of before is me</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,after,index); // prev of after is me</Command>
<Command>		}</Command>

<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) + 1);</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) - 1);</Command>
<Command>		success = true;</Command>
<Command>	}</Command>

<Command>	return(success);</Command>
<Command>}</Command>

<Command>bool xRestoreCache(int id = 0) {</Command>
<Command>	bool success = false;</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) > 0) {</Command>
<Command>		int pointer = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);</Command>
<Command>		for(i=aiPlanGetUserVariableInt(id,xMetadata,mCacheCount); >0) {</Command>
<Command>			aiPlanSetUserVariableBool(id,xDirtyBit,pointer,true);</Command>
<Command>			pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);</Command>
<Command>		}</Command>
<Command>		if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {</Command>
<Command>			aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xMetadata,mCacheHead));</Command>
<Command>		} else {</Command>
<Command>			int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>			int after = aiPlanGetUserVariableInt(id,xNextBlock,before);</Command>
<Command>			int index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);</Command>
<Command>			int next = aiPlanGetUserVariableInt(id,xPrevBlock,index); // the next of this block will be the after block</Command>

<Command>			aiPlanSetUserVariableInt(id,xNextBlock,next,after); // next of next is after</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,after,next); // prev of after is next</Command>

<Command>			aiPlanSetUserVariableInt(id,xNextBlock,before,index); // next of before is me</Command>
<Command>			aiPlanSetUserVariableInt(id,xPrevBlock,index,before); // prev of me is before</Command>
<Command>		}</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCount,</Command>
<Command>			aiPlanGetUserVariableInt(id,xMetadata,mCount) + aiPlanGetUserVariableInt(id,xMetadata,mCacheCount));</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);</Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);</Command>
<Command>		success = true;</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>

<Command>int xGetNewestPointer(int id = 0) {</Command>
<Command>	return(aiPlanGetUserVariableInt(id,xMetadata,mNewestBlock));</Command>
<Command>}</Command>

<Command>int xDatabaseNext(int id = 0, bool reverse = false) {</Command>
<Command>	int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	if (reverse) {</Command>
<Command>		pointer = aiPlanGetUserVariableInt(id,xPrevBlock,pointer);</Command>
<Command>	} else {</Command>
<Command>		pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);</Command>
<Command>	}</Command>
<Command><![CDATA[	if (aiPlanGetUserVariableBool(id,xDirtyBit,pointer) && (aiPlanGetUserVariableInt(id,xMetadata,mCount) > 0)) {]]></Command>
<Command>		aiPlanSetUserVariableInt(id,xMetadata,mPointer,pointer);</Command>
<Command>	} else {</Command>
<Command>		pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>		debugLog("xDatabaseNext: " + aiPlanGetName(id) + " pointer is incorrect!");</Command>
<Command>		debugLog("xNextBlock: " + aiPlanGetUserVariableInt(id,xNextBlock,pointer));</Command>
<Command>		debugLog("Me: " + pointer);</Command>
<Command>		debugLog("xPrevblock: " + aiPlanGetUserVariableInt(id,xPrevBlock,pointer));</Command>
<Command>	}</Command>
<Command>	return(pointer);</Command>
<Command>}</Command>

<Command>void xClearDatabase(int id = 0) {</Command>
<Command>	int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);</Command>
<Command>	int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,pointer));</Command>
<Command>	aiPlanSetUserVariableInt(id,xNextBlock,pointer,next);</Command>

<Command><![CDATA[	for(i=0; < aiPlanGetNumberUserVariableValues(id,xDirtyBit)) {]]></Command>
<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,i,false);</Command>
<Command>	}</Command>

<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCount,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);</Command>
<Command>}</Command>

<Command>void xResetDatabase(int id = 0) {</Command>
<Command>	int size = aiPlanGetNumberUserVariableValues(id,xDirtyBit);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCount,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);</Command>
<Command>	aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);</Command>

<Command>	aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size - 1);</Command>
<Command>	aiPlanSetUserVariableInt(id,xNextBlock,0,0);</Command>
<Command><![CDATA[	for(i=1; < size) { // connect all the free buffers together]]></Command>
<Command>		aiPlanSetUserVariableBool(id,xDirtyBit,i,false);</Command>
<Command>		aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>int xGetInt(int id = 0, int data = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetInt: " + aiPlanGetName(id) + " variable " + name + " is not an int! Type: " + type);</Command>
<Command>		return(-1); // if we are trying to get an int from the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableInt(id,data,index));</Command>
<Command>}</Command>

<Command>bool xSetInt(int id = 0, int data = 0, int val = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xSetInt: " + aiPlanGetName(id) + " variable " + name + " is not an int! Type: " + type);</Command>
<Command>		return(false); // if we are trying to set the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	bool success = aiPlanSetUserVariableInt(id,data,index,val);</Command>
<Command>	if (success == false) {</Command>
<Command>		string err = ": Could not assign value: " + val;</Command>
<Command>		debugLog("xSetInt: " + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>


<Command>float xGetFloat(int id = 0, int data = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetFloat: " + aiPlanGetName(id) + " variable " + name + " is not a float! Type: " + type);</Command>
<Command>		return(-1.0); // if we are trying to get an int from the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableFloat(id,data,index));</Command>
<Command>}</Command>

<Command>bool xSetFloat(int id = 0, int data = 0, float val = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xSetFloat: " + aiPlanGetName(id) + " variable " + name + " is not a float! Type: " + type);</Command>
<Command>		return(false); // if we are trying to set the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	bool success = aiPlanSetUserVariableFloat(id,data,index,val);</Command>
<Command>	if (success == false) {</Command>
<Command>		string err = ": Could not assign value: " + val;</Command>
<Command>		debugLog("xSetFloat: " + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);</Command>
<Command>	}</Command>
<Command>	return(success);</Command>
<Command>}</Command>


<Command>string xGetString(int id = 0, int data = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetString: " + aiPlanGetName(id) + " variable " + name + " is not a string! Type: " + type);</Command>
<Command>		return(""); // if we are trying to get an int from the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableString(id,data,index));</Command>
<Command>}</Command>

<Command>bool xSetString(int id = 0, int data = 0, string val = "", int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xSetString: " + aiPlanGetName(id) + " variable " + name + " is not a string! Type: " + type);</Command>
<Command>		return(false); // if we are trying to set the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanSetUserVariableString(id,data,index,val));</Command>
<Command>}</Command>


<Command>vector xGetVector(int id = 0, int data = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetVector: " + aiPlanGetName(id) + " variable " + name + " is not a vector! Type: " + type);</Command>
<Command>		return(vector(0,0,0)); // if we are trying to get an int from the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableVector(id,data,index));</Command>
<Command>}</Command>

<Command>bool xSetVector(int id = 0, int data = 0, vector val = vector(0,0,0), int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xSetVector: " + aiPlanGetName(id) + " variable " + name + " is not a vector! Type: " + type);</Command>
<Command>		return(false); // if we are trying to set the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanSetUserVariableVector(id,data,index,val));</Command>
<Command>}</Command>


<Command>bool xGetBool(int id = 0, int data = 0, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetBool: " + aiPlanGetName(id) + " variable " + name + " is not a bool! Type: " + type);</Command>
<Command>		return(false); // if we are trying to get an int from the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableBool(id,data,index));</Command>
<Command>}</Command>

<Command>bool xSetBool(int id = 0, int data = 0, bool val = false, int index = -1) {</Command>
<Command>	if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {</Command>
<Command>		string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));</Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);</Command>
<Command>		debugLog("xGetBool: " + aiPlanGetName(id) + " variable " + name + " is not a bool! Type: " + type);</Command>
<Command>		return(false); // if we are trying to set the wrong datatype, stop</Command>
<Command>	}</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);</Command>
<Command>	}</Command>
<Command>	return(aiPlanSetUserVariableBool(id,data,index,val));</Command>
<Command>}</Command>

<Command>int xGetDatabaseCount(int id = 0) {</Command>
<Command>	return(aiPlanGetUserVariableInt(id,xMetadata,mCount));</Command>
<Command>}</Command>

<Command>int xGetPointer(int id = 0) {</Command>
<Command>	return(aiPlanGetUserVariableInt(id,xMetadata,mPointer));</Command>
<Command>}</Command>

<Command>void xPrintAll(int id = 0, int index = 0) {</Command>
<Command><![CDATA[	trChatSend(0, "<u>" + aiPlanGetName(id) + "</u>");]]></Command>
<Command>	trChatSend(0, "size: " + xGetDatabaseCount(id));</Command>
<Command>	trChatSend(0, "pointer: " + index);</Command>
<Command><![CDATA[	for(i=1; < aiPlanGetNumberUserVariableValues(id,xVarNames)) {]]></Command>
<Command>		string name = aiPlanGetUserVariableString(id,xVarNames,i);</Command>
<Command>		int type = aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i);</Command>
<Command>		switch(type)</Command>
<Command>		{</Command>
<Command>			case mInt:</Command>
<Command>			{</Command>
<Command>				trChatSend(0, name + ": " + aiPlanGetUserVariableInt(id,xVarNames + i,index));</Command>
<Command>			}</Command>
<Command>			case mFloat:</Command>
<Command>			{</Command>
<Command>				trChatSend(0, name + ": " + aiPlanGetUserVariableFloat(id,xVarNames + i,index));</Command>
<Command>			}</Command>
<Command>			case mString:</Command>
<Command>			{</Command>
<Command>				trChatSend(0, name + ": " + aiPlanGetUserVariableString(id,xVarNames + i,index));</Command>
<Command>			}</Command>
<Command>			case mVector:</Command>
<Command>			{</Command>
<Command>				trChatSend(0, name + ": " + aiPlanGetUserVariableVector(id,xVarNames + i,index));</Command>
<Command>			}</Command>
<Command>			case mBool:</Command>
<Command>			{</Command>
<Command>				if (aiPlanGetUserVariableBool(id,xVarNames + i,index)) {</Command>
<Command>					trChatSend(0, name + ": true");</Command>
<Command>				} else {</Command>
<Command>					trChatSend(0, name + ": false");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void xUnitSelect(int id = 0, int varn = 0, bool reverse = true) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+xGetInt(id,varn), reverse);</Command>
<Command>}</Command>

<Command>void xUnitSelectByID(int db = 0, int varn = 0) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(xGetInt(db,varn));</Command>
<Command>}</Command>

<Command>rule mInitializeMemory</Command>
<Command>active</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	xsDisableSelf();</Command>
<Command>	aiSet("NoAI", 0);</Command>
<Command>	MALLOC = aiPlanCreate("memory",8);</Command>
<Command>	ARRAYS = aiPlanCreate("arrays",8);</Command>
<Command><![CDATA[	for(i=0; < 5) {]]></Command>
<Command>		aiPlanAddUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1,"DirtyBit"+i,1);</Command>
<Command>		aiPlanAddUserVariableInt(MALLOC,i * 3 + xNextBlock - 1,"NextBlock"+i,1);</Command>
<Command>		aiPlanSetUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1, NEXTFREE, true);</Command>
<Command>		aiPlanSetUserVariableInt(MALLOC,i * 3 + xNextBlock - 1, NEXTFREE, 0);</Command>
<Command>	}</Command>
<Command>	aiPlanAddUserVariableInt(MALLOC,mInt * 3 + xData - 1, "intData",1);</Command>
<Command>	aiPlanAddUserVariableFloat(MALLOC,mFloat * 3 + xData - 1, "floatData",1);</Command>
<Command>	aiPlanAddUserVariableString(MALLOC,mString * 3 + xData - 1, "stringData",1);</Command>
<Command>	aiPlanAddUserVariableVector(MALLOC,mVector * 3 + xData - 1, "vectorData",1);</Command>
<Command>	aiPlanAddUserVariableBool(MALLOC,mBool * 3 + xData - 1, "boolData",1);</Command>

<Command>	aiPlanAddUserVariableString(MALLOC,15,"datatypes",5);</Command>
<Command>	aiPlanSetUserVariableString(MALLOC,15,mInt,"Integer");</Command>
<Command>	aiPlanSetUserVariableString(MALLOC,15,mFloat,"Float");</Command>
<Command>	aiPlanSetUserVariableString(MALLOC,15,mString,"String");</Command>
<Command>	aiPlanSetUserVariableString(MALLOC,15,mVector,"Vector");</Command>
<Command>	aiPlanSetUserVariableString(MALLOC,15,mBool,"Bool");</Command>
<Command>}</Command>
<Command>bool Multiplayer = false;</Command>

<Command>const float PI = 3.141592;</Command>

<Command>bool playerIsPlaying(int p = 0) {</Command>
<Command><![CDATA[	return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);]]></Command>
<Command>}</Command>


<Command>void trVectorQuestVarSet(string name = "", vector QVv = vector(-1,-1,-1)) {</Command>
<Command>	if (name == "") return;</Command>
<Command>	if (trQuestVarGet("vector"+name) == 0) {</Command>
<Command>		trQuestVarSet("vector"+name, zNewVector(QVv));</Command>
<Command>	} else {</Command>
<Command>		zSetVector(1*trQuestVarGet("vector"+name),QVv);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>vector trVectorQuestVarGet(string name = "") {</Command>
<Command>	return(zGetVector(1*trQuestVarGet("vector"+name)));</Command>
<Command>}</Command>

<Command>float trVectorQuestVarGetX(string name = "") {</Command>
<Command>	return(xsVectorGetX(trVectorQuestVarGet(name)));</Command>
<Command>}</Command>

<Command>float trVectorQuestVarGetY(string name = "") {</Command>
<Command>	return(xsVectorGetY(trVectorQuestVarGet(name)));</Command>
<Command>}</Command>

<Command>float trVectorQuestVarGetZ(string name = "") {</Command>
<Command>	return(xsVectorGetZ(trVectorQuestVarGet(name)));</Command>
<Command>}</Command>

<Command>void trVectorQuestVarEcho(string name = "") {</Command>
<Command>	if (name == "") return;</Command>
<Command>	trChatSend(0, ""+name+": "+trVectorQuestVarGet(name));</Command>
<Command>}</Command>


<Command>void trStringQuestVarSet(string name = "", string value = "") {</Command>
<Command>	if (trQuestVarGet("string"+name) > 0) {</Command>
<Command>		zSetString(1*trQuestVarGet("string"+name), value);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("string"+name, zNewString(value));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>string trStringQuestVarGet(string name="") {</Command>
<Command>	string val = zGetString(1*trQuestVarGet("string"+name));</Command>
<Command>	return(val);</Command>
<Command>}</Command>


<Command>void trUnitSelectByQV(string s = "", bool reverse = true) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet(""+s), reverse);</Command>
<Command>}</Command>


<Command>void trVectorSetUnitPos(string v = "", string db = "", bool reverse = true) {</Command>
<Command>	trVectorQuestVarSet(v, kbGetBlockPosition(""+1*trQuestVarGet(db), reverse));</Command>
<Command>}</Command>

<Command>void trVectorSetUnitPosInt(string v = "", int val = 0, bool reverse = true) {</Command>
<Command>	trVectorQuestVarSet(v, kbGetBlockPosition(""+val, reverse));</Command>
<Command>}</Command>


<Command>void trUnitMoveToVector(string v = "", bool attack = false) {</Command>
<Command>	trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);</Command>
<Command>}</Command>

<Command>void trVectorScale(string db = "", float s = 1.0) {</Command>
<Command>	trVectorQuestVarSet(db, trVectorQuestVarGet(db) * s);</Command>
<Command>}</Command>

<Command>vector vectorSnapToGrid(vector v = vector(0,0,0)) {</Command>
<Command>	int x = xsVectorGetX(v) / 2;</Command>
<Command>	int z = xsVectorGetZ(v) / 2;</Command>
<Command>	return(xsVectorSet(x * 2 + 1,xsVectorGetY(v),z * 2 + 1));</Command>
<Command>}</Command>

<Command>void trVectorSnapToGrid(string qv = "") {</Command>
<Command>	trVectorQuestVarSet(qv, vectorSnapToGrid(trVectorQuestVarGet(qv)));</Command>
<Command>}</Command>

<Command>int iModulo(int mod = 10, int val = 0) {</Command>
<Command>	return(val - val / mod * mod);</Command>
<Command>}</Command>

<Command>float fModulo(float mod = 0, float val = 0) {</Command>
<Command>	int c = 0;</Command>
<Command>	if (val > 0) {</Command>
<Command>		c = val / mod;</Command>
<Command>	} else {</Command>
<Command>		c = val / mod - 1;</Command>
<Command>	}</Command>
<Command>	return(0.0 + val - mod * c);</Command>
<Command>}</Command>


<Command>void zUnitHeading(float a = 0) {</Command>
<Command>	trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);</Command>
<Command>}</Command>

<Command>void zInitProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>	trQuestVarSet("p"+p+"pf"+kbGetProtoUnitID(r)+"f"+f, v);</Command>
<Command>}</Command>

<Command>void zSetProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>for(zsps=0; >1){}</Command>
<Command>	zsps = kbGetProtoUnitID(r);</Command>
<Command>	trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet("p"+p+"pf"+zsps+"f"+f));</Command>
<Command>	trQuestVarSet("p"+p+"pf"+zsps+"f"+f, 0.0 + v);</Command>
<Command>}</Command>

<Command>vector vectorToGrid(vector v = vector(0,0,0)) {</Command>
<Command>	return(xsVectorSet(0 + xsVectorGetX(v) / 2,xsVectorGetY(v),0 + xsVectorGetZ(v) / 2));</Command>
<Command>}</Command>

<Command>void trVectorToGrid(string from = "", string to = ""){</Command>
<Command>	trVectorQuestVarSet(to, vectorToGrid(trVectorQuestVarGet(from)));</Command>
<Command>}</Command>

<Command>vector gridToVector(vector g = vector(0,0,0)) {</Command>
<Command>	return(xsVectorSet(xsVectorGetX(g) * 2 + 1,xsVectorGetY(g),xsVectorGetZ(g) * 2 + 1));</Command>
<Command>}</Command>

<Command>void trGridToVector(string from = "", string to = "") {</Command>
<Command>	trVectorQuestVarSet(to, gridToVector(trVectorQuestVarGet(from)));</Command>
<Command>}</Command>

<Command>void trSquareVar(string qv = "") {</Command>
<Command>	trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));</Command>
<Command>}</Command>

<Command>float distanceBetweenVectors(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {</Command>
<Command>	float xDiff = xsVectorGetX(end) - xsVectorGetX(start);</Command>
<Command>	float zDiff = xsVectorGetZ(end) - xsVectorGetZ(start);</Command>
<Command>	float dist = xDiff * xDiff + zDiff * zDiff;</Command>
<Command>	if (squared == false) {</Command>
<Command>		dist = xsSqrt(dist);</Command>
<Command>	}</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float trDistanceBetweenVectorsSquared(string start = "", string end = "") {</Command>
<Command>	return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end)));</Command>
<Command>}</Command>

<Command>bool vectorInRectangle(vector pos = vector(0,0,0), vector bot = vector(0,0,0), vector top = vector(0,0,0)) {</Command>
<Command><![CDATA[	if (xsVectorGetX(pos) < xsVectorGetX(bot)) {]]></Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command>	if (xsVectorGetX(pos) > xsVectorGetX(top)) {</Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command><![CDATA[	if (xsVectorGetZ(pos) < xsVectorGetZ(bot)) {]]></Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command>	if (xsVectorGetZ(pos) > xsVectorGetZ(top)) {</Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command>	return(true);</Command>
<Command>}</Command>

<Command>bool trVectorInRectangle(string pos = "", string bot = "", string top = "") {</Command>
<Command>	vector tempPos = zGetVector(1*trQuestVarGet(pos));</Command>
<Command>	vector tempBot = zGetVector(1*trQuestVarGet(bot));</Command>
<Command>	vector tempTop = zGetVector(1*trQuestVarGet(top));</Command>
<Command>	return(vectorInRectangle(tempPos,tempBot,tempTop));</Command>
<Command>}</Command>

<Command>vector rotationMatrix(vector v = vector(0,0,0), float cosT = 0, float sinT = 0) {</Command>
<Command>	float x = xsVectorGetX(v);</Command>
<Command>	float z = xsVectorGetZ(v);</Command>
<Command>	vector ret = xsVectorSet(x * cosT - z * sinT, 0, x * sinT + z * cosT);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>float trDistanceBetweenVectors(string start = "", string end = "") {</Command>
<Command>	return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));</Command>
<Command>}</Command>

<Command>float distanceBetweenVectors3d(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {</Command>
<Command>	float xdiff = xsVectorGetX(start) - xsVectorGetX(end);</Command>
<Command>	float ydiff = xsVectorGetY(start) - xsVectorGetY(end);</Command>
<Command>	float zdiff = xsVectorGetZ(start) - xsVectorGetZ(end);</Command>
<Command>	float dist = xdiff * xdiff + ydiff * ydiff + zdiff * zdiff;</Command>
<Command>	if (squared == false) {</Command>
<Command>		dist = xsSqrt(dist);</Command>
<Command>	}</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float trDistanceBetweenVectors3d(string start = "", string end = "") {</Command>
<Command>	return(distanceBetweenVectors3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));</Command>
<Command>}</Command>

<Command>float unitDistanceToVector(int name = 0, vector v = vector(0,0,0), bool squared = true) {</Command>
<Command>	vector temp = kbGetBlockPosition(""+name,true);</Command>
<Command>	return(distanceBetweenVectors(temp,v,squared));</Command>
<Command>}</Command>

<Command>float trDistanceToVectorSquared(string qv = "", string v = "") {</Command>
<Command>	return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v)));</Command>
<Command>}</Command>

<Command>float trDistanceToVector(string qv = "", string v = "") {</Command>
<Command>	return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v),false));</Command>
<Command>}</Command>

<Command>vector vectorSetFromAngle(float angle = 0) {</Command>
<Command>	return(xsVectorSet(xsSin(angle), 0, xsCos(angle)));</Command>
<Command>}</Command>

<Command>void trVectorSetFromAngle(string qv = "", float angle = 0) {</Command>
<Command>	trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));</Command>
<Command>}</Command>

<Command>float angleBetweenVectors(vector from = vector(0,0,0), vector to = vector(0,0,0)) {</Command>
<Command>	float a = xsVectorGetX(to) - xsVectorGetX(from);</Command>
<Command>	a = a / (xsVectorGetZ(to) - xsVectorGetZ(from));</Command>
<Command>	a = xsAtan(a);</Command>
<Command>	if (xsVectorGetZ(from) > xsVectorGetZ(to)) {</Command>
<Command>		if (xsVectorGetX(from) > xsVectorGetX(to)) {</Command>
<Command>			a = a - PI;</Command>
<Command>		} else {</Command>
<Command>			a = a + PI;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(a);</Command>
<Command>}</Command>

<Command>float trAngleBetweenVectors(string from = "", string to = "") {</Command>
<Command>	return(angleBetweenVectors(trVectorQuestVarGet(from),trVectorQuestVarGet(to)));</Command>
<Command>}</Command>

<Command>float angleOfVector(vector dir = vector(0,0,0)) {</Command>
<Command>	float a = xsVectorGetX(dir) / xsVectorGetZ(dir);</Command>
<Command>	a = xsAtan(a);</Command>
<Command>	if (0.0 > xsVectorGetZ(dir)) {</Command>
<Command>		if (0.0 > xsVectorGetX(dir)) {</Command>
<Command>			a = a - PI;</Command>
<Command>		} else {</Command>
<Command>			a = a + PI;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(a);</Command>
<Command>}</Command>

<Command>float trAngleOfVector(string v = "") {</Command>
<Command>	return(angleOfVector(trVectorQuestVarGet(v)));</Command>
<Command>}</Command>

<Command>vector getUnitVector(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {</Command>
<Command>	float xdiff = xsVectorGetX(end) - xsVectorGetX(start);</Command>
<Command>	float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>	vector ret = vector(1,0,0);</Command>
<Command>	if (dist > 0) {</Command>
<Command>		ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);</Command>
<Command>	}</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector trGetUnitVector(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	return(getUnitVector(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));</Command>
<Command>}</Command>

<Command>vector getUnitVector3d(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {</Command>
<Command>	float xdiff = xsVectorGetX(end) - xsVectorGetX(start);</Command>
<Command>	float ydiff = xsVectorGetY(end) - xsVectorGetY(start);</Command>
<Command>	float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);</Command>
<Command>	vector ret = vector(0,1,0);</Command>
<Command>	if (dist > 0) {</Command>
<Command>		ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);</Command>
<Command>	}</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector trGetUnitVector3d(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	return(getUnitVector3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));</Command>
<Command>}</Command>

<Command>vector crossProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {</Command>
<Command>	float x = xsVectorGetY(a) * xsVectorGetZ(b) - xsVectorGetZ(a) * xsVectorGetY(b);</Command>
<Command>	float y = xsVectorGetZ(a) * xsVectorGetX(b) - xsVectorGetX(a) * xsVectorGetZ(b);</Command>
<Command>	float z = xsVectorGetX(a) * xsVectorGetY(b) - xsVectorGetY(a) * xsVectorGetX(b);</Command>
<Command>	vector ret = xsVectorSet(x, y, z);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector trCrossProduct(string first = "", string second = "") {</Command>
<Command>	return(crossProduct(trVectorQuestVarGet(first), trVectorQuestVarGet(second)));</Command>
<Command>}</Command>

<Command>float dotProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {</Command>
<Command>	return(xsVectorGetX(a) * xsVectorGetX(b) + xsVectorGetZ(a) * xsVectorGetZ(b));</Command>
<Command>}</Command>

<Command>bool terrainIsType(vector v = vector(0,0,0), int type = 0, int subtype = 0) {</Command>
<Command>	bool isType = trGetTerrainType(xsVectorGetX(v),xsVectorGetZ(v)) == type;</Command>
<Command>	isType = trGetTerrainSubType(xsVectorGetX(v),xsVectorGetZ(v)) == subtype;</Command>
<Command>	return(isType);</Command>
<Command>}</Command>

<Command>bool trTerrainIsType(string qv = "", int type = 0, int subtype = 0) {</Command>
<Command>	return(terrainIsType(trVectorQuestVarGet(qv),type,subtype));</Command>
<Command>}</Command>

<Command>void modularCounterInit(string name = "", int size = 0) {</Command>
<Command>	trQuestVarSet("counter" + name + "size", size);</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	trQuestVarSet(name, 1);</Command>
<Command>}</Command>

<Command>int modularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "pointer") > trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet(name, trQuestVarGet("counter"+name+"pointer"));</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>}</Command>

<Command>int peekModularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "fake", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "fake") >= trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "fake", 1);</Command>
<Command>	}</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "fake"));</Command>
<Command>}</Command>

<Command>void ChatLogShow(){</Command>
<Command>	trChatHistoryClear();</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			for (i = 5; >0) {</Command>
<Command>				trChatSend(0, trStringQuestVarGet("chat" + p + "Log" + modularCounterNext("chat"+p+"log")));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void ChatLog(int p = 1, string message = ""){</Command>
<Command>	if (p == 0) {</Command>
<Command>		trStringQuestVarSet("chat1Log" + modularCounterNext("chat1Log"), message);</Command>
<Command>		trStringQuestVarSet("chat2Log" + modularCounterNext("chat2Log"), message);</Command>
<Command>	} else {</Command>
<Command>		trStringQuestVarSet("chat" + p + "Log" + modularCounterNext("chat" + p + "Log"), message);</Command>
<Command>	}</Command>
<Command>	ChatLogShow();</Command>
<Command>}</Command>
<Command>void zBankInit(string name = "", int start = 0, int length = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"start", start);</Command>
<Command>	trQuestVarSet("z"+name+"end", start + length);</Command>
<Command>	trQuestVarSet("z"+name+"pointer", start);</Command>
<Command>	trQuestVarSet(name, start);</Command>
<Command>}</Command>

<Command>int zBankNext(string name = "", bool select = false) {</Command>
<Command>	trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"pointer") + 1);</Command>
<Command>	if (trQuestVarGet("z"+name+"pointer") >= trQuestVarGet("z"+name+"end")) {</Command>
<Command>		trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"start"));</Command>
<Command>	}</Command>
<Command>	trQuestVarCopy(name, "z"+name+"pointer");</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(1*trQuestVarGet(name));</Command>
<Command>	}</Command>
<Command>	return(1*trQuestVarGet(name));</Command>
<Command>}</Command>

<Command>void zSetVar(string name = "", string var = "", float val = 0) {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>void zSetVarByIndex(string name = "", string var = "", int index = 0, float val = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>float zGetVar(string name = "", string var = "") {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>float zGetVarByIndex(string name = "", string var = "", int index = 0) {</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>int zGetBankCount(string name = "") {</Command>
<Command>	return(1*trQuestVarGet("z"+name+"end") - trQuestVarGet("z"+name+"start"));</Command>
<Command>}</Command>


<Command>void mSetVar(int name = 0, string var = "", int val = 0) {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mInt,129,var));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableInt(ARRAYS,1*trQuestVarGet("m"+var),name,val);</Command>

<Command>}</Command>

<Command>void mSetVarByQV(string qv = "", string var = "", int val = 0) {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mInt,129,var));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableInt(ARRAYS,1*trQuestVarGet("m"+var),1*trQuestVarGet(qv),val);</Command>
<Command>}</Command>

<Command>void mSetString(int name = 0, string var = "", string val = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mString,129,var));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableString(ARRAYS,1*trQuestVarGet("m"+var),name,val);</Command>
<Command>}</Command>

<Command>void mSetStringByQV(string qv = "", string var = "", string val = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mString,129,var));</Command>
<Command>	}</Command>
<Command>	aiPlanSetUserVariableString(ARRAYS,1*trQuestVarGet("m"+var),1*trQuestVarGet(qv),val);</Command>
<Command>}</Command>

<Command>int mGetVar(int name = 0, string var = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mInt,129,var));</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableInt(ARRAYS,1*trQuestVarGet("m"+var),name));</Command>
<Command>}</Command>

<Command>int mGetVarByQV(string qv = "", string var = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mInt,129,var));</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableInt(ARRAYS,1*trQuestVarGet("m"+var),1*trQuestVarGet(qv)));</Command>
<Command>}</Command>

<Command>string mGetString(int name = 0, string var = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mString,129,var));</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableString(ARRAYS,1*trQuestVarGet("m"+var),name));</Command>
<Command>}</Command>

<Command>string mGetStringByQV(string qv = "", string var = "") {</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command><![CDATA[	if (trQuestVarGet("m"+var) <= 0) {]]></Command>
<Command>		trQuestVarSet("m"+var, zNewArray(mString,129,var));</Command>
<Command>	}</Command>
<Command>	return(aiPlanGetUserVariableString(ARRAYS,1*trQuestVarGet("m"+var),1*trQuestVarGet(qv)));</Command>
<Command>}</Command>


<Command>bool yDatabaseCreateIfNull(string dbname = "", int count = 0) {</Command>
<Command>	bool created = false;</Command>
<Command>	if (trQuestVarGet("database"+dbname) == 0) {</Command>
<Command><![CDATA[		if (count < 0) {]]></Command>
<Command>			count = 0;</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("database"+dbname, xInitDatabase(dbname, count));</Command>
<Command>		created = true;</Command>
<Command>	}</Command>
<Command>	return(created);</Command>
<Command>}</Command>

<Command>bool yVariableExists(string dbname = "", string varname = "") {</Command>
<Command>	int db = trQuestVarGet("database"+dbname);</Command>
<Command>	int var = trQuestVarGet("database"+dbname+varname);</Command>
<Command>	return(db * var > 0);</Command>
<Command>}</Command>

<Command>float yGetVarAtIndex(string db = "", string var = "", int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		return(xGetFloat(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),index));</Command>
<Command>	} else {</Command>
<Command>		return(0);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>float yGetVar(string db = "", string var = "") {</Command>
<Command>	return(yGetVarAtIndex(db, var, -1));</Command>
<Command>}</Command>

<Command>string yGetStringAtIndex(string db = "", string var = "", int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		return(xGetString(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),index));</Command>
<Command>	} else {</Command>
<Command>		return("");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>string yGetString(string db = "", string var = "") {</Command>
<Command>	return(yGetStringAtIndex(db, var, -1));</Command>
<Command>}</Command>

<Command>vector yGetVectorAtIndex(string db = "", string var = "", int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		return(xGetVector(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),index));</Command>
<Command>	} else {</Command>
<Command>		return(vector(0,0,0));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>vector yGetVector(string db = "", string var = "") {</Command>
<Command>	return(yGetVectorAtIndex(db, var, -1));</Command>
<Command>}</Command>

<Command>void ySetVarAtIndex(string db = "", string var = "", float val = 0, int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		xSetFloat(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	} else {</Command>
<Command>		yDatabaseCreateIfNull(db, index + 1);</Command>
<Command>		trQuestVarSet("database"+db+var, xInitAddFloat(1*trQuestVarGet("database"+db),var));</Command>
<Command>		xSetFloat(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void ySetVar(string db = "", string var = "", float val = 0) {</Command>
<Command>	ySetVarAtIndex(db, var, val, -1);</Command>
<Command>}</Command>

<Command>void ySetStringAtIndex(string db = "", string var = "", string val = "", int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		xSetString(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	} else {</Command>
<Command>		yDatabaseCreateIfNull(db, index);</Command>
<Command>		trQuestVarSet("database"+db+var, xInitAddFloat(1*trQuestVarGet("database"+db),var));</Command>
<Command>		xSetString(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void ySetString(string db = "", string var = "", string val = "") {</Command>
<Command>	ySetStringAtIndex(db, var, val, -1);</Command>
<Command>}</Command>

<Command>void ySetVectorAtIndex(string db = "", string var = "", vector val = vector(0,0,0), int index = 0) {</Command>
<Command>	if (yVariableExists(db, var)) {</Command>
<Command>		xSetVector(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	} else {</Command>
<Command>		yDatabaseCreateIfNull(db, index);</Command>
<Command>		trQuestVarSet("database"+db+var, xInitAddFloat(1*trQuestVarGet("database"+db),var));</Command>
<Command>		xSetVector(1*trQuestVarGet("database"+db),1*trQuestVarGet("database"+db+var),val,index);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void ySetVector(string db = "", string var = "", vector val = vector(0,0,0)) {</Command>
<Command>	ySetVectorAtIndex(db, var, val, -1);</Command>
<Command>}</Command>

<Command>int yGetDatabaseCount(string db = "") {</Command>
<Command>	yDatabaseCreateIfNull(db);</Command>
<Command>	return(xGetDatabaseCount(1*trQuestVarGet("database"+db)));</Command>
<Command>}</Command>

<Command>int yDatabaseNext(string db = "", bool select = false, bool reverse = false) {</Command>
<Command>	if (yGetDatabaseCount(db) > 0) {</Command>
<Command>		xDatabaseNext(1*trQuestVarGet("database"+db), reverse);</Command>
<Command>	}</Command>
<Command>	int u = yGetVar(db, "unitName");</Command>
<Command>	trQuestVarSet(db, u);</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+u, true);</Command>
<Command>		return(kbGetBlockID(""+u, true));</Command>
<Command>	} else {</Command>
<Command>		return(u);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void yRemoveFromDatabase(string db = "") {</Command>
<Command>	xFreeDatabaseBlock(1*trQuestVarGet("database"+db));</Command>
<Command>}</Command>

<Command>int yGetNewestPointer(string db = "") {</Command>
<Command>	return(xGetNewestPointer(1*trQuestVarGet("database"+db)));</Command>
<Command>}</Command>

<Command>void yAddUpdateVar(string db = "", string var = "", float val = 0) {</Command>
<Command>	ySetVarAtIndex(db, var, val, yGetNewestPointer(db));</Command>
<Command>}</Command>

<Command>void yAddUpdateString(string db = "", string var = "", string val = "") {</Command>
<Command>	ySetStringAtIndex(db, var, val, yGetNewestPointer(db));</Command>
<Command>}</Command>

<Command>void yAddUpdateVector(string db = "", string var = "", vector val = vector(0,0,0)) {</Command>
<Command>	ySetVectorAtIndex(db, var, val, yGetNewestPointer(db));</Command>
<Command>}</Command>

<Command>int yAddToDatabase(string db = "", string val = "") {</Command>
<Command>	yDatabaseCreateIfNull(db);</Command>
<Command>	int id = trQuestVarGet("database"+db);</Command>
<Command>	int next = xAddDatabaseBlock(id);</Command>
<Command>	yAddUpdateVar(db, "unitName", trQuestVarGet(val));</Command>
<Command>	return(next);</Command>
<Command>}</Command>

<Command>int yGetPointer(string db = "") {</Command>
<Command>	return(xGetPointer(1*trQuestVarGet("database"+db)));</Command>
<Command>}</Command>

<Command>bool ySetPointer(string db = "", int index = 0) {</Command>
<Command>	bool safe = xSetPointer(1*trQuestVarGet("database"+db), index);</Command>
<Command>	if (safe) {</Command>
<Command>		trQuestVarSet(db, yGetVar(db, "unitName"));</Command>
<Command>	}</Command>
<Command>	return(safe);</Command>
<Command>}</Command>

<Command>int yGetUnitAtIndex(string db = "", int index = 0) {</Command>
<Command>	return(1*yGetVarAtIndex(db, "unitName", index));</Command>
<Command>}</Command>

<Command>void ySetUnitAtIndex(string db = "", int index = 0, int value = 0) {</Command>
<Command>	ySetVarAtIndex(db, "unitName", value, index);</Command>
<Command>}</Command>

<Command>void ySetUnit(string db = "", int value = 0) {</Command>
<Command>	ySetVar(db, "unitName", value);</Command>
<Command>}</Command>

<Command>void yClearDatabase(string db = "") {</Command>
<Command>	xClearDatabase(1*trQuestVarGet("database"+db));</Command>
<Command>}</Command>

<Command>void yDatabaseSelectAll(string db = "") {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=yGetDatabaseCount(db); >0) {</Command>
<Command>		yDatabaseNext(db);</Command>
<Command>		trUnitSelectByQV(db);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>int yFindLatestReverse(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {</Command>
<Command>		int i = kbGetBlockID(""+x, true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				trQuestVarSet(qv, x);</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>int yFindLatest(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber() - 1;</Command>
<Command>	int current = trQuestVarGet(qv);</Command>
<Command>	while(next > current) {</Command>
<Command>		current = current + 1;</Command>
<Command>		int i = kbGetBlockID(""+current, true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				trQuestVarSet(qv, current);</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>


<Command>void DeploySober(string p="", string v=""){</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber();</Command>
<Command>	trArmyDispatch("1,10",p,1,trVectorQuestVarGetX(v), trVectorQuestVarGetY(v), trVectorQuestVarGetZ(v),0,true);</Command>
<Command>	trUnitSelectClear();trUnitSelect(""+next, true);</Command>
<Command>	trUnitTeleport(trVectorQuestVarGetX(v),trVectorQuestVarGetY(v),trVectorQuestVarGetZ(v));</Command>
<Command>}</Command>

<Command>bool GetBit(int n=0, int p=0){</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command>		if(i==p){</Command>
<Command>			return (iModulo(2,n)==1);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (false);</Command>
<Command>}</Command>

<Command>int SetBit(int n=0, int p=0){</Command>
<Command>	int r = 0;</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command><![CDATA[		if(iModulo(2,n)==1||i==p){]]></Command>
<Command>			r=r+xsPow(2,i);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (r);</Command>
<Command>}</Command>

<Command>int ClearBit(int n=0, int p=0){</Command>
<Command>	int r = 0;</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command><![CDATA[		if(iModulo(2,n)==1&&i!=p){]]></Command>
<Command>			r=r+xsPow(2,i);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (r);</Command>
<Command>}</Command>

<Command>rule initializeEverything</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	// Set idle processing to false so the game doesn't lag from trying to process 128 murmillos</Command>
<Command>	trSetUnitIdleProcessing(false);</Command>
<Command>	trUIFadeToColor(0,0,0,0,0,true);</Command>
<Command>	trSetObscuredUnits(false);</Command>
<Command>	trSetCivAndCulture(1, 9, 3); // Set P1 to Kronos</Command>
<Command>	trSetCivAndCulture(2, 9, 3); // Set P2 to Kronos</Command>

<Command>	gadgetUnreal("GodPowers");</Command>

<Command>	for(p=2; >0) {</Command>
<Command>		modularCounterInit("chat" + p + "Log", 5);</Command>
<Command>	}</Command>

<Command>	Multiplayer = aiIsMultiplayer(); 	// nottud is smart</Command>
<Command><![CDATA[	if(Multiplayer && kbIsPlayerHuman(2) == false){]]></Command>
<Command>		Multiplayer = false; // or kick?</Command>
<Command>	}</Command>
<Command>	xsEnableRule("data_load_00");</Command>

<Command>	modularCounterInit("lightningPop", 40);</Command>
<Command>	modularCounterInit("lightningPush", 40);</Command>
<Command>	modularCounterInit("lightningActivate", 40);</Command>

<Command>	modularCounterInit("spyFind", 40);</Command>
<Command>	modularCounterInit("spyFound", 40);</Command>

<Command>	modularCounterInit("deathSummonPush", 20);</Command>
<Command>	modularCounterInit("deathSummonPop", 20);</Command>


<Command>	trModifyProtounit("Gold Mine Dwarven", 1, 55, 4);</Command>
<Command>	trModifyProtounit("Gold Mine Dwarven", 2, 55, 4);</Command>
<Command>	// Modify animal attractor flying</Command>
<Command>	trModifyProtounit("Animal Attractor", 1, 55, 4);</Command>
<Command>	trModifyProtounit("Animal Attractor", 2, 55, 4);</Command>

<Command>	zInitProtoUnitStat("Wadjet Spit", 1, 1, 30);</Command>
<Command>	zInitProtoUnitStat("Wadjet Spit", 2, 1, 30);</Command>
<Command>	zSetProtoUnitStat("Wadjet Spit", 1, 1, 20);</Command>
<Command>	zSetProtoUnitStat("Wadjet Spit", 2, 1, 20);</Command>

<Command>	trModifyProtounit("Revealer", 0, 2, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer", 0, 2, -9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer", 0, 2, 54);</Command>
<Command>	trModifyProtounit("Revealer to Player", 1, 2, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer to Player", 1, 2, -9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer to Player", 1, 2, 18);</Command>
<Command>	trModifyProtounit("Revealer to Player", 2, 2, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer to Player", 2, 2, -9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer to Player", 2, 2, 18);</Command>

<Command>	trModifyProtounit("Bolt Strike", 0, 27, -10000);</Command>
<Command>	trModifyProtounit("Bolt Strike", 0, 28, -10000);</Command>
<Command>	trModifyProtounit("Bolt Strike", 0, 29, -10000);</Command>

<Command>	// LOS</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		trModifyProtounit("Dwarf", p, 2, -20);</Command>
<Command>		trModifyProtounit("Animal Attractor", p, 2, -20);</Command>
<Command>		trModifyProtounit("Nidhogg", p, 2, -20);</Command>
<Command>		trTechSetStatus(p, 7, 4); // heavy infantry</Command>
<Command>		trTechSetStatus(p, 476, 4); // iron all</Command>
<Command>		trTechSetStatus(p, 412, 4); // Iron wall</Command>
<Command>	}</Command>

<Command>	// Disable god powers</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(1, false);</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(2, false);</Command>

<Command>	// omniscience for p0</Command>
<Command>	trTechSetStatus(0, 304, 4);</Command>

<Command>	trPlayerSetDiplomacy(0, 1, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(0, 2, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(1, 0, "Neutral");</Command>
<Command>	trPlayerSetDiplomacy(2, 0, "Neutral");</Command>
<Command>	trPlayerSetDiplomacy(2, 1, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(1, 2, "Enemy");</Command>

<Command>	xsDisableRule("initializeEverything");</Command>
<Command>}</Command>


<Command>rule PlsStopHardcodingCrapYouNoobs</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 1){</Command>
<Command>		trModifyProtounit("Hero Greek Jason", 1, 27, 4.0);</Command>
<Command>		trModifyProtounit("Hero Greek Jason", 2, 27, 4.0);</Command>
<Command>		trModifyProtounit("Hero Greek Ajax", 1, 27, 3.0);</Command>
<Command>		trModifyProtounit("Hero Greek Ajax", 2, 27, 3.0);</Command>
<Command>		trModifyProtounit("Hero Greek Theseus", 1, 27, 4.0);</Command>
<Command>		trModifyProtounit("Hero Greek Theseus", 2, 27, 4.0);</Command>
<Command>		xsDisableRule("PlsStopHardcodingCrapYouNoobs");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>const int EVENT_LASER_END = 0;</Command>

<Command>rule event_assignment</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	trEventSetHandler(EVENT_LASER_END, "laserEnd");</Command>
<Command>	xsDisableRule("event_assignment");</Command>
<Command>}</Command>

<Command>void ThrowError(string message = "Zeno you made bug again!"){</Command>
<Command>	trShowWinLose(message, "xpack\xtaunts\en\999 theme.mp3");</Command>
<Command>}</Command>

<Command>const int STATE_ALIVE = 0;</Command>
<Command>const int STATE_DEAD = 1;</Command>

<Command>const int CLASS_ADVENTURER = 0;</Command>
<Command>const int CLASS_ARCANE = 1;</Command>
<Command>const int CLASS_NAGA = 2;</Command>
<Command>const int CLASS_CLOCKWORK = 3;</Command>
<Command>const int CLASS_EVIL = 4;</Command>
<Command>const int CLASS_SPACE = 5;</Command>

<Command>const int COMMANDER_ROGERS = 0;</Command>
<Command>const int COMMANDER_VENLESH = 1;</Command>
<Command>const int COMMANDER_NANO = 2;</Command>
<Command>const int COMMANDER_NOTTUD = 3;</Command>
<Command>const int COMMANDER_REACH = 4;</Command>
<Command>const int COMMANDER_SCRAGINS = 5;</Command>
<Command>const int COMMANDER_ROXAS = 6;</Command>
<Command>const int COMMANDER_YEEBAAGOOON = 7;</Command>
<Command>const int COMMANDER_ANRAHEIR = 8;</Command>
<Command>const int COMMANDER_ZENOPHOBIA = 9;</Command>
<Command>const int COMMANDER_NICK = 10;</Command>
<Command>const int COMMANDER_GOD = 11;</Command>

<Command>const int SPELL_NONE = 0;</Command>
<Command>const int SPELL_COMMANDER = 1; // Since the "spell" variable is unused on normal minions, we use it here to mark a unit as the Commander</Command>

<Command>const int SPELL_TYPE_DEFENSIVE = 1;</Command>
<Command>const int SPELL_TYPE_OTHER = 2;</Command>
<Command>const int SPELL_TYPE_OFFENSIVE = 3;</Command>

<Command>// Story</Command>
<Command>const int SPELL_INTIMIDATE = 999;</Command>
<Command>const int SPELL_GROUND_STOMP = 998;</Command>
<Command>const int SPELL_PISTOL_SHOT = 997;</Command>
<Command>const int SPELL_BOOTS_TREASURE = 996;</Command>
<Command>const int SPELL_WEAPONS_TREASURE = 995;</Command>
<Command>const int SPELL_SHIELDS_TREASURE = 994;</Command>
<Command>const int SPELL_RELOAD = 993;</Command>
<Command>const int SPELL_POISON_CLOUD = 992;</Command>
<Command>const int SPELL_NATURE_ANGRY = 991;</Command>
<Command>const int SPELL_ELVEN_APOCALYPSE = 990;</Command>
<Command>const int SPELL_FROST_BREATH = 989;</Command>
<Command>const int SPELL_PYROBALL = 988;</Command>
<Command>const int SPELL_MIRROR_REFLECTION = 987;</Command>
<Command>const int SPELL_KRAKEN_HUG = 986;</Command>
<Command>const int SPELL_WATER_PRESSURE = 985;</Command>
<Command>const int SPELL_OXYGEN_TANK = 984;</Command>

<Command>const int SPELL_DOMINANCE = 802;</Command>
<Command>const int SPELL_TAVERN_BRAWL = 801;</Command>
<Command>const int SPELL_SPIDER_LAIR = 800;</Command>
<Command>// Heap</Command>

<Command>// Adventurer</Command>
<Command>const int SPELL_FIRST_AID = 2;</Command>
<Command>const int SPELL_FOOD = 3;</Command>
<Command>const int SPELL_SING = 4;</Command>
<Command>const int SPELL_MAP = 5;</Command>
<Command>const int SPELL_BACKSTAB = 6;</Command>
<Command>const int SPELL_DUEL = 7;</Command>
<Command>const int SPELL_PARTY_UP = 8;</Command>
<Command>const int SPELL_TEAMWORK = 9;</Command>
<Command>const int SPELL_DEFENDER = 10;</Command>
<Command>const int SPELL_VICTORY = 11;</Command>
<Command>const int SPELL_WHIRLWIND = 12;</Command>
<Command>const int SPELL_SUMMON_ONE = 13;</Command>
<Command>const int SPELL_WOLF = 14;</Command>
<Command>const int SPELL_PING = 15;</Command>
<Command>const int SPELL_GUARDIAN_OF_SEA = 16;</Command>


<Command>// Arcane</Command>
<Command>const int SPELL_SPARK = 17;</Command>
<Command>const int SPELL_EXPLOSION = 18;</Command>
<Command>const int SPELL_RUNE_OF_FLAME = 19;</Command>
<Command>const int SPELL_RUNE_OF_ICE = 20;</Command>
<Command>const int SPELL_FIRE_AND_ICE = 21;</Command>
<Command>const int SPELL_DOUBLEBLAST = 22;</Command>
<Command>const int SPELL_ELECTROSURGE = 23;</Command>
<Command>const int SPELL_CLASS_TIME = 24;</Command>
<Command>const int SPELL_COPY_HOMEWORK = 25;</Command>
<Command>const int SPELL_METEOR = 26;</Command>
<Command>const int SPELL_MIRROR_IMAGE = 27;</Command>
<Command>const int SPELL_FINAL_EXAM = 28;</Command>
<Command>const int SPELL_APOCALYPSE = 29;</Command>
<Command>const int SPELL_SNIPE = 30;</Command>

<Command>const int SPELL_VALKYRIE_HEAL = 31;</Command>
<Command>const int SPELL_SHAPESHIFT = 32;</Command>

<Command>// Naga</Command>
<Command>const int SPELL_WATER_CANNON = 33;</Command>
<Command>const int SPELL_TIDAL_WAVE = 34;</Command>
<Command>const int SPELL_FLUSH = 35;</Command>
<Command>const int SPELL_DEEP_DIVE = 36;</Command>
<Command>const int SPELL_SEA_EMBRACE = 37;</Command>
<Command>const int SPELL_TELETIDE = 38;</Command>
<Command>const int SPELL_WRATH_OF_SEA = 39;</Command>
<Command>const int SPELL_RUNE_OF_WATER = 40;</Command>
<Command>const int SPELL_CLEANSING_WATERS = 41;</Command>
<Command>const int SPELL_DROWN = 42;</Command>

<Command>const int SPELL_LAMPADES_CONVERT = 43;</Command>
<Command>const int SPELL_MEDUSA_STUN = 44;</Command>

<Command>// Otherworld</Command>
<Command>const int SPELL_WORLD_SPLITTER = 45;</Command>
<Command>const int SPELL_SOUL_SIPHON = 46;</Command>
<Command>const int SPELL_BLOOD_PRICE = 47;</Command>
<Command>const int SPELL_DEATH_APPROACHES = 48;</Command>
<Command>const int SPELL_DOOM = 49;</Command>
<Command>const int SPELL_SHADOWSTEP = 50;</Command>
<Command>const int SPELL_FINAL_FRENZY = 51;</Command>
<Command>const int SPELL_CORPSE_PARTY = 52;</Command>
<Command>const int SPELL_UNDEATH = 53;</Command>
<Command>const int SPELL_RUNE_OF_DARKNESS = 54;</Command>
<Command>const int SPELL_ZENOS_PARADOX = 55;</Command>

<Command>const int SPELL_DEMON_EAT = 56;</Command>
<Command>const int SPELL_SCORPION_STING = 57;</Command>

<Command>// Clockwork</Command>
<Command>const int SPELL_CHOOSE_DIRECTION = 58;</Command>
<Command>const int SPELL_SCRAP_METAL = 59;</Command>
<Command>const int SPELL_MAGNETIZE = 60;</Command>
<Command>const int SPELL_ELECTRIC_GRID = 61;</Command>
<Command>const int SPELL_ZAP_GUN = 62;</Command>
<Command>const int SPELL_GEAR_FACTORY = 63;</Command>
<Command>const int SPELL_COMPRESS = 64;</Command>
<Command>const int SPELL_UPGRADE = 65;</Command>
<Command>const int SPELL_PROFITEERING = 66;</Command>
<Command>const int SPELL_WARNING_SHOT = 67;</Command>
<Command>const int SPELL_PORTABLE_SPELL_SHIELD = 68;</Command>
<Command>const int SPELL_REWIND = 69;</Command>
<Command>const int SPELL_TIME_POCKET = 70;</Command>
<Command>const int SPELL_BANHAMMER = 71;</Command>
<Command>const int SPELL_ASSEMBLY_LINE = 72;</Command>
<Command>const int SPELL_POWER_SUIT = 73;</Command>
<Command>const int SPELL_BORROWED_TIME = 74;</Command>
<Command>const int SPELL_FORTIFY = 75;</Command>
<Command>const int SPELL_SONG_OF_REST = 76;</Command>

<Command>// SPACE</Command>
<Command>const int SPELL_REFRESH_MANA = 77;</Command>
<Command>const int SPELL_NICKS_PORTAL = 78;</Command>
<Command>const int SPELL_SPACE_VENT = 79;</Command>
<Command>const int SPELL_ELDRITCH_WHISPERS = 80;</Command>
<Command>const int SPELL_ELDRITCH_RITUAL = 81;</Command>
<Command>const int SPELL_PETTY_LASER = 82;</Command>
<Command>const int SPELL_THICK_LASER = 83;</Command>
<Command>const int SPELL_GRAND_LASER = 84;</Command>
<Command>const int SPELL_OMEGA_LASER = 85;</Command>
<Command>const int SPELL_GODLY_LASER = 86;</Command>
<Command>const int SPELL_CONS_LIBRA = 87;</Command>
<Command>const int SPELL_CONS_TAURUS = 88;</Command>
<Command>const int SPELL_CONS_GEMINI = 89;</Command>
<Command>const int SPELL_CONS_ORION = 90;</Command>


<Command>const int ATTACK_DRAW_CARD = 0;</Command>
<Command>const int ATTACK_STUN_TARGET = 1;</Command>
<Command>const int ATTACK_GET_WINDSONG = 2;</Command>
<Command>const int ATTACK_BLOCK_DEATH = 3;</Command>
<Command>const int ATTACK_SING = 4;</Command>
<Command>const int ATTACK_ANIMATE_ORACLE = 5;</Command>
<Command>const int ATTACK_DISCOUNT = 6;</Command>
<Command>const int ATTACK_GET_ARCANE = 7;</Command>
<Command>const int ATTACK_YEET = 8;</Command>
<Command>const int ATTACK_PUSH = 9;</Command>
<Command>const int ATTACK_RETURN = 10;</Command>
<Command>const int ATTACK_GET_MANAFLOW = 11;</Command>
<Command>const int ATTACK_GET_ZOMBIE = 12;</Command>
<Command>const int ATTACK_SUMMON_ZOMBIE = 13;</Command>
<Command>const int ATTACK_POISON = 14;</Command>
<Command>const int ATTACK_GET_MINION = 15;</Command>
<Command>const int ATTACK_GET_FENRIS = 16;</Command>
<Command>const int ATTACK_ANIMATE_TOWER = 17;</Command>
<Command>const int ATTACK_OVERKILL_HEALS = 18;</Command>
<Command>const int ATTACK_RALLY = 19;</Command>
<Command>const int ATTACK_ARCANE_MISSLE = 20;</Command>
<Command>const int ATTACK_SPELL_DAMAGE = 21;</Command>
<Command>const int ATTACK_DRAW_CARD_ENEMY_COST = 22;</Command>
<Command>const int ATTACK_SUMMON_TREE = 23;</Command>
<Command>const int ATTACK_TEAMWORK = 24;</Command>
<Command>const int ATTACK_NICKONHAWK = 25;</Command>

<Command>const int ATTACK_EVENT_COUNT = 26;</Command>

<Command>const int DEATH_DRAW_CARD = 1;</Command>
<Command>const int DEATH_OPPONENT_DRAW_CARD = 2;</Command>
<Command>const int DEATH_BOOM_SMALL = 3;</Command>
<Command>const int DEATH_EGG = 4;</Command>
<Command>const int DEATH_GET_ARCANE = 5;</Command>
<Command>const int DEATH_SUMMON_ZOMBIE = 6;</Command>
<Command>const int DEATH_SUMMON_SHADOW = 7;</Command>
<Command>const int DEATH_GET_ATTACK = 8;</Command>
<Command>const int DEATH_POISON_MIST = 9;</Command>
<Command>const int DEATH_DARKNESS_RETURNS = 10;</Command>
<Command>const int DEATH_SUMMON_RANDOM = 11;</Command>
<Command>const int DEATH_GET_SCRAP = 12;</Command>
<Command>const int DEATH_GET_TREASURE = 13;</Command>
<Command>const int DEATH_SUMMON_BEETLE = 14;</Command>
<Command>const int DEATH_DAMAGE_ENEMY = 15;</Command>
<Command>const int DEATH_REDUCE_COST = 16;</Command>

<Command>const int DEATH_EVENT_COUNT = 17;</Command>


<Command>const int CHARGE = 0;</Command>
<Command>const int GUARD = 1;</Command>
<Command>const int AIRDROP = 2;</Command>
<Command>const int FURIOUS = 3;</Command>
<Command>const int LIGHTNING = 4;</Command>
<Command>const int REGENERATE = 5;</Command>
<Command>const int DEADLY = 6;</Command>
<Command>const int ETHEREAL = 7;</Command>
<Command>const int ARMORED = 8;</Command>
<Command>const int WARD = 9;</Command>
<Command>const int BEACON = 10;</Command>
<Command>const int AMBUSH = 11;</Command>
<Command>const int FLEETING = 12;</Command>
<Command>const int HEALER = 13;</Command>
<Command>const int DECAY = 14;</Command>
<Command>const int FLYING = 15;</Command>
<Command>const int OVERFLOW = 16;</Command>
<Command>const int MAGNETIC = 17;</Command>
<Command>const int CONDUCTOR = 18;</Command>
<Command>const int STEALTH = 19;</Command>
<Command>const int REPEATABLE = 20;</Command>
<Command>const int IMMUNE = 21;</Command>

<Command>const int NUM_KEYWORDS = 22;</Command>


<Command>string GetKeywordName(int bitPosition=0){</Command>
<Command>	switch(bitPosition){</Command>
<Command>		case CHARGE: return ("Charge");</Command>
<Command>		case GUARD: return ("Guard");</Command>
<Command>		case AIRDROP: return ("Airdrop");</Command>
<Command>		case FURIOUS: return ("Furious");</Command>
<Command>		case LIGHTNING: return ("Lightning");</Command>
<Command>		case REGENERATE: return ("Regenerate");</Command>
<Command>		case DEADLY: return ("Deadly");</Command>
<Command>		case ETHEREAL: return ("Pathfinder");</Command>
<Command>		case ARMORED: return ("Armored");</Command>
<Command>		case WARD: return ("Ward");</Command>
<Command>		case BEACON: return ("Beacon");</Command>
<Command>		case AMBUSH: return ("Ambush");</Command>
<Command>		case FLEETING: return ("Fleeting");</Command>
<Command>		case HEALER: return("Healer");</Command>
<Command>		case DECAY: return("Decay");</Command>
<Command>		case FLYING: return("Flying");</Command>
<Command>		case OVERFLOW: return("Overflow");</Command>
<Command>		case MAGNETIC: return("Magnetic");</Command>
<Command>		case CONDUCTOR: return("Conductor");</Command>
<Command>		case STEALTH: return("Stealth");</Command>
<Command>		case REPEATABLE: return("Echo");</Command>
<Command>		case IMMUNE: return("Immune");</Command>
<Command>	}</Command>
<Command>	ThrowError("Invalid keyword id. Method: GetKeywordName");</Command>
<Command>	return ("");</Command>
<Command>}</Command>

<Command>string GetKeywordDescription(int bitPosition=0){</Command>
<Command>	switch(bitPosition){</Command>
<Command>		case CHARGE: return ("Ready to act when summoned.");</Command>
<Command>		case GUARD: return ("If an adjacent ally is attacked, swap spaces with it before combat occurs.");</Command>
<Command>		case AIRDROP: return ("I don't have to be summoned next to Beacon.");</Command>
<Command>		case FURIOUS: return ("Two attacks each turn.");</Command>
<Command>		case LIGHTNING: return ("Attack will chain through connected enemies.");</Command>
<Command>		case REGENERATE: return ("Restores to full health at the start of your turn.");</Command>
<Command>		case DEADLY: return ("I kill any minion that I attack.");</Command>
<Command>		case ETHEREAL: return ("Can pass through units and impassable terrain.");</Command>
<Command>		case ARMORED: return ("I take 1 less damage from all sources.");</Command>
<Command>		case WARD: return ("I cannot be targeted by spells or play effects.");</Command>
<Command>		case BEACON: return ("Allies can be summoned next to me.");</Command>
<Command>		case AMBUSH: return ("When initiating combat, I attack first.");</Command>
<Command>		case FLEETING: return ("The card is discarded from hand at the end of the turn.");</Command>
<Command>		case HEALER: return("Can't attack or counter-attack. Instead, I can heal allies within range.");</Command>
<Command>		case DECAY: return("I take 1 damage at the end of your turn.");</Command>
<Command>		case FLYING: return("Pathfinder. Other units can move through. Can only be attacked by ranged enemies.");</Command>
<Command>		case OVERFLOW: return("Cost is reduced by your Manaflow.");</Command>
<Command>		case MAGNETIC: return("When played next to another Magnetic minion, you can combine them, adding attack, health, and keywords.");</Command>
<Command>		case CONDUCTOR: return("Allied Lightning effects can pass through me.");</Command>
<Command>		case STEALTH: return("I cannot be targeted until I take damage.");</Command>
<Command>		case REPEATABLE: return("This card may be played an additional time.");</Command>
<Command>		case IMMUNE: return("Cannot take damage.");</Command>

<Command>	}</Command>
<Command>	ThrowError("Invalid keyword id. Method: GetKeywordDescription");</Command>
<Command>	return ("");</Command>
<Command>}</Command>

<Command>int Keyword(int bitPos = 0) {</Command>
<Command>	return(1*xsPow(2, bitPos));</Command>
<Command>}</Command>


<Command>bool HasKeyword(int key = 0, int keywords = 0) {</Command>
<Command>	return(GetBit(keywords, key));</Command>
<Command>}</Command>


<Command>int getCardClass(int index = 0) {</Command>
<Command>	return(1*xsFloor(index / 30));</Command>
<Command>}</Command>

<Command>int CardToProto(int card = 0) {</Command>
<Command>	return(1*trQuestVarGet("CardToProto"+card));</Command>
<Command>}</Command>

<Command>int CardToSpell(int card = 0) {</Command>
<Command>	return(1*trQuestVarGet("CardToSpell"+card));</Command>
<Command>}</Command>

<Command>int ProtoToCard(int proto = 0) {</Command>
<Command>	return(1*trQuestVarGet("ProtoToCard"+proto));</Command>
<Command>}</Command>

<Command>int SpellToCard(int spell = 0) {</Command>
<Command>	return(1*trQuestVarGet("SpellToCard"+spell));</Command>
<Command>}</Command>

<Command>int getCardCountCollection(int index = 0) {</Command>
<Command>	return(1*trQuestVarGet("card_"+index+"_count") - trQuestVarGet("card_"+index+"_countInDeck"));</Command>
<Command>}</Command>

<Command>int getCardCountDeck(int index = 0) {</Command>
<Command>	return(1*trQuestVarGet("card_"+index+"_countInDeck"));</Command>
<Command>}</Command>

<Command>void setCardCountCollection(int index = 0, int count = 0) {</Command>
<Command>	trQuestVarSet("card_"+index+"_count", count);</Command>
<Command>}</Command>

<Command>void setCardCountDeck(int index = 0, int count = 0) {</Command>
<Command>	trQuestVarSet("card_"+index+"_countInDeck", count);</Command>
<Command>}</Command>

<Command>void setDeckCommander(int commander = 0) {</Command>
<Command>	trQuestVarSet("commander", commander);</Command>
<Command>}</Command>

<Command>int getDeckCommander() {</Command>
<Command>	return(1*trQuestVarGet("commander"));</Command>
<Command>}</Command>

<Command>void setClassProgress(int class = 0, int progress = 0) {</Command>
<Command>	trQuestVarSet("class"+class+"progress", progress);</Command>
<Command>}</Command>

<Command>int getClassProgress(int class = 0) {</Command>
<Command>	return(1*trQuestVarGet("class"+class+"progress"));</Command>
<Command>}</Command>


<Command>int GetSpellAnimation(int class = 0, int type = 0){</Command>
<Command>	switch(class)</Command>
<Command>	{</Command>
<Command>		case CLASS_ADVENTURER:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (6);	// Loki</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (8);	// Thor</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (7);	// Odin</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_ARCANE:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (9);	// Kronos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (9); // Kronos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (11); // Oranos</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_NAGA:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (9); // Kronos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (9); // Kronos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (10); // Gaia</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_CLOCKWORK:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (2);	// Set</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (0);	// Isis</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (1);	// Ra</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_EVIL:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (3);	// Hades</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (4);	// Poseidon</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (5);	// Zeus</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_SPACE:</Command>
<Command>		{</Command>
<Command>			switch(type)</Command>
<Command>			{</Command>
<Command>				case SPELL_TYPE_OFFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (9);	// Kronos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_DEFENSIVE:</Command>
<Command>				{</Command>
<Command>					return (11); // Oranos</Command>
<Command>				}</Command>
<Command>				case SPELL_TYPE_OTHER:</Command>
<Command>				{</Command>
<Command>					return (11); // Oranos</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	ThrowError("GetSpellAnimation");</Command>
<Command>}</Command>

<Command>string getCardClassIcon(int card = 0) {</Command>
<Command>	switch(getCardClass(card))</Command>
<Command>	{</Command>
<Command>		case CLASS_ADVENTURER:</Command>
<Command>		{</Command>
<Command>			return("icons\building specialist icons 64");</Command>
<Command>		}</Command>
<Command>		case CLASS_ARCANE:</Command>
<Command>		{</Command>
<Command>			return("icons\improvement focus icons 64");</Command>
<Command>		}</Command>
<Command>		case CLASS_NAGA:</Command>
<Command>		{</Command>
<Command>			return("icons\improvement poseidons secret icons 64");</Command>
<Command>		}</Command>
<Command>		case CLASS_CLOCKWORK:</Command>
<Command>		{</Command>
<Command>			return("icons\improvement engineers icon 64");</Command>
<Command>		}</Command>
<Command>		case CLASS_EVIL:</Command>
<Command>		{</Command>
<Command>			return("icons\god power ancestors icon 64");</Command>
<Command>		}</Command>
<Command>		case CLASS_SPACE:</Command>
<Command>		{</Command>
<Command>			return("icons\god power eclipse icon 64");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>string colorizeStat(int name = 0, string s = "Attack", string d = "ATK") {</Command>
<Command>	int diff = mGetVar(name, s) - trQuestVarGet("card_"+1*mGetVar(name, "proto")+"_"+s);</Command>
<Command>	string val = "";</Command>

<Command>	if (diff > 0) {</Command>
<Command><![CDATA[		val = "<color=0,1,0>"+d+" "+1*mGetVar(name, s)+"</color>";]]></Command>
<Command><![CDATA[	} else if (diff < 0) {]]></Command>
<Command><![CDATA[		val = "<color=1,0,0>"+d+" "+1*mGetVar(name, s)+"</color>";]]></Command>
<Command>	} else {</Command>
<Command>		val = d+" "+1*mGetVar(name, s);</Command>
<Command>	}</Command>

<Command>	return(val);</Command>
<Command>}</Command>


<Command>void displayCardDetails(int proto = 0, int spell = 0) {</Command>
<Command>	string dialog = "";</Command>
<Command>	string message = "";</Command>
<Command>	int keywords = trQuestVarGet("card_"+proto+"_keywords");</Command>
<Command>	message = trStringQuestVarGet("card_"+proto+"_ability");</Command>
<Command>	int card = ProtoToCard(proto);</Command>
<Command>	if (spell > 1) {</Command>
<Command>		keywords = trQuestVarGet("spell_"+spell+"_keywords");</Command>
<Command>		message = trStringQuestVarGet("spell_"+spell+"_description");</Command>
<Command>		card = SpellToCard(proto);</Command>
<Command>	}</Command>

<Command><![CDATA[	if (spell <= SPELL_COMMANDER) {]]></Command>
<Command>		gadgetUnreal("DetailedHelpButton");</Command>
<Command>		if(HasKeyword(ARMORED, keywords)){</Command>
<Command>			gadgetUnreal("NormalArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-normalArmor");</Command>
<Command>		}</Command>
<Command>		if(HasKeyword(WARD, keywords)){</Command>
<Command>			gadgetUnreal("PierceArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-pierceArmor");</Command>
<Command>		}</Command>
<Command><![CDATA[		trChatSend(0, "<color={Playercolor(1)}>==== (" + 1*trQuestVarGet("card_"+proto+"_cost") + ") " + trStringQuestVarGet("card_"+proto+"_name")+" ====</color>");]]></Command>
<Command><![CDATA[		trChatSend(0, "ATK " + 1*trQuestVarGet("card_"+proto+"_attack") + " | HP " + 1*trQuestVarGet("card_"+proto+"_health") + " | SPD " + 1*trQuestVarGet("card_"+proto+"_speed") + " | RNG " + 1*trQuestVarGet("card_"+proto+"_range"));]]></Command>
<Command>	} else {</Command>
<Command><![CDATA[		trChatSend(0, "<color={Playercolor(1)}>=== (" + 1*trQuestVarGet("spell_"+spell+"_cost") + ") " + trStringQuestVarGet("spell_"+spell+"_name")+" ===</color>");]]></Command>
<Command>	}</Command>

<Command>	if(message != ""){</Command>
<Command>		trChatSend(0, message);</Command>
<Command>	}</Command>

<Command>	bool multiple = false;</Command>
<Command>	if (keywords>0) {</Command>
<Command>		trChatSend(0, "==== Keywords ====");</Command>
<Command>		int current = xsPow(2, NUM_KEYWORDS - 1);</Command>
<Command>		for(k=NUM_KEYWORDS - 1; >=0){</Command>
<Command>			if (keywords >= current) {</Command>
<Command>				if(multiple){</Command>
<Command>					dialog = dialog + ", ";</Command>
<Command>				}</Command>
<Command>				multiple = true;</Command>
<Command>				dialog = dialog + GetKeywordName(k);</Command>
<Command>				keywords = keywords - current;</Command>
<Command>				trChatSend(0, GetKeywordName(k) + ": " + GetKeywordDescription(k));</Command>
<Command>			}</Command>
<Command>			current = current / 2;</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	trSoundPlayDialog("default", "1", -1, false, " : " + dialog, getCardClassIcon(card));</Command>
<Command>}</Command>

<Command>void updateMana() {</Command>
<Command><![CDATA[	for(p=1;<=2){]]></Command>
<Command>		trCounterAbort("mana"+p);</Command>
<Command><![CDATA[		string str = "<color={Playercolor("+p+")}>Manaflow: "+1*trQuestVarGet("p"+p+"manaflow");]]></Command>
<Command>		if(p == trQuestVarGet("activePlayer")){</Command>
<Command><![CDATA[			str = str + " | Mana: "+1*trQuestVarGet("p"+p+"mana") + "/" + 1*trQuestVarGet("maxMana");]]></Command>
<Command>		}</Command>
<Command>		trCounterAddTime("mana"+p, -1, -9999999, str,-1);</Command>
<Command>		trCounterAbort("handAndDeck"+p);</Command>
<Command>		trCounterAddTime("handAndDeck"+p, -1, -9999999,</Command>
<Command><![CDATA[			"<color={Playercolor("+p+")}>Hand: "+1*yGetDatabaseCount("p"+p+"hand") + " | Deck: "+1*yGetDatabaseCount("p"+p+"deck"), -1);]]></Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void displayCardKeywordsAndDescription(int name = 0) {</Command>
<Command>	ChatLogShow();</Command>
<Command>	string bonus = " ";</Command>
<Command>	string dialog = "";</Command>
<Command>	string message = "";</Command>
<Command>	int proto = mGetVar(name, "proto");</Command>
<Command>	int keywords = mGetVar(name, "keywords");</Command>
<Command>	bool multiple = false;</Command>
<Command>	if (mGetVar(name, "stunTime") > 0) {</Command>
<Command>		dialog = "Stunned";</Command>
<Command>		multiple = true;</Command>
<Command>	}</Command>
<Command>	if(keywords>0){</Command>
<Command>		int current = xsPow(2, NUM_KEYWORDS - 1);</Command>
<Command>		for(k=NUM_KEYWORDS - 1; >=0){</Command>
<Command>			if (keywords >= current) {</Command>
<Command>				if(multiple){</Command>
<Command>					dialog = dialog + ", ";</Command>
<Command>				}</Command>
<Command>				multiple = true;</Command>
<Command>				dialog = dialog + GetKeywordName(k);</Command>
<Command>				keywords = keywords - current;</Command>
<Command>			}</Command>
<Command>			current = current / 2;</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	int card = ProtoToCard(proto);</Command>
<Command>	int p = mGetVar(name, "player");</Command>
<Command>	int discount = 0;</Command>
<Command><![CDATA[	if (mGetVar(name, "spell") <= SPELL_COMMANDER) {]]></Command>
<Command>		gadgetUnreal("DetailedHelpButton");</Command>
<Command>		if(HasKeyword(ARMORED, keywords)){</Command>
<Command>			gadgetUnreal("NormalArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-normalArmor");</Command>
<Command>		}</Command>
<Command>		if(HasKeyword(WARD, keywords)){</Command>
<Command>			gadgetUnreal("PierceArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-pierceArmor");</Command>
<Command>		}</Command>

<Command>		trVectorQuestVarSet("pos", kbGetBlockPosition(""+name));</Command>
<Command>		trVectorQuestVarSet("center", kbGetBlockPosition("128"));</Command>

<Command><![CDATA[		trChatSend(0, "<color={Playercolor("+p+")}>==== (" + 1*mGetVar(name, "cost") + ") " + trStringQuestVarGet("card_"+proto+"_name")+" ====</color>");]]></Command>
<Command>		if (trDistanceBetweenVectorsSquared("pos", "center") > 2025) {</Command>
<Command>			discount = trQuestVarGet("p"+p+"minionDiscount");</Command>
<Command>			if (HasKeyword(OVERFLOW, 1*mGetVar(name, "keywords"))) {</Command>
<Command>				discount = discount + trQuestVarGet("p"+p+"manaflow");</Command>
<Command>			}</Command>
<Command>			if (discount > 0) {</Command>
<Command><![CDATA[				trChatSend(0, "<color=0,1,0>Discount " + discount);]]></Command>
<Command>				bonus = "Discount " + discount;</Command>
<Command>			}</Command>
<Command><![CDATA[			trChatSend(0, "ATK " + 1*trQuestVarGet("card_"+proto+"_attack") + " | HP " + 1*trQuestVarGet("card_"+proto+"_health") + " | SPD " + 1*trQuestVarGet("card_"+proto+"_speed") + " | RNG " + 1*trQuestVarGet("card_"+proto+"_range"));]]></Command>
<Command>		} else {</Command>
<Command>			xsSetContextPlayer(1*mGetVar(name, "player"));</Command>
<Command>			float health = kbUnitGetCurrentHitpoints(kbGetBlockID(""+name, true));</Command>
<Command>			xsSetContextPlayer(0);</Command>
<Command>			int diff = 1*mGetVar(name, "health") - health;</Command>
<Command>			if (diff > 0) {</Command>
<Command>				bonus = bonus + "HP +" + diff + " ";</Command>
<Command>			}</Command>

<Command>			diff = mGetVar(name, "attack") - trQuestVarGet("card_" + proto + "_Attack");</Command>
<Command>			if (diff > 0) {</Command>
<Command>				bonus = bonus + "ATK +" + diff + " ";</Command>
<Command><![CDATA[			} else if (diff < 0) {]]></Command>
<Command>				bonus = bonus + "ATK " + diff + " ";</Command>
<Command>			}</Command>

<Command>			diff = mGetVar(name, "speed") - trQuestVarGet("card_" + proto + "_Speed");</Command>
<Command>			if (diff > 0) {</Command>
<Command>				bonus = bonus + "SPD +" + diff;</Command>
<Command><![CDATA[			} else if (diff < 0) {]]></Command>
<Command>				bonus = bonus + "SPD " + diff;</Command>
<Command>			}</Command>
<Command><![CDATA[			trChatSend(0, colorizeStat(name, "Attack", "ATK") + " | " + colorizeStat(name, "Health", "HP") + " | " + colorizeStat(name, "Speed", "SPD") + " | " + colorizeStat(name, "Range", "RNG"));]]></Command>
<Command>		}</Command>

<Command>		if (mGetVar(name, "keywords") > 0) {</Command>
<Command>			trChatSend(0, dialog);</Command>
<Command>		}</Command>
<Command>		trChatSend(0, trStringQuestVarGet("card_"+proto+"_Ability"));</Command>
<Command>	} else {</Command>
<Command>		card = SpellToCard(1*mGetVar(name, "spell"));</Command>
<Command><![CDATA[		trChatSend(0, "<color={Playercolor("+p+")}>=== (" + 1*mGetVar(name, "cost") + ") " + trStringQuestVarGet("spell_"+1*mGetVar(name, "spell")+"_name")+" ===</color>");]]></Command>

<Command>		discount = trQuestVarGet("p"+p+"spellDiscount");</Command>
<Command>		if (HasKeyword(OVERFLOW, 1*mGetVar(name, "keywords"))) {</Command>
<Command>			discount = discount + trQuestVarGet("p"+p+"manaflow");</Command>
<Command>		}</Command>
<Command>		if ((discount == 0) == false) {</Command>
<Command>			bonus = "Discount " + discount;</Command>
<Command>			if (discount > 0) {</Command>
<Command><![CDATA[				trChatSend(0, "<color=0,1,0>Discount " + discount);]]></Command>
<Command><![CDATA[			} else if (discount < 0) {]]></Command>
<Command><![CDATA[				trChatSend(0, "<color=1,0,0>Discount " + discount);]]></Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if (mGetVar(name, "keywords") > 0) {</Command>
<Command>			trChatSend(0, dialog);</Command>
<Command>		}</Command>
<Command>		trChatSend(0, trStringQuestVarGet("spell_"+1*mGetVar(name, "spell")+"_description"));</Command>
<Command>	}</Command>

<Command>	updateMana();</Command>
<Command>	trSoundPlayDialog("default", "1", -1, false, bonus + ": " + dialog, getCardClassIcon(card));</Command>
<Command>}</Command>

<Command>int CardInstantiate(int p = 0, int proto = 0, int spell = 0) {</Command>
<Command>	int next = 0;</Command>
<Command>	for(x=64; >0) {</Command>
<Command>		next = zBankNext("p"+p+"unitBank");</Command>
<Command><![CDATA[		if (mGetVar(next, "played") <= 0) {]]></Command>
<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+next, false);</Command>

<Command><![CDATA[	if (spell == 0 || spell == SPELL_COMMANDER) {]]></Command>
<Command>		trUnitChangeName(trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		mSetVar(next, "attack", trQuestVarGet("card_" + proto + "_Attack"));</Command>
<Command>		mSetVar(next, "health", trQuestVarGet("card_" + proto + "_Health"));</Command>
<Command>		mSetVar(next, "speed", trQuestVarGet("card_" + proto + "_Speed"));</Command>
<Command>		mSetVar(next, "range", trQuestVarGet("card_" + proto + "_Range"));</Command>
<Command>		mSetVar(next, "cost", trQuestVarGet("card_" + proto + "_Cost"));</Command>
<Command>		mSetVar(next, "keywords", trQuestVarGet("card_" + proto + "_Keywords"));</Command>
<Command>		mSetVar(next, "onAttack", trQuestVarGet("card_" + proto + "_OnAttack"));</Command>
<Command>		mSetVar(next, "onDeath", trQuestVarGet("card_" + proto + "_OnDeath"));</Command>
<Command>		mSetVar(next, "tile", 0);</Command>
<Command>		mSetVar(next, "stunTime", 0);</Command>
<Command>		mSetVar(next, "stunSFX", 0);</Command>
<Command>		mSetVar(next, "victory", 0);</Command>
<Command>		mSetVar(next, "victoryAmbush", 0);</Command>
<Command>		mSetVar(next, "scale", 1);</Command>
<Command>		mSetString(next, "ability", trStringQuestVarGet("card_" + proto + "_Ability"));</Command>
<Command>	} else {</Command>
<Command>		trUnitChangeName(trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>		mSetVar(next, "cost", trQuestVarGet("spell_" + spell + "_Cost"));</Command>
<Command>		mSetVar(next, "keywords", trQuestVarGet("spell_"+spell+"_keywords"));</Command>
<Command>		proto = kbGetProtoUnitID("Statue of Lightning");</Command>
<Command>	}</Command>

<Command>	mSetVar(next, "proto", proto);</Command>
<Command>	mSetVar(next, "player", p);</Command>
<Command>	mSetVar(next, "spell", spell);</Command>
<Command>	mSetVar(next, "played", 1);</Command>
<Command>	mSetVar(next, "state", STATE_ALIVE);</Command>

<Command>	trMutateSelected(proto);</Command>
<Command>	trUnitConvert(p);</Command>

<Command>	return(next);</Command>
<Command>}</Command>

<Command>void SpellSetup(string name = "", int cost = 0, int spell = 0, string desc = "", int type = 0, int keywords = 0, bool uncollectable = false) {</Command>
<Command>	trStringQuestVarSet("spell_"+spell+"_name", name);</Command>
<Command>	trQuestVarSet("spell_"+spell+"_cost", cost);</Command>
<Command>	trStringQuestVarSet("spell_"+spell+"_description", desc);</Command>
<Command>	trQuestVarSet("spell_"+spell+"_type", type);</Command>
<Command>	trQuestVarSet("spell_"+spell+"_animation", GetSpellAnimation((1*trQuestVarGet("cardIndex"))/30, type));</Command>

<Command>	// This is so that the uncollectable card is assigned to the right class</Command>
<Command>	trQuestVarSet("spellToCard"+spell, trQuestVarGet("cardIndex"));</Command>
<Command>	if (uncollectable == false) {</Command>
<Command>		trQuestVarSet("cardToSpell"+1*trQuestVarGet("cardIndex"), spell);</Command>
<Command>		trQuestVarSet("cardToProto"+1*trQuestVarGet("cardIndex"), kbGetProtoUnitID("Statue of Lightning"));</Command>
<Command>		trQuestVarSet("cardIndex", 1 + trQuestVarGet("cardIndex"));</Command>
<Command>	}</Command>

<Command>	trQuestVarSet("spell_"+spell+"_keywords", keywords);</Command>

<Command>}</Command>

<Command>void CardEvents(string protoName = "", int onAttack = 0, int onDeath = 0, string ability="") {</Command>
<Command>	int proto = kbGetProtoUnitID(protoName);</Command>
<Command>	trQuestVarSet("card_" + proto + "_OnAttack",onAttack);</Command>
<Command>	trQuestVarSet("card_" + proto + "_OnDeath",onDeath);</Command>
<Command>	trStringQuestVarSet("card_" + proto + "_Ability",ability);</Command>
<Command>}</Command>

<Command>void CardSetup(string protoName="", int cost=1, string name="", int attack=1, int health=1, int speed=1, int range=0, int keywords=0, bool uncollectable = false){</Command>
<Command>	int proto = kbGetProtoUnitID(protoName);</Command>
<Command><![CDATA[	if(proto<0){]]></Command>
<Command>		ThrowError("That's not a unit. Method: CardSetup");</Command>
<Command>	}</Command>

<Command>	// this is so that the uncollectable card is assigned to the right class</Command>
<Command>	trQuestVarSet("protoToCard"+proto, trQuestVarGet("cardIndex"));</Command>
<Command>	if (uncollectable == false) {</Command>
<Command>		trQuestVarSet("cardToProto"+1*trQuestVarGet("cardIndex"), proto);</Command>
<Command>		trQuestVarSet("cardIndex", 1 + trQuestVarGet("cardIndex"));</Command>
<Command>	}</Command>

<Command>	trStringQuestVarSet("card_" + proto + "_Name",name);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Cost",cost);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Attack",attack);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Health",health);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Speed",speed);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Range",range);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Keywords",keywords);</Command>
<Command>	if (HasKeyword(ETHEREAL, keywords)) {</Command>
<Command>		trModifyProtounit(protoName, 1, 55, 4);</Command>
<Command>		trModifyProtounit(protoName, 2, 55, 4);</Command>
<Command>	} else {</Command>
<Command>		trModifyProtounit(protoName, 1, 55, 1);</Command>
<Command>		trModifyProtounit(protoName, 2, 55, 1);</Command>
<Command>	}</Command>

<Command><![CDATA[	for(p=1;<cNumberPlayers){]]></Command>
<Command>		trModifyProtounit(protoName, p, 16, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 16, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 16, 0); // Cost Gold</Command>
<Command>		trModifyProtounit(protoName, p, 17, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 17, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 17, 0); // Cost Wood</Command>
<Command>		trModifyProtounit(protoName, p, 18, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 18, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 18, 0); // Cost Food</Command>
<Command>		trModifyProtounit(protoName, p, 19, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 19, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 19, cost); // Cost Favor</Command>
<Command>		if(range==1){</Command>
<Command>			trModifyProtounit(protoName, p, 27, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 27, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 27, attack); // Hand Attack Hack</Command>
<Command>			trModifyProtounit(protoName, p, 28, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 28, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 28, 0); // Hand Attack Pierce</Command>
<Command>			trModifyProtounit(protoName, p, 29, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 29, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 29, 0); // Hand Attack Crush</Command>
<Command>		} else {</Command>
<Command>			trModifyProtounit(protoName, p, 30, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 30, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 30, 0); // Ranged Attack Hack</Command>
<Command>			trModifyProtounit(protoName, p, 31, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 31, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 31, attack); // Ranged Attack Pierce</Command>
<Command>			trModifyProtounit(protoName, p, 32, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 32, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 32, 0); // Ranged Attack Crush</Command>
<Command>		}</Command>
<Command>		trModifyProtounit(protoName, p, 0, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 0, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 0, health); // Hitpoints</Command>

<Command>		trModifyProtounit(protoName, p, 11, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 11, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 11, range); // Range</Command>

<Command>		trModifyProtounit(protoName, p, 1, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 1, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 1, 10); // Speed</Command>

<Command>		// 0 LOS</Command>
<Command>		trModifyProtounit(protoName, p, 2, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 2, -9999999999999999999.0);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeCards</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	trQuestVarSet("cardsReady", 0);</Command>
<Command><![CDATA[	for(p=1;<cNumberPlayers){]]></Command>
<Command>		trForbidProtounit(p, "Archer Atlantean Hero");</Command>
<Command>		trForbidProtounit(p, "Javelin Cavalry Hero");</Command>
<Command>		trForbidProtounit(p, "Lancer Hero");</Command>
<Command>		trForbidProtounit(p, "Maceman Hero");</Command>
<Command>		trForbidProtounit(p, "Oracle Hero");</Command>
<Command>		trForbidProtounit(p, "Royal Guard Hero");</Command>
<Command>		trForbidProtounit(p, "Trident Soldier Hero");</Command>
<Command>		trForbidProtounit(p, "Villager Atlantean Hero");</Command>
<Command>		trForbidProtounit(p, "Settlement Level 1");</Command>
<Command>		trForbidProtounit(p, "Guild");</Command>
<Command>		trForbidProtounit(p, "Siege Tower");</Command>
<Command>		trForbidProtounit(p, "Manor");</Command>
<Command>		trForbidProtounit(p, "Dock");</Command>
<Command>		trForbidProtounit(p, "Wall Connector");</Command>
<Command>		trForbidProtounit(p, "Temple");</Command>
<Command>		trForbidProtounit(p, "Ulfsark");</Command>
<Command>		trModifyProtounit("Minion", p, 8, -99); // minion lifespan</Command>
<Command>	}</Command>

<Command>	zBankInit("p1unitBank", 1, 63);</Command>
<Command>	zBankInit("p2unitBank", 64, 64);</Command>
<Command>	zBankInit("allUnitsBank", 1, 127);</Command>

<Command>	CardSetup("Automaton",		0, "Training Dummy", 		0, 10, 0, 0, 0, true);</Command>
<Command>	CardEvents("Automaton", 0, 0, 		"Hit me hard daddy!");</Command>

<Command>	CardSetup("General Melagius",		0, "General Store", 			2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardEvents("General Melagius", Keyword(ATTACK_RALLY), 0,	"Attack: If it's my turn, give allied minions +1 Attack.");</Command>
<Command>	CardSetup("Shaba Ka",				0, "Mister Pirate", 			2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Shaba Ka", 0, 0,	"At the start of your turn, the player with the most units gets a random treasure.");</Command>
<Command>	CardSetup("Qilin",					0, "Forest Protector",		2, 40, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Qilin", Keyword(ATTACK_DRAW_CARD_ENEMY_COST), 0, 	"Attack: Draw a card. Reduce its cost by the number of enemies.");</Command>
<Command>	CardSetup("Audrey",					0, "Vora",					2, 20, 0, 1, Keyword(BEACON) + Keyword(DEADLY), true);</Command>
<Command>	CardEvents("Audrey", 0, 0,	"I gain Regenerate on Turn 5.");</Command>

<Command>	CardSetup("Pharaoh Secondary",		0, "Fire Mage", 			2, 20, 2, 2, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Pharaoh Secondary", Keyword(ATTACK_SPELL_DAMAGE), 0, 	"After I counterattack, I gain +1 Spell Damage.");</Command>
<Command>	CardSetup("King Folstag",			0, "Frost Mage", 			3, 30, 2, 1, Keyword(BEACON) + Keyword(ARMORED), true);</Command>
<Command>	CardEvents("King Folstag", Keyword(ATTACK_STUN_TARGET), 0, 	"Attack: Stun my target.");</Command>
<Command>	CardSetup("Hero Boar",				0, "Polymorphed Mage", 		1, 30, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Hero Boar", Keyword(ATTACK_YEET), 0,						"After I counterattack, return my target to your opponent's hand.");</Command>
<Command>	CardSetup("Setna",					0, "Archmage", 				2, 20, 2, 2, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Setna", Keyword(ATTACK_ARCANE_MISSLE), 0, 	"Attack: Deal 1 Damage to a random enemy.");</Command>
<Command>	CardSetup("Circe",					0, "Archmage's Mom", 		2, 40, 2, 2, Keyword(BEACON) + Keyword(LIGHTNING), true);</Command>
<Command>	CardEvents("Circe", Keyword(ATTACK_ARCANE_MISSLE), 0, 	"Attack: Deal 1 Damage to a random enemy.");</Command>

<Command>	SpellSetup("Intimidating Presence", 1, SPELL_INTIMIDATE, 		"Stun an enemy adjacent to your Commander.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Ground Stomp", 			2, SPELL_GROUND_STOMP, 		"Deal 1 Damage to units adjacent to your Commander.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Boots Treasure", 		2, SPELL_BOOTS_TREASURE, 	"Give your minions Pathfinder.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Weapons Treasure", 		4, SPELL_WEAPONS_TREASURE, 	"Give your minions +2 Attack.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Shields Treasure", 		6, SPELL_SHIELDS_TREASURE, 	"Give your minions +3 Health.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Pistol Shot", 			1, SPELL_PISTOL_SHOT, 		"Kill a minion. Put Reload on top of your deck.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Reload", 				5, SPELL_RELOAD, 			"Draw a card.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Mirror Reflection",		3, SPELL_MIRROR_REFLECTION,	"Duplicate a minion on the symmetrical opposite tile.", SPELL_TYPE_DEFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Blazeball", 			4, SPELL_PYROBALL, 			"Deal 6 Damage. Can only target Commanders if you have bonus Spell Damage.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Frost Breath", 			3, SPELL_FROST_BREATH, 		"Stun all enemy minions. Deal 3 Damage to those already Stunned.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Poison Cloud", 			5, SPELL_POISON_CLOUD, 		"Give all enemy minions Decay. Deal 5 Damage to those that already have Decay.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Nature Has Had Enough", 10, SPELL_NATURE_ANGRY, 	"Heal allies and give enemies Decay.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Descend From Treetops",	10, SPELL_ELVEN_APOCALYPSE,	"Fill your hand with random elves. They are Fleeting and cost 0.", SPELL_TYPE_OTHER, 0, true);</Command>

<Command>	SpellSetup("Kraken Gives You A Hug",8, SPELL_KRAKEN_HUG,	"Opponent draws 8 cards for each unit they control.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	//SpellSetup("High Pressure",			2, SPELL_WATER_PRESSURE,"Set a minion's Attack and Health to 1.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	//SpellSetup("Nickonhawk's Portal", 3, SPELL_NICKS_PORTAL, "Summon a random minion on a random tile.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Oxygen Tank",			5, SPELL_OXYGEN_TANK,	"Shuffle this in your deck.", SPELL_TYPE_OTHER, 0, true);</Command>

<Command>	CardSetup("Bondi",					1, "Mercenary",				5, 4, 2, 1, 0, true);</Command>
<Command>	CardEvents("Bondi", 0, 0,								"Play: Pay 2 Mana next turn.");</Command>
<Command>	CardSetup("Golem",					6, "Arcane Golem",			7, 9, 2, 1, 0, true);</Command>
<Command>	CardEvents("Golem", 0, 0, 								"Ignore odd damage.");</Command>
<Command>	CardSetup("Hero Chinese Immortal",	7, "Elven Champion",		5, 9, 2, 1, Keyword(GUARD) + Keyword(WARD), true);</Command>
<Command>	CardEvents("Hero Chinese Immortal", 0, 0, 				"I have +1 Range during opponent's turn.");</Command>
<Command>	CardSetup("Griffon",				4, "Soaring Griffy",		3, 6, 2, 1, Keyword(AIRDROP) + Keyword(CHARGE), true);</Command>
<Command>	CardSetup("Apep",					4, "Lurking Crocky",		4, 3, 2, 1, Keyword(AMBUSH) + Keyword(STEALTH), true);</Command>
<Command>	CardSetup("Bear",					6, "Hungry Bear",			7, 7, 2, 1, 0, true);</Command>
<Command>	CardEvents("Bear", Keyword(ATTACK_OVERKILL_HEALS), 0, 	"Whenever I kill an enemy I gain +2 Health.");</Command>
<Command>	CardSetup("Pirate Ship",			10, "Stuck Pirate Ship",			0, 40, 0, 0, 0, true);</Command>
<Command>	CardEvents("Pirate Ship", 0, 0, 						"Turn Start: Secretly choose an enemy tile, next turn deal 8 Damage there.");</Command>

<Command>	CardSetup("Audrey Water",			2, "Vora Sapling",			2, 5, 0, 1, Keyword(AIRDROP) + Keyword(DEADLY), true);</Command>
<Command>	CardSetup("Monument",				2, "Floating Housekeeper",	0, 5, 5, 0, 0, true);</Command>
<Command>	CardEvents("Monument", 0, 0, 		"Turn Start: Deal 1 Damage to damaged minions.");</Command>
<Command>	CardSetup("Monument 2",				4, "Floating Butler",		0, 10, 5, 0, 0, true);</Command>
<Command>	CardEvents("Monument 2", 0, 0, 		"Turn Start: Restore 5 health to my Commander.");</Command>
<Command>	CardSetup("Monument 3",				6, "Floating Steward",		0, 15, 5, 0, 0, true);</Command>
<Command>	CardEvents("Monument 3", 0, 0, 		"Turn Start: Opponent discards a random card.");</Command>
<Command>	CardSetup("Monument 4",				8, "Floating Twins",		0, 20, 5, 0, 0, true);</Command>
<Command>	CardEvents("Monument 4", 0, 0, 		"Turn Start: Summon a random Arcane minion and play a random Arcane spell.");</Command>
<Command>	CardSetup("Monument 5",				10, "Floating Majordomo",	0, 25, 5, 0, 0, true);</Command>
<Command>	CardEvents("Monument 5", 0, 0, 		"I have the effects of Floating Housekeeper, Butler, Steward and Twins.");</Command>

<Command>	SpellSetup("Chaos",					4, SPELL_TAVERN_BRAWL,		"Every unit attacks another one at random, regardless of distance.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Dominance",				3, SPELL_DOMINANCE,			"Your Commander gains +1 attack and then attacks an enemy.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	SpellSetup("Infestation",			2, SPELL_SPIDER_LAIR,		"Add 3 Festering Eggs to your hand. They cost 0 and have Airdrop.", SPELL_TYPE_OTHER, 0, true);</Command>

<Command>	CardSetup("Tartarian Gate",			4, "Mouth of Chaos",		0, 8, 0, 0, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Tartarian Gate", 0, 0,	"At the start of your turn, draw a card and set its cost to 0.");</Command>

<Command>	CardSetup("Invisible Target",		0, "Destination",			0, 999, 0, 0, Keyword(WARD) + Keyword(REGENERATE) + Keyword(STEALTH), true);</Command>
<Command>	CardSetup("Cinematic Block",		0, "Indestructable",		0, 999, 0, 0, Keyword(WARD) + Keyword(REGENERATE) + Keyword(STEALTH), true);</Command>

<Command>	CardSetup("Theris",					2, "Infernal Jester",		3, 2, 2, 1, 0, true);</Command>
<Command>	CardEvents("Theris", 0, Keyword(DEATH_REDUCE_COST), "Play: Draw a card. Death: Reduce the cost of cards in your hand by 1.");</Command>

<Command>	CardSetup("Bireme",					4, "Cloud Sail",			2, 6, 2, 2, Keyword(BEACON) + Keyword(ETHEREAL), true);</Command>
<Command>	CardEvents("Bireme", 0, 0, "Turn Start: Gain 1 mana.");</Command>

<Command>	CardSetup("Javelin Cavalry",		3, "Profit Hunter",			3, 2, 3, 2, Keyword(CHARGE), true);</Command>
<Command>	CardEvents("Javelin Cavalry", Keyword(ATTACK_SING), 0, "Attack: Give your Commander another action if he has already acted.");</Command>

<Command>	CardSetup("Chieroballista",			4, "Gatling Gun",			3, 4, 2, 2, Keyword(FURIOUS), true);</Command>
<Command>	CardSetup("Crossbowman",			2, "Security Sniper",		1, 3, 2, 3, Keyword(AIRDROP) + Keyword(LIGHTNING), true);</Command>

<Command>	CardSetup("Female",					2, "Princess Arsch",		1, 2, 2, 1, Keyword(WARD), true);</Command>
<Command>	CardEvents("Female", 0, Keyword(DEATH_DAMAGE_ENEMY), "Play: Give your Commander +2 health. Death: Deal 2 damage to the enemy Commander.");</Command>

<Command>	CardSetup("Eitri",					3, "Mad Scientist",			2, 1, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardEvents("Eitri", 0, 0, "Turn Start: Fill your hand with Scrap Metal.");</Command>

<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_01");</Command>
<Command>}</Command>

<Command>rule initializeCards_01</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	//Pick a card. Any card.</Command>
<Command>	CardSetup("Statue of Lightning",	0, "Spell",				0, 1, 0, 0, 0, true);</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Hero Greek Jason",		0, "phdorogers4", 		2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Lancer Hero",			0, "Venlesh", 			2, 20, 3, 1, Keyword(BEACON) + Keyword(ETHEREAL), true);</Command>

<Command>	// 0 - 4</Command>
<Command>	CardSetup("Swordsman", 				1, "New Recruit", 		1, 3, 2, 1, Keyword(ETHEREAL));</Command>
<Command>	CardSetup("Khopesh", 				2, "Thief", 			1, 2, 2, 1); // Attack: Draw 1 card.</Command>
<Command><![CDATA[	CardSetup("Skraeling", 				3, "Bear Hunter", 		3, 1, 2, 1); // Play: Summon a 1|1 Loyal Wolf with Guard.]]></Command>
<Command>	CardSetup("Toxotes", 				2, "Sharpshooter",	 	2, 2, 2, 2);</Command>
<Command>	SpellSetup("Guardian of the Woods",	2, SPELL_GUARDIAN_OF_SEA,	"Grant your Commander Armored and Guard until the start of your next turn.", SPELL_TYPE_OTHER);</Command>
<Command>	// 5 - 9</Command>
<Command>	CardSetup("Peltast", 				3, "Forest Ranger", 	2, 1, 2, 2, Keyword(ETHEREAL)); // Play: Deal 1 damage.</Command>
<Command>	CardSetup("Mountain Giant",	 		5, "Big Friendly Giant",6, 7, 1, 1);</Command>
<Command>	CardSetup("Physician",				3, "Bard", 				0, 3, 2, 1, Keyword(HEALER));</Command>
<Command>	CardSetup("Hero Greek Ajax", 		4, "Party Leader", 		3, 3, 2, 1); // Play: Summon a random 1-cost minion from your deck.</Command>
<Command>	CardSetup("Raiding Cavalry",		3, "Reckless Rider", 	3, 2, 3, 1, Keyword(AMBUSH));</Command>
<Command>	// 10 - 14 (LEGENDARY at 14)</Command>
<Command>	CardSetup("Trident Soldier",		4, "Shieldbearer", 		2, 6, 1, 1, Keyword(GUARD));</Command>
<Command>	CardSetup("Jarl", 					4, "Wanderer", 			1, 3, 3, 1, Keyword(DEADLY) + Keyword(ARMORED));</Command>
<Command><![CDATA[	CardSetup("Huskarl",			 	5, "Seasoned Veteran", 	2, 3, 2, 1); // Play: Grant adjacent allied minions +1|+1]]></Command>
<Command>	CardSetup("Hero Greek Theseus", 	4, "Elven Moonblade", 	4, 6, 2, 1); // Minions I kill don't trigger their Death effect.</Command>
<Command>	CardSetup("Hero Greek Hippolyta", 	7, "Queen of Elves",	3, 5, 2, 2, Keyword(FURIOUS) + Keyword(CHARGE));</Command>
<Command>	// 15 - 19</Command>
<Command>	CardSetup("Wolf",					1, "Loyal Wolf",		1, 1, 2, 1, Keyword(GUARD));</Command>
<Command>	CardSetup("Avenger", 				6, "Doubleblade", 		5, 5, 2, 1, Keyword(AIRDROP));</Command>
<Command>	SpellSetup("Windsong", 				2, SPELL_SING, 			"Select an ally that has already acted. Grant it another action.", SPELL_TYPE_DEFENSIVE);</Command>
<Command><![CDATA[	CardSetup("Villager Atlantean",		2, "Traveling Chef",	1, 2, 2, 1); // Play: Grant an allied minion +1|+1]]></Command>
<Command>	SpellSetup("Backstab", 				1, SPELL_BACKSTAB, 		"Deal 2 damage to an enemy next to another enemy.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	// 20 - 24</Command>
<Command>	SpellSetup("Duel", 					2, SPELL_DUEL, 			"An allied minion and an enemy minion attack each other, regardless of distance.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Party Up!", 			3, SPELL_PARTY_UP, 		"Draw 3 cards that cost 1 Mana.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Cheers", 				1, SPELL_TEAMWORK, 		"Give an allied minion +1 attack and activate its Play effect.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Defender's Glory", 		3, SPELL_DEFENDER, 		"Grant an allied minion +2 health and Guard.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Song of Victory", 		3, SPELL_VICTORY, 		"Grant all allied minions +1 attack and Ambush this turn.", SPELL_TYPE_OTHER);</Command>
<Command>	// 25 - 29 (LEGENDARY at 29)</Command>
<Command>	SpellSetup("Whirlwind", 			6, SPELL_WHIRLWIND, 	"A minion attacks all adjacent enemies.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	CardSetup("Ornlu",					4, "Pack Hunter",		4, 3, 3, 1, Keyword(ETHEREAL)); // Attack: Create a Pack Hunter.</Command>
<Command>	CardSetup("Hetairoi",				3, "Elven Guide",		2, 3, 3, 1); // Play: Create an Explorer's Map.</Command>
<Command>	SpellSetup("First-Aid", 			1, SPELL_FIRST_AID, 	"Teleport an allied minion next to your Commander and restore 2 health to it.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	CardSetup("Nemean Lion",			8, "Guild Master",		6, 6, 2, 1); // Play: Stun all enemy minions that cost {Manaflow} or less.</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_02");</Command>
<Command>}</Command>

<Command>rule initializeCards_02</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Oracle Hero",			0, "Nanodude", 			1, 20, 2, 2, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Minotaur",				0, "nottud", 			2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Fire Giant",				5, "Blaze Elemental",	4, 6, 2, 2, Keyword(FURIOUS), true);</Command>
<Command>	CardSetup("Frost Giant",			5, "Frost Elemental",	3, 6, 2, 1, 0, true); // stuns its targets.</Command>
<Command>	CardSetup("Phoenix Egg",			5, "Reviving Egg",		0, 3, 0, 0, 0, true); // At the start of your turn, destroy me and summon a Fading Lightwing on my tile.</Command>

<Command>	// 30-34</Command>
<Command>	CardSetup("Slinger", 				2, "Apprentice", 		1, 1, 2, 2);</Command>
<Command>	CardSetup("Maceman", 				2, "School Guard",		2, 3, 2, 1, Keyword(GUARD));</Command>
<Command>	SpellSetup("Arcane Explosion",		3, SPELL_EXPLOSION,		"Deal 1 damage to enemies within 1 space of the target location.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Javelin Cavalry Hero",	3, "Magic Messenger",	1, 1, 3, 2, Keyword(BEACON) + Keyword(WARD));</Command>
<Command>	SpellSetup("Doubleblast",			4, SPELL_DOUBLEBLAST,	"Deal 1 damage to two enemies. Draw a card.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	// 35-39</Command>
<Command>	SpellSetup("Spark", 				1, SPELL_SPARK, 		"Deal 1 damage.",SPELL_TYPE_OFFENSIVE);</Command>
<Command>	SpellSetup("Class Time",			3, SPELL_CLASS_TIME,	"Draw a spell and a minion.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Spellsnipe",			3, SPELL_SNIPE,			"An ally attacks an enemy within range. Add their range to the damage dealt.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Oracle Scout",			3, "Tower Researcher",	0, 2, 1, 0); // Your spells deal +1 damage.</Command>
<Command>	CardSetup("Priest",					4, "Magic Teacher",		1, 3, 2, 2, Keyword(HEALER)); // Your spells cost 1 less.</Command>
<Command>	// 40-44 (LEGENDARY at 44)</Command>
<Command>	CardSetup("Swordsman Hero",			3, "Spellsword",		1, 3, 2, 1); // After you cast a spell, grant me +1 attack.</Command>
<Command><![CDATA[	SpellSetup("Rune of Flame",			5, SPELL_RUNE_OF_FLAME,	"Deal 6 damage to your Commander to summon a 4|6 Blaze Elemental with Furious.", SPELL_TYPE_OTHER);]]></Command>
<Command><![CDATA[	SpellSetup("Rune of Ice",			5, SPELL_RUNE_OF_ICE,	"Stun your Commander to summon a 3|6 Frost Elemental that stuns its target.", SPELL_TYPE_OTHER);]]></Command>
<Command>	SpellSetup("Electrosurge",			6, SPELL_ELECTROSURGE,	"Deal 2 damage with Lightning.", SPELL_TYPE_OFFENSIVE, Keyword(LIGHTNING));</Command>
<Command>	CardSetup("Hero Greek Bellerophon",	10, "Royal Executioner",6, 4, 3, 1, Keyword(AIRDROP) + Keyword(AMBUSH) + Keyword(WARD));</Command>
<Command>	// 45-49</Command>
<Command>	SpellSetup("Fire and Ice",			15, SPELL_FIRE_AND_ICE,	"Summon a Blaze Elemental and a Frost Elemental.", SPELL_TYPE_OTHER, Keyword(OVERFLOW));</Command>
<Command>	CardSetup("Phoenix From Egg",		5, "Fading Lightwing",	4, 3, 2, 1, Keyword(FLYING) + Keyword(DECAY));</Command>
<Command>	CardSetup("Prisoner",				2, "Magic Test Subject",2, 2, 2, 1); // Death: Create a random Arcane spell.</Command>
<Command>	CardSetup("Chimera",				7, "Escaped Amalgam",	3, 7, 2, 1, Keyword(WARD)); // Attack: Create a random Arcane spell.</Command>
<Command>	CardSetup("Petsuchos", 				6, "Bejeweled Sunlisk",	0, 4, 1, 3); // I have 3 range. Each time you cast a spell, grant me +2 attack.</Command>
<Command>	// 50-54</Command>
<Command>	SpellSetup("Book of Reflections",	5, SPELL_COPY_HOMEWORK, "Create three random cards from your opponent's classes.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Meteor",				4, SPELL_METEOR, 		"Mark a tile. At the start of your next turn, deal 6 damage to it and 2 to adjacent tiles.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Trident Soldier Hero",	5, "Throne Shield",		2, 7, 1, 1); // Your Commander has Guard. When they take damage, I take it instead.</Command>
<Command>	CardSetup("Valkyrie",				3, "Battle Maiden",		3, 3, 3, 1); // Play: Restore 3 health to an ally.</Command>
<Command>	CardSetup("Centaur",				3, "Book Courier",		2, 3, 3, 2); // Play: Draw a card. Death: Your opponent draws a card.</Command>
<Command>	// 55-59 (LEGENDARY at 59)</Command>
<Command>	SpellSetup("Final Exam",			2, SPELL_FINAL_EXAM,	"Both players draw two cards.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Sphinx",					6, "Professor of Shapeshifting",		3, 3, 2, 1); // Play: Transform a minion into a copy of another one.</Command>
<Command>	SpellSetup("Apocalypse",			10, SPELL_APOCALYPSE,	"Fill your hand with Meteors. They are Fleeting and cost 0.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Mirror Image",			2, SPELL_MIRROR_IMAGE,	"Add a copy of a minion to your hand and deck. If your Commander is nottud, add another copy to your deck.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	CardSetup("Hero Greek Chiron",		6, "The Librarian",		3, 6, 3, 2); // At the start of your turn, both players draw a card.</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_03");</Command>
<Command>}</Command>

<Command>rule initializeCards_03</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Royal Guard Hero",		0, "Out Reach", 		2, 20, 2, 1, Keyword(BEACON), true); // Your Mana spent on spells will still count as Manaflow next turn.</Command>
<Command>	CardSetup("Archer Atlantean Hero",	0, "scragins", 			1, 20, 2, 3, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Servant",				6, "Tide Elemental",	2, 6, 2, 1, Keyword(ETHEREAL), true); // Attack: Push my target away from me.</Command>

<Command>	// 60-64</Command>
<Command>	CardSetup("Hypaspist",				1, "Undercity Soldier",		1, 2, 2, 1); // Play: Grant your Commander +1 attack this turn.</Command>
<Command>	CardSetup("Myrmidon",				2, "Undercity Elite",		3, 1, 2, 1); // Play: I gain {Manaflow} health this turn.</Command>
<Command>	SpellSetup("Sea's Embrace",			1, SPELL_SEA_EMBRACE,		"Restore 3 health to an allied minion and your Commander.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	CardSetup("Hippocampus",			3, "Fish Bait",				0, 2, 2, 0, Keyword(BEACON)); // Play: Draw your most expensive minion.</Command>
<Command>	CardSetup("Wadjet",					3, "Venom Pet",				1, 1, 1, 2, Keyword(DEADLY));</Command>
<Command>	// 65-69</Command>
<Command>	CardSetup("Medusa",					4, "Naga Archer",			2, 3, 2, 2); // Play: Stun an enemy minion.</Command>
<Command>	CardSetup("Cyclops",				5, "Undercity Protector",	3, 5, 1, 1, Keyword(GUARD) + Keyword(OVERFLOW));</Command>
<Command>	CardSetup("Lampades",				6, "Naga Sea Witch",		2, 2, 2, 2); // Play: Convert an enemy that costs {Manaflow} or less.</Command>
<Command>	CardSetup("Behemoth",				5, "Mana Muncher",			1, 1, 1, 1); // Play: I gain {Manaflow} attack and health.</Command>
<Command>	CardSetup("Nereid",					4, "Naga Sea Hunter",		4, 1, 2, 1, Keyword(CHARGE) + Keyword(AMBUSH));</Command>
<Command>	// 70-74 (LEGENDARY at 74)</Command>
<Command><![CDATA[	SpellSetup("Rune of Water",			5, SPELL_RUNE_OF_WATER,		"Restore 6 health to the enemy Commander to summon a 2|6 Tide Elemental that pushes its targets.", SPELL_TYPE_OTHER);]]></Command>
<Command>	CardSetup("Hydra",					6, "Depth Strider",			4, 6, 1, 1, Keyword(REGENERATE) + Keyword(OVERFLOW));</Command>
<Command>	SpellSetup("Water Cannon",			5, SPELL_WATER_CANNON,		"Push an enemy in any direction.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Sea Turtle",				6, "Ancient Watcher",		4, 5, 1, 1, Keyword(GUARD) + Keyword(ARMORED));</Command>
<Command>	CardSetup("Heka Gigantes",			10, "King of the Depths",	6, 7, 2, 1, Keyword(BEACON)); // All your minions have Overflow.</Command>
<Command>	// 75-79</Command>
<Command>	CardSetup("Hippikon",				4, "Undercity Captain",		2, 3, 3, 1); // Play: Give your Commander another action if they have already acted.</Command>
<Command>	CardSetup("Kraken",					5, "Kraken",				1, 5, 2, 1, Keyword(REGENERATE)); // Attack: Return my target to its owner's hand.</Command>
<Command>	CardSetup("Jormund Elver",			2, "Mana Spitter",			1, 3, 2, 2); // Attack: Gain 1 {Manaflow} this turn.</Command>
<Command>	SpellSetup("Tidal Wave",			4, SPELL_TIDAL_WAVE,		"Stun all minions that have {Manaflow} or less health.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Flush",					2, SPELL_FLUSH,				"Push all adjacent minions away from your Commander.", SPELL_TYPE_OTHER);</Command>
<Command>	// 80-84</Command>
<Command>	SpellSetup("Deep Dive",				2, SPELL_DEEP_DIVE,			"Draw {Manaflow / 2} cards.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Archer Atlantean",		3, "Undercity Sniper",		1, 3, 2, 2); // Whenever your Commander attacks an enemy, I attack it too.</Command>
<Command>	SpellSetup("Teletide",				1, SPELL_TELETIDE,			"Teleport an allied minion to any available tile.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Man O War",				6, "Lightning Jellyfish",	3, 4, 2, 2, Keyword(LIGHTNING));</Command>
<Command>	SpellSetup("Wrath of the Sea",		12, SPELL_WRATH_OF_SEA,		"Double your Commander's attack this turn.", SPELL_TYPE_OTHER, Keyword(OVERFLOW));</Command>
<Command>	// 85-89 (LEGENDARY at 89)</Command>
<Command>	CardSetup("Leviathan",				9, "Ship Eater",			8, 8, 2, 1, Keyword(GUARD));</Command>
<Command>	SpellSetup("Cleansing Waters",		1, SPELL_CLEANSING_WATERS,	"Choose a tile. Give it and adjacent tiles Ward.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Drown",					7, SPELL_DROWN,		 		"Shuffle a minion into your deck.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Scylla",					7, "Hungry Serpent",		4, 8, 2, 1, Keyword(FURIOUS));</Command>
<Command>	CardSetup("Hero Greek Polyphemus",	6, "Undercity Champion",	4, 5, 1, 1); // Your Commander has Furious.</Command>

<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_04");</Command>
<Command>}</Command>

<Command>rule initializeCards_04</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Arkantos God",			0, "Roxas", 				2, 1, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Pharaoh of Osiris",		0, "Yeebaagooon", 			0, 20, 2, 2, Keyword(BEACON) + Keyword(LIGHTNING), true);</Command>
<Command>	SpellSetup("Scrap Metal",			0, SPELL_SCRAP_METAL,		"Gain 1 mana this turn.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	CardSetup("Outpost",				0, "Lightning Rod",			0, 3, 0, 0, Keyword(CONDUCTOR) + Keyword(AIRDROP), true);</Command>
<Command>	CardSetup("Guild",					4, "Gear Factory",			0, 6, 0, 0, 0, true); // At the end of your turn, deal 2 damage to me and add a Gearwalker to your hand.</Command>
<Command>	CardSetup("Wall Connector",			0, "Iron Wall",				0, 3, 0, 0, Keyword(AIRDROP) + Keyword(FLEETING), true);</Command>

<Command>	// 90-94</Command>
<Command>	SpellSetup("Repair",		 		3, SPELL_SONG_OF_REST,		"Restore 6 health to your Commander. Draw a card.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Fortify",		 		3, SPELL_FORTIFY,			"Fill your hand with Iron Walls.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Dwarf",					1, "Iron Scavenger",		1, 1, 2, 1); // Death: Add a Scrap Metal to your hand.</Command>
<Command>	CardSetup("Portable Ram",			2, "Circuit Squad",			1, 3, 2, 1, Keyword(ARMORED) + Keyword(CONDUCTOR));</Command>
<Command>	CardSetup("Petrobolos",				3, "Scrap Launcher",		1, 2, 1, 3); // Attack: Stun my target.</Command>
<Command>	// 95-99</Command>
<Command>	CardSetup("Maceman Hero",			3, "Shock Trooper",			2, 4, 2, 1, Keyword(LIGHTNING));</Command>
<Command>	CardSetup("Automaton SPC",			2, "Gearwalker",			2, 2, 2, 1, Keyword(MAGNETIC));</Command>
<Command>	CardSetup("Onager",					4, "Anything Launcher",		0, 3, 1, 3, Keyword(CHARGE)); // Attack: My adjacent allies attack with me.</Command>
<Command>	CardSetup("Throwing Axeman",		4, "Engineer",				2, 3, 2, 2, Keyword(BEACON)); // Your minions cost 1 less.</Command>
<Command>	CardSetup("Ballista",				4, "Mechanized Bow",		3, 1, 1, 3, Keyword(MAGNETIC));</Command>
<Command>	// 100-104 (LEGENDARY at 104)</Command>
<Command>	CardSetup("Helepolis",				5, "Troop Transport",		2, 5, 1, 1); // Death: Summon a random minion from your deck on my tile.</Command>
<Command>	CardSetup("Colossus",				8, "Steam Giant",			6, 8, 1, 1, Keyword(MAGNETIC) + Keyword(GUARD));</Command>
<Command>	CardSetup("Battle Boar",			5, "Bulldozer",				4, 4, 2, 1, Keyword(MAGNETIC) + Keyword(CHARGE));</Command>
<Command>	CardSetup("Ape of Set",				2, "Robot Monkey",			1, 1, 2, 1, Keyword(MAGNETIC)); // Death: I attack all adjacent units.</Command>
<Command>	CardSetup("Tower Mirror",			10, "Thunder Cannon",		8, 8, 0, 3, Keyword(LIGHTNING));</Command>
<Command>	// 105-109</Command>
<Command>	SpellSetup("Electric Grid",			2, SPELL_ELECTRIC_GRID,		"Add two Lightning Rods to your hand.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Zap Gun",				3, SPELL_ZAP_GUN,			"Give an allied minion Lightning.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	CardSetup("Fire Siphon",			3, "Directional Cannon",	2, 5, 0, 0); // Play: Choose a direction. Turn Start: I fire a laser and attack everything in a line.</Command>
<Command>	SpellSetup("Compress",				3, SPELL_COMPRESS,			"Combine a minion with all of its adjacent allied minions, adding up attack, health, and keywords.", SPELL_TYPE_DEFENSIVE);</Command>
<Command><![CDATA[	SpellSetup("Upgrade",				4, SPELL_UPGRADE,			"Give an allied minion +2|+2 and Magnetic.", SPELL_TYPE_DEFENSIVE);]]></Command>
<Command>	// 110-114</Command>
<Command>	SpellSetup("Profiteering",			2, SPELL_PROFITEERING,		"Give a minion 'Attack: Draw a card.' This effect does not stack", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Warning Shot",			2, SPELL_WARNING_SHOT,		"Deal 1 damage. Draw a card.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	SpellSetup("Portable Spell Shield",	2, SPELL_PORTABLE_SPELL_SHIELD,			"Give an allied minion Armored and Ward.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Rewind",				4, SPELL_REWIND,			"Return an enemy minion to your opponent's hand.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Time Pocket",			6, SPELL_TIME_POCKET,		"Stun all units within 1 space of the target tile.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	// 115-119 (LEGENDARY at 119)</Command>
<Command>	SpellSetup("TEH BANHAMMER",			7, SPELL_BANHAMMER,			"Destroy an enemy minion. If your Commander is Yeebaagooon, also destroy all enemy copies of it.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Assembly Line",			3, SPELL_ASSEMBLY_LINE,		"Shuffle a copy of your hand into your deck. Draw a card.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Gear Factory",			4, SPELL_GEAR_FACTORY,		"Summon a Gear Factory at the target location. It creates a Gearwalker each turn.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Borrowed Time",			20, SPELL_BORROWED_TIME,	"Gain an extra turn.", SPELL_TYPE_OTHER, Keyword(OVERFLOW));</Command>
<Command>	SpellSetup("The Power Suit",		5, SPELL_POWER_SUIT,		"Give your Commander Magnetic.", SPELL_TYPE_OTHER);</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_05");</Command>
<Command>}</Command>

<Command>rule initializeCards_05</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Hoplite",				0, "Zenophobia", 		2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Hero Greek Perseus",		0, "Anraheir", 			2, 20, 2, 1, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Minion",					0, "Zombie",			1, 1, 1, 1, Keyword(CHARGE), true);</Command>
<Command>	CardSetup("Shade of Hades",			4, "Shadow Elemental",	4, 3, 2, 1, Keyword(AMBUSH), true);</Command>
<Command>	CardSetup("Scarab",					5, "Man-Eating Beetle",	5, 5, 1, 1, Keyword(ETHEREAL), true);</Command>
<Command>	CardSetup("Walking Woods Marsh",	3, "Zombie Tree",		2, 4, 2, 1, 0, true);</Command>

<Command>	// 120-124</Command>
<Command>	CardSetup("Spearman",				1, "Cultist",				1, 1, 2, 1); // Death: Summon a Zombie on my tile.</Command>
<Command>	CardSetup("Shade",					2, "Vengeful Spirit",		1, 2, 2, 1, Keyword(GUARD) + Keyword(DEADLY));</Command>
<Command>	CardSetup("Axeman",					2, "Executioner",			3, 1, 2, 1); // Play and Death: Give your Commander +1 attack this turn.</Command>
<Command>	SpellSetup("Soul Siphon",			2, SPELL_SOUL_SIPHON,		"Kill an allied minion to draw 2 cards.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Satyr",					3, "Bone Collector",		1, 4, 2, 2); // Attack: Create a Zombie.</Command>
<Command>	// 125-129</Command>
<Command>	CardSetup("Prodromos",				3, "Pillager",				3, 1, 3, 1); // Death: Draw a card.</Command>
<Command>	CardSetup("Tartarian Gate spawn",	3, "Demon",					2, 2, 2, 1, Keyword(CHARGE)); // Play: Kill an allied minion and grant me its attack and health.</Command>
<Command>	CardSetup("Mummy",					5, "Rot Lord",				3, 5, 2, 2); // Whenever I kill an enemy, summon a Zombie on their tile.</Command>
<Command>	CardSetup("Royal Guard",			4, "Frenzied Worshipper",	2, 2, 2, 1); // Death: Summon a Shadow Elemental on my tile.</Command>
<Command>	CardSetup("Einheriar",				4, "Dark Reaper",			2, 3, 1, 1); // Each time an ally dies, I gain +1 attack and health.</Command>
<Command>	// 130-134 (LEGENDARY at 134)</Command>
<Command>	CardSetup("Dryad",					3, "Plaguewalker",			2, 5, 2, 1); // Death: Give Decay to all adjacent minions.</Command>
<Command>	CardSetup("Theocrat",				3, "Mad Acolyte",			1, 4, 2, 2, Keyword(DECAY)); // At the start of your turn, draw a card and give it Fleeting.</Command>
<Command>	CardSetup("Argus",					5, "Mindflayer",			3, 4, 1, 1); // At the end of your turn, deal 1 damage to all units with Decay.</Command>
<Command>	CardSetup("Pharaoh",				5, "Dark Summoner",			2, 3, 2, 2, Keyword(AIRDROP) + Keyword(BEACON) + Keyword(HEALER));</Command>
<Command>	CardSetup("Guardian",				4, "The Darkness",			7, 7, 2, 1); // Play: Your opponent draws 2 cards. Death: Shuffle a copy of me into your deeck.</Command>
<Command>	// 135-139</Command>
<Command><![CDATA[	CardSetup("Spider Egg",				3, "Festering Egg",			0, 3, 0, 0, Keyword(DECAY)); // Death: Summon a 5|5 Man-Eating Beetle with Pathfinder.]]></Command>
<Command>	SpellSetup("World Splitter",		6, SPELL_WORLD_SPLITTER,	"A minion attacks everything in a line. If your Commander is Zenophobia, this can be cast on him.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Anubite",				1, "Demonling",				3, 2, 2, 1, Keyword(CHARGE));</Command>
<Command>	SpellSetup("Blood Price",			1, SPELL_BLOOD_PRICE,		"Deal 2 damage to an allied minion and an enemy.", SPELL_TYPE_OTHER);</Command>
<Command><![CDATA[	SpellSetup("Death Approaches",		4, SPELL_DEATH_APPROACHES,	"Summon a 4|3 Shadow Elemental with Ambush on a tile next to the enemy Commander.", SPELL_TYPE_OTHER);]]></Command>
<Command>	// 140-144</Command>
<Command>	SpellSetup("Doom",					3, SPELL_DOOM,				"Deal 2 damage to a unit. If it has Decay, add a Doom to your hand.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	SpellSetup("Shadowstep",			1, SPELL_SHADOWSTEP,		"Your Commander swaps spaces with an allied minion.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Final Frenzy",			3, SPELL_FINAL_FRENZY,		"Give a minion Deadly and Decay.", SPELL_TYPE_DEFENSIVE);</Command>
<Command>	SpellSetup("Corpse Party",			3, SPELL_CORPSE_PARTY,		"Summon three Zombies.", SPELL_TYPE_OTHER);</Command>
<Command>	SpellSetup("Undeath",				4, SPELL_UNDEATH,			"Give all allied minions, 'Death: Summon a Zombie on my tile.'", SPELL_TYPE_OTHER);</Command>
<Command>	// 145-149 (LEGENDARY at 149)</Command>
<Command>	CardSetup("Bogsveigir",				2, "Death Messenger",		1, 2, 2, 2); // Attack: If my target is a minion, give it Decay.</Command>
<Command><![CDATA[	SpellSetup("Rune of Darkness",		5, SPELL_RUNE_OF_DARKNESS,	"Kill an allied minion to summon two 4|3 Shadow Elementals with Ambush.", SPELL_TYPE_OTHER);]]></Command>
<Command>	SpellSetup("Zeno's Paradox",		3, SPELL_ZENOS_PARADOX,		"An allied minion and an enemy minion swap spaces.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Manticore",				4, "Face Stealer",			1, 4, 2, 2, Keyword(FURIOUS)); // Attack: If my target is a minion, give it Decay.</Command>
<Command>	CardSetup("Hero Greek Achilles",	8, "Nightrider",			5, 5, 3, 1); // Play: Stun the enemy Commander and give them Decay.</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_06");</Command>
<Command>	//trDelayedRuleActivation("initializeCards_07");</Command>
<Command>}</Command>


<Command>rule initializeCards_06</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	// Created cards</Command>
<Command>	CardSetup("Hero Greek Odysseus",	0, "Nickonhawk, Portal Master",	1, 15, 2, 2, Keyword(BEACON), true);</Command>
<Command>	CardSetup("Caravan Atlantean",		0, "Nickonhawk, God", 			1, 15, 2, 1, Keyword(BEACON) + Keyword(HEALER), true);</Command>
<Command>	CardSetup("Forkboy",				1, "Toy",						1, 1, 2, 1, 0, true);</Command>
<Command>	SpellSetup("Eldritch Ritual", 		5, SPELL_ELDRITCH_RITUAL, 	"Give a minion +5 Attack. If you target an enemy, shuffle an Eldritch Monstrosity in your deck.", SPELL_TYPE_OTHER, 0, true);</Command>
<Command>	CardSetup("Flying Purple Hippo",	5, "Eldritch Monstrosity",	5, 5, 2, 1, Keyword(0) + Keyword(1) + Keyword(2) + Keyword(3) + Keyword(4) + Keyword(5) + Keyword(10) + Keyword(11) + Keyword(20) + Keyword(9) + Keyword(15) + Keyword(21), true);</Command>
<Command>	SpellSetup("Thick Laser", 			4, SPELL_THICK_LASER, 		"Deal 4 Damage to a minion. Shuffle a Grand Laser in your deck.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Grand Laser", 			6, SPELL_GRAND_LASER, 		"Deal 6 Damage to a minion. Shuffle a Omega Laser in your deck.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Omega Laser", 			8, SPELL_OMEGA_LASER, 		"Deal 8 Damage to a minion. Shuffle a Godly Laser in your deck.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	SpellSetup("Godly Laser", 			10, SPELL_GODLY_LASER, 		"Deal 10 Damage to a minion.", SPELL_TYPE_OFFENSIVE, 0, true);</Command>
<Command>	// 150-154</Command>
<Command>	SpellSetup("Petty Laser", 			2, SPELL_PETTY_LASER, 		"Deal 2 Damage to a minion. Shuffle a Thick Laser in your deck.", SPELL_TYPE_OFFENSIVE);</Command>
<Command>	CardSetup("Fishing Ship Egyptian",	2, "3-SPD Scout",			1, 3, 3, 1, Keyword(ETHEREAL)); 					// Play: I take 2 damage.</Command>
<Command>	CardSetup("Fishing Ship Greek",		2, "Beacon Scout",			2, 4, 2, 1, Keyword(ETHEREAL) + Keyword(BEACON)); 	// Play: I take 2 damage.</Command>
<Command>	CardSetup("Fishing Ship Norse",		3, "Battle Interceptor",	3, 5, 2, 1, Keyword(ETHEREAL)); 					// Play: I take 3 damage.</Command>
<Command>	CardSetup("Fishing Ship Atlantean",	3, "Plasma Interceptor",	1, 5, 2, 1, Keyword(ETHEREAL) + Keyword(DEADLY)); 	// Play: I take 3 damage.</Command>
<Command>	// 155-159</Command>
<Command>	CardSetup("Kebenit",				4, "Battle Corvette",		2, 9, 2, 2, Keyword(ETHEREAL)); 					// Play: I take 4 damage.</Command>
<Command>	CardSetup("Trireme",				4, "Nebula Corvette",		3, 5, 2, 2, Keyword(ETHEREAL) + Keyword(STEALTH)); 	// Play: I take 4 damage.</Command>
<Command>	CardSetup("Longboat",				5, "Battle Frigate",		4, 7, 2, 2, Keyword(ETHEREAL)); 					// Play: I take 5 damage.</Command>
<Command>	CardSetup("Fire Ship Atlantean",	5, "Warded Frigate",		6, 6, 2, 2, Keyword(ETHEREAL) + Keyword(WARD)); 	// Play: I take 5 damage.</Command>
<Command>	SpellSetup("Nickonhawk's Portal", 	3, SPELL_NICKS_PORTAL, 		"Summon a random minion on a random tile.", SPELL_TYPE_OTHER);</Command>
<Command>	// 160-164 (LEGENDARY at 164)</Command>
<Command>	CardSetup("Siege Ship Egyptian",	6, "Battle Cruiser",		6, 12, 1, 2, Keyword(ETHEREAL)); 					// Play: I take 6 damage.</Command>
<Command>	CardSetup("Siege Ship Greek",		6, "Shield Cruiser",		3, 11, 1, 2, Keyword(ETHEREAL) + Keyword(GUARD)); 	// Play: I take 6 damage.</Command>
<Command>	CardSetup("Siege Ship Norse",		8, "Battle Dreadnaught",	7, 15, 1, 2, Keyword(ETHEREAL)); 					// Play: I take 8 damage.</Command>
<Command>	CardSetup("Siege Ship Atlantean",	8, "Plasma Dreadnaught",	2, 18, 1, 2, Keyword(ETHEREAL) + Keyword(DEADLY)); 	// Play: I take 8 damage.</Command>
<Command>	CardSetup("Hero Greek Argo",		10, "The Hawk",				5, 10, 2, 2, Keyword(ETHEREAL) + Keyword(ARMORED) + Keyword(CHARGE));	 // Play: I take 10 damage.</Command>
<Command>	// 165-169</Command>
<Command>	CardSetup("Lancer",					3, "Multiverse Knight",		2, 4, 3, 1, Keyword(GUARD) + Keyword(REPEATABLE));</Command>
<Command>	CardSetup("Camelry",				3, "Multiverse Bandit",		3, 1, 3, 1, Keyword(CHARGE) + Keyword(REPEATABLE));</Command>
<Command>	CardSetup("Regent",					4, "Celestial Ambassador",	1, 1, 2, 1, Keyword(IMMUNE));</Command>
<Command>	CardSetup("Santa",					5, "Big Santa Claus",		6, 7, 1, 1, Keyword(HEALER));</Command>
<Command>	SpellSetup("Airlock Vent", 			10, SPELL_SPACE_VENT, 		"Discard your hand, summon and stun any minions discarded.", SPELL_TYPE_OTHER);</Command>
<Command>	// 170-174</Command>
<Command>	SpellSetup("Space Flow", 			0, SPELL_REFRESH_MANA, 		"Refresh up to 5 Mana. For each Mana refreshed discard the top card of your deck.", SPELL_TYPE_OTHER);</Command>
<Command>	CardSetup("Catapult",				20, "CATAPULT OF DOOM",		5, 5, 1, 5, Keyword(AIRDROP) + Keyword(OVERFLOW)); // Play: Deal 5 Damage to ALL adjacent minions</Command>
<Command>	SpellSetup("Eldritch Whispers", 	5, SPELL_ELDRITCH_WHISPERS, "Give a minion +5 Health. If you target an enemy, shuffle an Eldritch Ritual in your deck.", SPELL_TYPE_OTHER);</Command>
<Command><![CDATA[	CardSetup("Villager Atlantean Hero",2, "Multiverse Chef",		1, 1, 2, 1, Keyword(REPEATABLE)); // Play: Grant an allied minion +1|+1]]></Command>
<Command>	CardSetup("Stymphalian Bird",		4, "Mech Bird",				2, 2, 2, 2, Keyword(FLYING) + Keyword(MAGNETIC));</Command>
<Command>	// 175-179 (LEGENDARY at 179)</Command>
<Command>	SpellSetup("Constellation: Libra", 	1, SPELL_CONS_LIBRA, 		"Restore 1 Health to your Commander. Upgrade ALL future Constellations.", SPELL_TYPE_OTHER);</Command>
<Command><![CDATA[	SpellSetup("Constellation: Gemini", 3, SPELL_CONS_GEMINI, 		"Summon a 1|1 copy of a minion. Upgrade ALL future Constellations.", SPELL_TYPE_OTHER);]]></Command>
<Command>	SpellSetup("Constellation: Taurus", 5, SPELL_CONS_TAURUS, 		"Draw 1 card. Upgrade ALL future Constellations.", SPELL_TYPE_OTHER);</Command>
<Command><![CDATA[	SpellSetup("Constellation: Orion", 	7, SPELL_CONS_ORION, 		"Give your minions +1|+1. Upgrade ALL future Constellations.", SPELL_TYPE_OTHER);]]></Command>

<Command>	CardSetup("Hero Greek Heracles",	7, "Multiverse Champion",			5, 6, 2, 1); //Your cards have Echo.</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("initializeCards_07");</Command>

<Command>}</Command>

<Command>rule initializeCards_07</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>	trQuestVarSet("cardsReady", 1);</Command>

<Command>	CardEvents("Hero Greek Jason", Keyword(ATTACK_GET_WINDSONG), 0, 	"Attack: Create a Fleeting Windsong.");</Command>

<Command>	CardEvents("Khopesh", Keyword(ATTACK_DRAW_CARD), 0, 				"Attack: Draw a card.");</Command>
<Command><![CDATA[	CardEvents("Skraeling", 0, 0, 										"Play: Summon a 1|1 Loyal Wolf with Guard.");]]></Command>
<Command>	CardEvents("Avenger", 0, 0, 										"Play: Deal 1 damage to all adjacent enemies.");</Command>
<Command>	CardEvents("Villager Atlantean", 0, 0, 								"Play: Grant an allied minion +1 attack and health.");</Command>
<Command>	CardEvents("Hero Greek Ajax", 0, 0, 								"Play: Summon a random 1-cost minion from your deck.");</Command>
<Command>	CardEvents("Hero Greek Theseus", Keyword(ATTACK_BLOCK_DEATH), 0,	"Minions I kill don't trigger their Death effect.");</Command>
<Command>	CardEvents("Physician", Keyword(ATTACK_SING), 0, 					"When I heal an ally that has acted, grant them another action.");</Command>
<Command>	CardEvents("Hetairoi", 0, 0, 										"Play: Give an allied minion +1 speed and Pathfinder.");</Command>
<Command>	CardEvents("Peltast", 0, 0, 										"Play: Deal 1 damage.");</Command>
<Command>	CardEvents("Huskarl", 0, 0, 										"Play: Grant adjacent allied minions +1 attack and health.");</Command>
<Command>	CardEvents("Nemean Lion", 0, 0, 									"Play: Stun all enemy minions that cost {Manaflow} or less.");</Command>
<Command>	CardEvents("Ornlu", Keyword(ATTACK_GET_FENRIS), 0,					"Attack: Create a Pack Hunter.");</Command>

<Command>	CardEvents("Oracle Hero", Keyword(ATTACK_DISCOUNT), 0, 				"Attack: Reduce the cost of spells in your hand by 1.");</Command>
<Command>	CardEvents("Minotaur", Keyword(ATTACK_YEET), 0,						"After I counterattack, return my target to your opponent's hand.");</Command>

<Command>	CardEvents("Swordsman Hero", 0, 0, 									"After you cast a spell, grant me +1 attack.");</Command>
<Command>	CardEvents("Slinger", 0, 0, 										"Play: Create a Spark.");</Command>
<Command>	CardEvents("Priest", 0, 0,							 				"Your spells cost 1 less.");</Command>
<Command>	CardEvents("Oracle Scout", 0, 0,						 			"Your spells deal +1 damage.");</Command>
<Command>	CardEvents("Frost Giant", Keyword(ATTACK_STUN_TARGET), 0, 			"Attack: Stun my target.");</Command>
<Command>	CardEvents("Phoenix Egg",0, 0, 										"At the start of your turn, destroy me to summon a Fading Lightwing");</Command>
<Command>	CardEvents("Phoenix From Egg", 0, Keyword(DEATH_EGG), 				"Death: Summon a Reviving Egg on my tile.");</Command>
<Command>	CardEvents("Prisoner", 0, Keyword(DEATH_GET_ARCANE),				"Death: Create a random Arcane spell.");</Command>
<Command>	CardEvents("Chimera", Keyword(ATTACK_GET_ARCANE), 0,				"Attack: Create a random Arcane spell.");</Command>
<Command>	CardEvents("Petsuchos", 0, 0,										"After you cast a spell, grant me +2 attack.");</Command>
<Command>	CardEvents("Trident Soldier Hero",0,0,								"Your Commander has Guard. When they take damage, I take it instead");</Command>
<Command>	CardEvents("Valkyrie", 0, 0,										"Play: Restore 3 health to an ally.");</Command>
<Command>	CardEvents("Centaur", 0, Keyword(DEATH_OPPONENT_DRAW_CARD),			"Play: Draw a card. Death: Your opponent draws a card.");</Command>
<Command>	CardEvents("Hero Greek Chiron", 0, 0,								"At the start of your turn, both players draw a card.");</Command>
<Command>	CardEvents("Sphinx", 0, 0,											"Play: Transform a minion into a copy of another one.");</Command>

<Command>	CardEvents("Royal Guard Hero", 0, 0, 								"Your Mana spent on spells will still count as Manaflow next turn.");</Command>
<Command>	// CardEvents("Archer Atlantean Hero", 0, 0, 							"I have 3 range.");</Command>

<Command>	CardEvents("Hypaspist", 0, 0,										"Play: Grant your Commander +1 attack this turn.");</Command>
<Command>	CardEvents("Myrmidon", 0, 0,										"Play: I gain {Manaflow} health.");</Command>
<Command>	CardEvents("Archer Atlantean", 0, 0,								"Whenever your Commander attacks an enemy, I attack it too.");</Command>
<Command>	CardEvents("Hippocampus", 0, 0,										"Play: Draw the most expensive minion from your deck.");</Command>
<Command>	CardEvents("Medusa", 0, 0,											"Play: Stun an enemy minion.");</Command>
<Command>	CardEvents("Lampades", 0, 0,										"Play: Convert an enemy minion that costs {Manaflow} or less.");</Command>
<Command>	CardEvents("Behemoth", 0, 0,										"Play: I gain {Manaflow} attack and health.");</Command>
<Command>	CardEvents("Servant", Keyword(ATTACK_PUSH), 0,						"Attack: Push my target away from me.");</Command>
<Command>	CardEvents("Heka Gigantes", 0, 0,									"All your minions have Overflow.");</Command>
<Command>	CardEvents("Hippikon", 0, 0,										"Play: Give your Commander another action if they have already acted.");</Command>
<Command>	CardEvents("Kraken", Keyword(ATTACK_RETURN), 0,						"Attack: Return my target to its owner's hand.");</Command>
<Command>	CardEvents("Jormund Elver", Keyword(ATTACK_GET_MANAFLOW), 0,		"Attack: Gain 1 Manaflow this turn.");</Command>
<Command>	CardEvents("Hero Greek Polyphemus", 0, 0, 							"Your Commander has Furious.");</Command>

<Command>	CardEvents("Pharaoh of Osiris", 0, 0, 								"After you cast a spell, grant me +1 Attack until the end of the turn.");</Command>
<Command>	CardEvents("Arkantos God", 0, 0,									"I have +1 health for each card in your deck.");</Command>

<Command>	CardEvents("Dwarf", 0, Keyword(DEATH_GET_SCRAP),					"Death: Add a Scrap Metal to your hand.");</Command>
<Command>	CardEvents("Petrobolos", Keyword(ATTACK_STUN_TARGET), 0, 			"Attack: Stun my target.");</Command>
<Command>	CardEvents("Throwing Axeman", 0, 0,									"Your minions cost 1 less.");</Command>
<Command>	CardEvents("Helepolis", 0, Keyword(DEATH_SUMMON_RANDOM),			"Death: Summon a random minion from your deck on my tile.");</Command>
<Command>	CardEvents("Ape of Set", 0, Keyword(DEATH_BOOM_SMALL),				"Death: I attack all adjacent units.");</Command>
<Command>	CardEvents("Guild", 0, 0,											"At the end of your turn, deal 2 damage to me and add a Gearwalker to your hand.");</Command>
<Command>	CardEvents("Fire Siphon", 0, 0,										"Play: Choose a direction. Turn Start: I fire a laser and attack everything in a line.");</Command>
<Command>	CardEvents("Tower Mirror", Keyword(ATTACK_ANIMATE_TOWER), 0,		"");</Command>
<Command>	CardEvents("Onager", Keyword(ATTACK_TEAMWORK), 0,					"Attack: My adjacent allies attack with me. This effect does not stack.");</Command>

<Command>	CardEvents("Hoplite", Keyword(ATTACK_GET_MINION), 0,				"I can attack allies. Whenever I kill a minion, add a copy of it to your hand.");</Command>
<Command>	CardEvents("Hero Greek Perseus", 0, 0, 								"Whenever an ally dies, gain 1 Mana this turn.");</Command>
<Command>	CardEvents("Spearman", 0, Keyword(DEATH_SUMMON_ZOMBIE),				"Death: Summon a Zombie on my tile.");</Command>
<Command>	CardEvents("Axeman", 0, Keyword(DEATH_GET_ATTACK),					"Play and Death: Give your Commander +1 attack this turn.");</Command>
<Command>	CardEvents("Anubite", 0, 0,											"Play: Deal 3 damage to your Commander.");</Command>
<Command>	CardEvents("Satyr", Keyword(ATTACK_GET_ZOMBIE), 0, 					"Attack: Create a Zombie.");</Command>
<Command>	CardEvents("Prodromos", 0, Keyword(DEATH_DRAW_CARD),				"Death: Draw a card.");</Command>
<Command>	CardEvents("Tartarian Gate spawn", 0, 0,							"Play: Kill an allied minion and grant me its attack and health.");</Command>
<Command>	CardEvents("Mummy", Keyword(ATTACK_SUMMON_ZOMBIE), 0, 				"Attack: If my target dies, summon a Zombie on their tile.");</Command>
<Command><![CDATA[	CardEvents("Royal Guard", 0, Keyword(DEATH_SUMMON_SHADOW),			"Death: Summon a 4|3 Shadow Elemental with Ambush on my tile.");]]></Command>
<Command>	CardEvents("Einheriar", 0, 0,	 									"Each time an ally dies, I gain +1 attack and health.");</Command>
<Command>	CardEvents("Dryad", 0, Keyword(DEATH_POISON_MIST),					"Death: Give Decay to all adjacent minions.");</Command>
<Command>	CardEvents("Theocrat", 0, 0,										"At the start of your turn, draw a card and give it Fleeting.");</Command>
<Command>	CardEvents("Argus", 0, 0,											"At the end of your turn, deal 1 damage to all units with Decay.");</Command>
<Command>	CardEvents("Guardian", 0, Keyword(DEATH_DARKNESS_RETURNS),			"Play: Your opponent draws 2 cards. Death: Shuffle a copy of me into your deck.");</Command>
<Command>	CardEvents("Hero Greek Achilles", 0, 0, 							"Play: Stun the enemy Commander and give them Decay.");</Command>
<Command><![CDATA[	CardEvents("Spider Egg", 0, Keyword(DEATH_SUMMON_BEETLE),			"Death: Summon a 5|5 Man-Eating Beetle with Pathfinder.");]]></Command>
<Command>	CardEvents("Bogsveigir", Keyword(ATTACK_POISON), 0,					"Attack: If my target is a minion, give it Decay.");</Command>
<Command>	CardEvents("Manticore", Keyword(ATTACK_POISON), 0,					"Attack: If my target is a minion, give it Decay.");</Command>
<Command>	CardEvents("Walking Woods Marsh", Keyword(ATTACK_SUMMON_TREE), 0,	"Attack: If my target dies, summon a Zombie Tree on their tile.");</Command>

<Command>	CardEvents("Hero Greek Odysseus", Keyword(ATTACK_NICKONHAWK), 0, 	"Attack: Summon and pay for the most expensive minion from your deck that you can afford.");</Command>
<Command>	CardEvents("Caravan Atlantean", 0, 0, 								"Your healing effects summon a Toy with attack and health equal to the amount healed.");</Command>
<Command>	CardEvents("Fishing Ship Egyptian", 0, 0, 							"Play: I take 2 damage. ");</Command>
<Command>	CardEvents("Fishing Ship Greek", 0, 0, 								"Play: I take 2 damage. ");</Command>
<Command>	CardEvents("Fishing Ship Norse", 0, 0, 								"Play: I take 3 damage. ");</Command>
<Command>	CardEvents("Fishing Ship Atlantean", 0, 0, 							"Play: I take 3 damage. ");</Command>
<Command>	CardEvents("Kebenit", 0, 0, 										"Play: I take 4 damage. ");</Command>
<Command>	CardEvents("Trireme", 0, 0, 										"Play: I take 4 damage. ");</Command>
<Command>	CardEvents("Longboat", 0, 0, 										"Play: I take 5 damage. ");</Command>
<Command>	CardEvents("Fire Ship Atlantean", 0, 0, 							"Play: I take 5 damage. ");</Command>
<Command>	CardEvents("Siege Ship Egyptian", 0, 0, 							"Play: I take 6 damage. ");</Command>
<Command>	CardEvents("Siege Ship Greek", 0, 0, 								"Play: I take 6 damage. ");</Command>
<Command>	CardEvents("Siege Ship Norse", 0, 0, 								"Play: I take 8 damage. ");</Command>
<Command>	CardEvents("Siege Ship Atlantean", 0, 0, 							"Play: I take 8 damage. ");</Command>
<Command>	CardEvents("Hero Greek Argo", 0, 0, 								"Play: I take 10 damage. ");</Command>
<Command>	CardEvents("Hero Greek Heracles", 0, 0, 							"Your cards have Echo.");</Command>
<Command>	CardEvents("Villager Atlantean Hero", 0, 0, 						"Play: Grant an allied minion +1 attack and health.");</Command>
<Command>	CardEvents("Catapult", 0, 0, 										"Play: Deal 5 Damage to ALL adjacent minions.");</Command>

<Command>	xsDisableSelf();</Command>
<Command>}</Command>
<Command>const int TERRAIN_GRASSLAND = 0;</Command>
<Command>const int TERRAIN_DESERT = 1;</Command>
<Command>const int TERRAIN_SNOW = 2;</Command>
<Command>const int TERRAIN_TOWER = 3;</Command>
<Command>const int TERRAIN_CAVE = 4;</Command>
<Command>const int TERRAIN_MARSH = 5;</Command>
<Command>const int TERRAIN_HEAVEN = 6;</Command>
<Command>const int TERRAIN_SCRAPYARD = 7;</Command>
<Command>const int TERRAIN_ATLANTIS = 8;</Command>

<Command>const int T_GRASS_25 = 2;</Command>
<Command>const int T_GRASS_50 = 3;</Command>
<Command>const int T_GRASS_75 = 4;</Command>
<Command>const int T_GREEK_ROAD = 65;</Command>
<Command>const int T_GREEK_CLIFF_B = 5;</Command>
<Command>const int T_FOREST_PINE = 87;</Command>

<Command>const int T_SAND_D = 37;</Command>
<Command>const int T_EGYPTIAN_ROAD = 64;</Command>
<Command>const int T_FOREST_PALM = 86;</Command>

<Command>const int T_SNOW_A = 41;</Command>
<Command>const int T_NORSE_ROAD = 66;</Command>
<Command>const int T_FOREST_SNOW = 88;</Command>

<Command>const int T_CITY_TILE = 70;</Command>

<Command>const int T_FOREST_JUNGLE = 95;</Command>
<Command>const int T_FOREST_MARSH = 94;</Command>
<Command>const int T_MARSH_A = 58;</Command>
<Command>const int T_CLIFF_JUNGLE_B = 24;</Command>

<Command>const int T_HADES_BUILDABLE = 84;</Command>
<Command>const int T_HADES_FOREST = 92;</Command>

<Command>const int T_OLYMPUS_A = 50;</Command>
<Command>const int T_OLYMPUS_TILE = 53;</Command>

<Command>const int T_BLUE_TILE = 73;</Command>

<Command>const int TILE_EMPTY = 0;</Command>
<Command>const int TILE_IMPASSABLE = 1;</Command>
<Command>const int TILE_OCCUPIED = 2;</Command>

<Command>int deployAtTile(int p = 0, string proto = "", int tile = 0) {</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber();</Command>
<Command>	trArmyDispatch("1,10","Dwarf",1,119,0,1,0,true);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+next, true);</Command>
<Command>	trUnitConvert(0);</Command>
<Command>	trImmediateUnitGarrison(""+tile);</Command>
<Command>	trUnitConvert(p);</Command>
<Command>	trUnitChangeProtoUnit(proto);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>	trUnitSelectClear();</Command>

<Command>	return(next);</Command>
<Command>}</Command>

<Command>void tileGuard(int tile = 0, bool on = true) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=zGetVarByIndex("tiles", "borderCount", tile) - 1; >=0) {</Command>
<Command>		trUnitSelectByID(1*zGetVarByIndex("tiles", "border"+x, tile));</Command>
<Command>	}</Command>
<Command>	if (on) {</Command>
<Command>		trSetSelectedScale(3.1, 0.1, 0.6);</Command>
<Command>	} else {</Command>
<Command>		trSetSelectedScale(3.1, 0.1, 0.2);</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>int findNearestTile(string v = "") {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command><![CDATA[		if (trDistanceToVectorSquared("tiles", v) < 9) {]]></Command>
<Command>			return(1*trQuestVarGet("tiles"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>void findAvailableTiles(int id = 0, int distance = 1, string db = "", bool ghost = false) {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command>		zSetVar("tiles", "searched", 0);</Command>
<Command>	}</Command>
<Command>	int push = 0;</Command>
<Command>	int pop = -1;</Command>
<Command>	int tile = 0;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	int occupant = 0;</Command>
<Command>	trQuestVarSet("search"+push+"tile", id);</Command>
<Command>	trQuestVarSet("search"+push+"distance", distance);</Command>
<Command><![CDATA[	while (pop < push) {]]></Command>
<Command>		pop = pop + 1;</Command>
<Command>		tile = trQuestVarGet("search"+pop+"tile");</Command>
<Command>		// Add it to the db if it is not occupied</Command>
<Command>		if (zGetVarByIndex("tiles", "occupant", tile) == 0) {</Command>
<Command>			yAddToDatabase(db, "search"+pop+"tile");</Command>
<Command>		}</Command>
<Command>		// Search neighbors</Command>
<Command>		if (trQuestVarGet("search"+pop+"distance") > 0) {</Command>
<Command><![CDATA[			for (x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>				neighbor = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command><![CDATA[				if ((zGetVarByIndex("tiles", "searched", neighbor) == 0) && neighbor < trQuestVarGet("ztilesend")) {]]></Command>
<Command>					zSetVarByIndex("tiles", "searched", neighbor, 1);</Command>
<Command>					// Add to fringe if it can be moved through.</Command>
<Command>					if(1*zGetVarByIndex("tiles", "terrain", neighbor) != TILE_OCCUPIED){</Command>
<Command><![CDATA[						if ((zGetVarByIndex("tiles", "occupant", neighbor) + zGetVarByIndex("tiles", "terrain", neighbor) == 0) || ghost) {]]></Command>
<Command>							push = push + 1;</Command>
<Command>							trQuestVarSet("search"+push+"tile", neighbor);</Command>
<Command>							trQuestVarSet("search"+push+"distance", trQuestVarGet("search"+pop+"distance") - 1);</Command>
<Command><![CDATA[						} else if (zGetVarByIndex("tiles", "occupant", neighbor) > 0 && zGetVarByIndex("tiles", "terrain", neighbor) == TILE_EMPTY) {]]></Command>
<Command>							// we can move through flying units</Command>
<Command>							occupant = zGetVarByIndex("tiles", "occupant", neighbor);</Command>
<Command>							if (HasKeyword(FLYING, 1*mGetVar(occupant, "keywords"))) {</Command>
<Command>								push = push + 1;</Command>
<Command>								trQuestVarSet("search"+push+"tile", neighbor);</Command>
<Command>								trQuestVarSet("search"+push+"distance", trQuestVarGet("search"+pop+"distance") - 1);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void highlightTile(int tile = 0, float duration = 0.1) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command><![CDATA[	for (x=0; < zGetVarByIndex("tiles", "borderCount", tile)) {]]></Command>
<Command>		trUnitSelectByID(zGetVarByIndex("tiles", "border"+x, tile));</Command>
<Command>	}</Command>
<Command>	trUnitHighlight(duration, false);</Command>
<Command>}</Command>

<Command>void paintTile(int tile = 0, int type = 0, int subType = 0) {</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+tile));</Command>
<Command>	trVectorToGrid("pos", "square");</Command>
<Command>	int x = trVectorQuestVarGetX("square");</Command>
<Command>	int z = trVectorQuestVarGetZ("square");</Command>
<Command>	trPaintTerrain(x-1, z-1, x+1, z+1, type, subType, false);</Command>
<Command>}</Command>

<Command>void chooseTerrainTheme(int terrain = 0) {</Command>
<Command>	int pop = 0;</Command>
<Command>	int push = 0;</Command>
<Command>	int tile = 0;</Command>
<Command>	int val = 0;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	bool done = false;</Command>
<Command>	trQuestVarSet("treeScale", 1);</Command>
<Command>	trQuestVarSet("terrainTheme", terrain);</Command>
<Command>	switch(terrain)</Command>
<Command>	{</Command>
<Command>		case TERRAIN_GRASSLAND:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Tundra Tree");</Command>
<Command>			trQuestVarSet("treeSubTile", T_FOREST_PINE);</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random patches of dirt</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				zSetVarByIndex("tiles", "searched", 1*trQuestVarGet("tile"), 1);</Command>
<Command>				pop = 0;</Command>
<Command>				push = 1;</Command>
<Command>				trQuestVarCopy("search1", "tile");</Command>
<Command>				trQuestVarSet("search1val", 2);</Command>
<Command>				while(push > pop) {</Command>
<Command>					pop = pop + 1;</Command>
<Command>					tile = trQuestVarGet("search"+pop);</Command>
<Command>					paintTile(tile, 0, T_GRASS_25 + trQuestVarGet("search"+pop+"val"));</Command>
<Command>					trQuestVarSetFromRand("rand", 0, 1, true);</Command>
<Command>					trQuestVarSet("search"+pop+"val", trQuestVarGet("search"+pop+"val") - trQuestVarGet("rand"));</Command>

<Command>					if (trQuestVarGet("search"+pop+"val") >= 0) {</Command>
<Command><![CDATA[						for(j=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>							neighbor = zGetVarByIndex("tiles", "neighbor"+j, tile);</Command>
<Command>							if (zGetVarByIndex("tiles", "searched", neighbor) == 0) {</Command>
<Command>								zSetVarByIndex("tiles", "searched", neighbor, 1);</Command>
<Command>								push = push + 1;</Command>
<Command>								trQuestVarSet("search"+push, neighbor);</Command>
<Command>								trQuestVarCopy("search"+push+"val", "search"+pop+"val");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case TERRAIN_DESERT:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Palm");</Command>
<Command>			trQuestVarSet("treeSubTile", T_FOREST_PALM);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_SAND_D, false);</Command>
<Command>		}</Command>
<Command>		case TERRAIN_SNOW:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Pine Snow");</Command>
<Command>			trQuestVarSet("treeSubTile", T_FOREST_SNOW);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_SNOW_A, false);</Command>
<Command>		}</Command>
<Command>		case TERRAIN_TOWER:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Columns");</Command>
<Command>			trQuestVarSet("treeSubTile", T_GREEK_ROAD);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_CITY_TILE, false);</Command>
<Command>		}</Command>
<Command>		case TERRAIN_CAVE:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Stalagmite");</Command>
<Command>			trQuestVarSet("treeSubTile", T_HADES_FOREST);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_HADES_BUILDABLE, false);</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random strings of terrain</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				tile = 1*trQuestVarGet("tile");</Command>
<Command>				zSetVarByIndex("tiles", "searched", tile, 1);</Command>
<Command>				while(done == false) {</Command>
<Command>					paintTile(tile, 3, 0);</Command>
<Command>					trQuestVarSetFromRand("rand", 0, zGetVarByIndex("tiles", "neighborCount", tile), true);</Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+1*trQuestVarGet("rand"), tile);</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "searched", neighbor) < 1) {]]></Command>
<Command>						zSetVarByIndex("tiles", "searched", neighbor, 1 + zGetVarByIndex("tiles", "searched", neighbor));</Command>
<Command>						tile = neighbor;</Command>
<Command>					} else {</Command>
<Command>						done = true;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case TERRAIN_MARSH:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Marsh Tree");</Command>
<Command>			trQuestVarSet("treeSubTile", T_FOREST_MARSH);</Command>
<Command>			trQuestVarSet("treeScale", 1.5);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_MARSH_A, false);</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random strings of terrain</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				tile = 1*trQuestVarGet("tile");</Command>
<Command>				zSetVarByIndex("tiles", "searched", tile, 1);</Command>
<Command>				while(done == false) {</Command>
<Command>					paintTile(tile, 0, T_CLIFF_JUNGLE_B);</Command>
<Command>					trQuestVarSetFromRand("rand", 0, zGetVarByIndex("tiles", "neighborCount", tile), true);</Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+1*trQuestVarGet("rand"), tile);</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "searched", neighbor) < 1) {]]></Command>
<Command>						zSetVarByIndex("tiles", "searched", neighbor, 1 + zGetVarByIndex("tiles", "searched", neighbor));</Command>
<Command>						tile = neighbor;</Command>
<Command>					} else {</Command>
<Command>						done = true;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case TERRAIN_HEAVEN:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Columns");</Command>
<Command>			trQuestVarSet("treeSubTile", T_OLYMPUS_TILE);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, T_OLYMPUS_A, false); // shoreline atlantean b</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random strings of terrain</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				tile = 1*trQuestVarGet("tile");</Command>
<Command>				deployAtTile(0, "Mist", tile);</Command>
<Command>				zSetVarByIndex("tiles", "searched", tile, 1);</Command>
<Command>				while(done == false) {</Command>
<Command>					paintTile(tile, 4, 15);</Command>
<Command>					trQuestVarSetFromRand("rand", 0, zGetVarByIndex("tiles", "neighborCount", tile), true);</Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+1*trQuestVarGet("rand"), tile);</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "searched", neighbor) < 2) {]]></Command>
<Command>						zSetVarByIndex("tiles", "searched", neighbor, 1 + zGetVarByIndex("tiles", "searched", neighbor));</Command>
<Command>						tile = neighbor;</Command>
<Command>					} else {</Command>
<Command>						done = true;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case TERRAIN_SCRAPYARD:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Destroyed Buildings Small");</Command>
<Command>			trQuestVarSet("treeSubTile", 70);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 5, 3, false); // mining ground</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random strings of terrain</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				tile = 1*trQuestVarGet("tile");</Command>
<Command>				zSetVarByIndex("tiles", "searched", tile, 1);</Command>
<Command>				while(done == false) {</Command>
<Command>					paintTile(tile, 0, T_SAND_D);</Command>
<Command>					trQuestVarSetFromRand("rand", 0, zGetVarByIndex("tiles", "neighborCount", tile), true);</Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+1*trQuestVarGet("rand"), tile);</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "searched", neighbor) < 2) {]]></Command>
<Command>						zSetVarByIndex("tiles", "searched", neighbor, 1 + zGetVarByIndex("tiles", "searched", neighbor));</Command>
<Command>						tile = neighbor;</Command>
<Command>					} else {</Command>
<Command>						done = true;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case TERRAIN_ATLANTIS:</Command>
<Command>		{</Command>
<Command>			trStringQuestVarSet("treeType", "Fountain");</Command>
<Command>			trQuestVarSet("treeTile", 3);</Command>
<Command>			trQuestVarSet("treeSubTile", 10);</Command>
<Command>			trPaintTerrain(0, 0, 59, 59, 0, 71, false); // atlantis</Command>
<Command>			for(i=zGetBankCount("tiles"); >0) {</Command>
<Command>				zBankNext("tiles");</Command>
<Command>				zSetVar("tiles", "searched", 0);</Command>
<Command>			}</Command>
<Command>			// Drawing random strings of terrain</Command>
<Command>			for(i=trQuestVarGet("dimension"); >0) {</Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSetFromRand("tile", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend"), true);</Command>
<Command>				tile = 1*trQuestVarGet("tile");</Command>
<Command>				zSetVarByIndex("tiles", "searched", tile, 1);</Command>
<Command>				while(done == false) {</Command>
<Command>					paintTile(tile, 0, 72);</Command>
<Command>					trQuestVarSetFromRand("rand", 0, zGetVarByIndex("tiles", "neighborCount", tile), true);</Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+1*trQuestVarGet("rand"), tile);</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "searched", neighbor) < 2) {]]></Command>
<Command>						zSetVarByIndex("tiles", "searched", neighbor, 1 + zGetVarByIndex("tiles", "searched", neighbor));</Command>
<Command>						tile = neighbor;</Command>
<Command>					} else {</Command>
<Command>						done = true;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void paintTreesOnTile(int tile = 0) {</Command>
<Command>	int x = 0;</Command>
<Command>	int z = 0;</Command>
<Command>	zSetVarByIndex("tiles", "terrain", tile, TILE_IMPASSABLE);</Command>
<Command>	paintTile(tile, 1*trQuestVarGet("treeTile"), 1*trQuestVarGet("treeSubTile"));</Command>
<Command>	if (trQuestVarGet("terrainTheme") == TERRAIN_SCRAPYARD) {</Command>
<Command>		trQuestVarSet("next", deployAtTile(0, "Broken Siege Weapons", tile));</Command>
<Command>		trQuestVarSetFromRand("rand", 0, 2, true);</Command>
<Command>		trQuestVarSetFromRand("heading", 0, 6.28, false);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>		trUnitSetAnimationPath(""+1*trQuestVarGet("rand")+",0,0,0,0,0,0");</Command>
<Command>		trSetUnitOrientation(xsVectorSet(xsSin(trQuestVarGet("heading")), 0, xsCos(trQuestVarGet("heading"))), xsVectorSet(0,1,0), true);</Command>
<Command>	} else {</Command>
<Command>		for(i=4; >0) {</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+tile));</Command>
<Command>			trQuestVarSetFromRand("modx", -2, 2, true);</Command>
<Command>			trQuestVarSetFromRand("modz", -2, 2, true);</Command>
<Command>			trQuestVarSetFromRand("heading",0, 360, true);</Command>
<Command>			x = trVectorQuestVarGetX("pos") + trQuestVarGet("modx");</Command>
<Command>			z = trVectorQuestVarGetZ("pos") + trQuestVarGet("modz");</Command>
<Command>			trQuestVarSet("next", trGetNextUnitScenarioNameNumber());</Command>
<Command>			trArmyDispatch("1,10",trStringQuestVarGet("treeType"),1,x,0,z,trQuestVarGet("heading"), true);</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>			trUnitConvert(0);</Command>
<Command>			trSetSelectedScale(trQuestVarGet("treeScale"), trQuestVarGet("treeScale"), trQuestVarGet("treeScale"));</Command>
<Command>			if (trQuestVarGet("terrainTheme") == TERRAIN_HEAVEN) {</Command>
<Command>				trUnitSetAnimationPath("1,0,0,0,0,0,0");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void setupImpassableTerrain() {</Command>
<Command>	int tileStart = 1*trQuestVarGet("ztilesstart");</Command>
<Command>	int tile = 0;</Command>
<Command>	int layerSize = 1;</Command>
<Command><![CDATA[	for(dist=2; <= trQuestVarGet("dimension")) {]]></Command>
<Command>		tileStart = tileStart + layerSize;</Command>
<Command>		layerSize = layerSize + 6;</Command>
<Command>		if (dist == trQuestVarGet("dimension") - 1) {</Command>
<Command>			continue;</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSetFromRand("count", 0, dist, true);</Command>
<Command>			trQuestVarSet("remaining", layerSize / 2);</Command>
<Command>			tile = tileStart;</Command>
<Command>			while (trQuestVarGet("count") > 0) {</Command>
<Command>				trQuestVarSetFromRand("step", 1, trQuestVarGet("remaining") - trQuestVarGet("count"), true);</Command>
<Command>				trQuestVarSet("remaining", trQuestVarGet("remaining") - trQuestVarGet("step"));</Command>
<Command>				tile = tile + trQuestVarGet("step");</Command>
<Command>				paintTreesOnTile(tile);</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+tile));</Command>
<Command>				trVectorQuestVarSet("pos", vector(120, 0, 120) - trVectorQuestVarGet("pos"));</Command>
<Command>				paintTreesOnTile(1*findNearestTile("pos"));</Command>
<Command>				trQuestVarSet("count", trQuestVarGet("count") - 1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void setupBoard() {</Command>
<Command>	unitTransform("Statue of Automaton Base", "Victory Marker");</Command>
<Command>	bool allBorders = false;</Command>
<Command>	int count = 0;</Command>
<Command>	zBankNext("borders");</Command>
<Command>	yAddToDatabase("borderSearch", "borders");</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		trVectorSetUnitPos("currentPos", "tiles", false);</Command>
<Command>		if (allBorders == false) {</Command>
<Command>			for(y=5; >0) {</Command>
<Command>				zBankNext("borders");</Command>
<Command>				yAddToDatabase("borderSearch", "borders");</Command>
<Command>				if (trQuestVarGet("borders") == trQuestVarGet("zbordersstart")) {</Command>
<Command>					allBorders = true;</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>


<Command>		// Assigning neighbors to the tile</Command>
<Command>		for (y=yGetDatabaseCount("neighbors"); >0) {</Command>
<Command>			yDatabaseNext("neighbors");</Command>
<Command>			if (zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors")) == 6) {</Command>
<Command>				yRemoveFromDatabase("neighbors");</Command>
<Command>			} else {</Command>
<Command>				// Tiles have radius 3 and are 6 units apart.</Command>
<Command>				// Add this tile to the neighborlist of adjacent tiles and add adjacent neighbors to this tile's neighborlist</Command>
<Command><![CDATA[				if (trDistanceToVectorSquared("neighbors", "currentPos") < 40) {]]></Command>
<Command>					count = zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"));</Command>
<Command>					zSetVarByIndex("tiles", "neighbor"+count, 1*trQuestVarGet("neighbors"), trQuestVarGet("tiles"));</Command>
<Command>					zSetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"), count + 1);</Command>

<Command>					count = zGetVar("tiles", "neighborCount");</Command>
<Command>					zSetVar("tiles", "neighbor"+count, trQuestVarGet("neighbors"));</Command>
<Command>					zSetVar("tiles", "neighborCount", count + 1);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yAddToDatabase("neighbors", "tiles");</Command>

<Command>		// Assigning borders to the tile</Command>
<Command>		for (y=yGetDatabaseCount("borderSearch"); >0) {</Command>
<Command>			yDatabaseNext("borderSearch");</Command>
<Command>			if (yGetVar("borderSearch", "count") == 2) {</Command>
<Command>				yRemoveFromDatabase("borderSearch");</Command>
<Command>			} else {</Command>
<Command><![CDATA[				if (trDistanceToVectorSquared("borderSearch", "currentPos") < 10) {]]></Command>
<Command>					count = zGetVar("tiles", "borderCount");</Command>
<Command>					zSetVar("tiles", "border"+count, trQuestVarGet("borderSearch"));</Command>
<Command>					zSetVar("tiles", "borderCount", count + 1);</Command>
<Command>					ySetVar("borderSearch", "count", yGetVar("borderSearch", "count") + 1);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		zBankNext("tiles");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule initializeBoardStuff</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	int tiles = 1 + 3 * (xsPow(8, 2) - 8);</Command>
<Command>	zBankInit("tiles", 128, tiles);</Command>
<Command>	zBankInit("borders", 297, 552);</Command>

<Command>	setupBoard();</Command>

<Command>	xsDisableRule("initializeBoardStuff");</Command>
<Command>}</Command>

<Command>string collectionMission = "";</Command>

<Command>rule initializeBoard</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("dimension") <= 1) {]]></Command>
<Command>		trQuestVarSetFromRand("dimension", 6, 8, true);</Command>
<Command>	}</Command>
<Command>	int tiles = 1 + 3 * (xsPow(trQuestVarGet("dimension"), 2) - trQuestVarGet("dimension"));</Command>
<Command>	// Number of tiles in a hexagonal grid of X*X*X dimensions:</Command>
<Command>	// 3*(X^2-X) + 1</Command>
<Command>	zBankInit("tiles", 128, tiles);</Command>

<Command>	for(x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command>		if (trQuestVarGet("dungeonMode") == 1) {</Command>
<Command>			zSetVar("tiles", "terrain", TILE_OCCUPIED);</Command>
<Command>		} else {</Command>
<Command>			zSetVar("tiles", "terrain", TILE_EMPTY);</Command>
<Command>		}</Command>
<Command>		trUnitSelectClear();</Command>
<Command><![CDATA[		for(y=0; < zGetVar("tiles", "borderCount")) {]]></Command>
<Command>			trUnitSelectByID(1*zGetVar("tiles", "border"+y));</Command>
<Command>		}</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Statue of Automaton Base"));</Command>
<Command>		if(trQuestVarGet("customTerrainEmpty") > 0){</Command>
<Command>			paintTile(1*trQuestVarGet("tiles"), 0, 1*trQuestVarGet("customTerrainEmpty"));</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	trQuestVarSet("idsEyecandyStart", trGetNextUnitScenarioNameNumber());</Command>

<Command>	if(trQuestVarGet("zenoMakeRandomStuffPlease") >= 0){</Command>
<Command>		chooseTerrainTheme(1*trQuestVarGet("zenoMakeRandomStuffPlease"));</Command>
<Command>		setupImpassableTerrain();</Command>
<Command>	}</Command>
<Command>	for(y=yGetDatabaseCount("customBoard"); >0) {</Command>
<Command>		yDatabaseNext("customBoard");</Command>
<Command>		if(yGetVar("customBoard", "count") > 1){</Command>
<Command>			for(i=yGetVar("customBoard", "count"); >0) {</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("customBoard", "tile")));</Command>
<Command>				trQuestVarSetFromRand("modx", -2, 2, true);</Command>
<Command>				trQuestVarSetFromRand("modz", -2, 2, true);</Command>
<Command><![CDATA[				if(trQuestVarGet("modx") == 0 && trQuestVarGet("modz") == 0){]]></Command>
<Command>					trQuestVarSet("modx", 1);</Command>
<Command>					trQuestVarSet("modz", 1);</Command>
<Command>				}</Command>
<Command>				trQuestVarSetFromRand("heading",0, 360, true);</Command>
<Command>				trVectorQuestVarSet("pos", trVectorQuestVarGet("pos") + xsVectorSet(trQuestVarGet("modx"), 0, trQuestVarGet("modz")));</Command>
<Command>				trArmyDispatch("1,10",kbGetProtoUnitName(1*yGetVar("customBoard", "proto")),1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),trQuestVarGet("heading"), true);</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeName(collectionMission);</Command>
<Command>				trUnitConvert(0);</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("customBoard", deployAtTile(0, kbGetProtoUnitName(1*yGetVar("customBoard", "proto")), 1*yGetVar("customBoard", "tile")));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("customBoard"), true);</Command>
<Command>			trSetSelectedScale(yGetVar("customBoard", "scale"), yGetVar("customBoard", "scale"), yGetVar("customBoard", "scale"));</Command>
<Command>			trUnitChangeName(collectionMission);</Command>
<Command>		}</Command>
<Command>		if(yGetVar("customBoard", "terrain") > TILE_EMPTY){</Command>
<Command>			paintTile(1*yGetVar("customBoard", "tile"), 0, 1*trQuestVarGet("customTerrainEmptyNot"));</Command>
<Command>		} else {</Command>
<Command>			paintTile(1*yGetVar("customBoard", "tile"), 0, 1*trQuestVarGet("customTerrainEmptySpecial"));</Command>
<Command>		}</Command>
<Command>		zSetVarByIndex("tiles", "terrain", 1*yGetVar("customBoard", "tile"), 1*yGetVar("customBoard", "terrain"));</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("idsEyecandyEnd", trGetNextUnitScenarioNameNumber());</Command>

<Command>	trFadeOutAllSounds(0.0);</Command>

<Command>	trQuestVarSet("temp", 60.0 - 4.24 * (trQuestVarGet("dimension") - 1));</Command>
<Command>	trVectorQuestVarSet("p1startPos", vector(1.0,0,1.0) * trQuestVarGet("temp"));</Command>
<Command>	// Since p2 goes second, they start one tile closer to the center</Command>
<Command>	trQuestVarSet("temp", 60.0 + 4.24 * (trQuestVarGet("dimension") - 2));</Command>
<Command>	trVectorQuestVarSet("p2startPos", vector(1.0,0,1.0) * trQuestVarGet("temp"));</Command>

<Command>	trQuestVarSet("p1startTile", findNearestTile("p1StartPos"));</Command>
<Command>	trQuestVarSet("p2startTile", findNearestTile("p2StartPos"));</Command>

<Command>	trModifyProtounit("Revealer", 0, 2, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer", 0, 2, -9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Revealer", 0, 2, 6 * trQuestVarGet("dimension") + 6);</Command>

<Command>	xsDisableRule("initializeBoard");</Command>
<Command>	xsEnableRule("match_00_start");</Command>

<Command>	if (trCurrentPlayer() == 1) {</Command>
<Command>		trCameraCut(vector(-58.161659,112.294716,-58.161659),vector(0.500000,-0.707107,0.500000),vector(0.500000,0.707107,0.500000),vector(0.707107,0.000000,-0.707107));</Command>
<Command>	} else {</Command>
<Command>		trCameraCut(vector(27.838341,112.294716,27.838341),vector(0.500000,-0.707107,0.500000),vector(0.500000,0.707107,0.500000),vector(0.707107,0.000000,-0.707107));</Command>
<Command>	}</Command>
<Command>	trSoundPlayFN("default","1",-1," : ","");</Command>
<Command>}</Command>
<Command>void MusicHigh(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\8_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\9_out\music.mp3", "29", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\23_out\music 2.mp3", "30", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\8_in\music.mp3", "56", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicMedium(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\05_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\31_out\music.mp3", "34", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\22_in\music 2.mp3", "14", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\7_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicLow(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\26_out\music.mp3", "37", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\21_in\music.mp3", "51", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\04_in\music 1.mp3", "13", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("cinematics\26_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue00</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trPaintTerrain(0, 0, 60, 60, 5, 4, false); //Black</Command>
<Command>	trPaintTerrain(30, 30, 60, 60, 0, 9, false); //GaiaCreepASnow</Command>
<Command>	trPaintTerrain(0, 30, 30, 60, 0, 5, false); //CliffGreekB</Command>
<Command>	unitTransform("Statue of Automaton Base","Victory Marker");</Command>
<Command>	trLetterBox(true);</Command>
<Command>	trSoundPlayDialog("default", "1", -1, false, " :It was a fine day for Rogers.", "");</Command>
<Command>	trUIFadeToColor(0,0,0,1000,1000,false);</Command>
<Command>	trCameraCut(vector(-21.635717,32.595444,96.573792), vector(0.707104,-0.707109,-0.001133),</Command>
<Command>		vector(0.707104,0.707109,-0.001133), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>	trSetFogAndBlackmap(false, false);</Command>
<Command>	trModifyProtounit("Hero Greek Jason", 1, 1, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Hero Greek Jason", 1, 1, -9999999999999999999.0);</Command>
<Command>	trModifyProtounit("Hero Greek Jason", 1, 1, 4);</Command>
<Command>	trQuestVarSet("idsStart", trGetNextUnitScenarioNameNumber());</Command>
<Command>	trArmyDispatch("1,10", "Hero Greek Jason", 1, -0.19, 0.00, 97.42, 0, true);</Command>
<Command>	unitTransform("Hero Birth","Cinematic Block");</Command>
<Command>	trArmySelect("1,10");</Command>
<Command>	trUnitMoveToPoint(24.06, 0.00, 97.19, -1, false);</Command>
<Command>	trQuestVarSet("otherRogers", trGetNextUnitScenarioNameNumber());</Command>
<Command>	trArmyDispatch("1,10", "Hero Greek Jason", 1, 73.67, 0.00, 105.90, 270, true);</Command>
<Command>	trArmyDispatch("1,10", "Columns Broken", 1, 71.27, -0.00, 109.91, 47, true);</Command>
<Command>	trArmyDispatch("1,10", "Columns Broken", 1, 77.61, 0.00, 102.63, 333, true);</Command>
<Command>	trArmyDispatch("1,10", "Columns Broken", 1, 72.03, 0.00, 101.51, 111, true);</Command>
<Command>	trArmyDispatch("1,10", "Skeleton", 1, 78.01, 0.00, 109.91, 222, true);</Command>
<Command>	trArmyDispatch("1,10", "Mist Olympus", 1, 70.03, 0.00, 101.93, 222, true);</Command>
<Command>	trArmyDispatch("1,10", "Mist Olympus", 1, 74.71, 0.00, 109.70, 222, true);</Command>
<Command>	trArmyDispatch("1,10", "Mist Olympus", 1, 77.57, 0.00, 103.82, 222, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 11.34, 0.00, 104.54, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 15.13, 0.00, 82.10, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 7.41, 0.00, 86.42, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 7.99, 0.00, 93.50, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 9.34, 0.00, 108.28, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 17.80, 0.00, 103.35, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 25.46, -0.00, 107.95, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 32.37, 0.00, 113.47, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 45.28, 0.00, 108.99, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 48.73, 0.00, 90.59, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Berry Bush", 1, 30.57, 0.00, 92.07, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 34.31, 0.00, 95.09, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.62, 0.00, 94.96, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 29.75, 0.00, 107.86, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.11, 0.00, 107.56, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rock Limestone Big", 1, 18.63, 0.00, 91.59, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rain", 1, 32.11, 0.00, 91.33, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Rain", 1, 42.46, 0.00, 95.41, 0, true);</Command>
<Command>	trArmyDispatch("1,10", "Gate", 1, 119.84, 0.00, 100.72, 270, true);</Command>
<Command>	trArmySelect("1,10");</Command>
<Command>	trSetSelectedScale(2.5, 1.5, 2.5);</Command>
<Command>	trTechSetStatus(1, 413, 4);</Command>
<Command>	MusicLow();</Command>
<Command>	xsDisableRule("CinPrologue00");</Command>
<Command>	xsEnableRule("CinPrologue01");</Command>
<Command>}</Command>

<Command>rule CinPrologue01</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " :He finished work and was heading home feeling good.", "");</Command>
<Command>		trRenderSky(true, "SkyBlue");</Command>
<Command>		xsDisableRule("CinPrologue01");</Command>
<Command>		xsEnableRule("CinPrologue02");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue02</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " :However fate was about to intervene...", "");</Command>
<Command>		trCameraCut(vector(115.395638,-62.376621,13.212063), vector(-0.913248,0.407394,0.002918),</Command>
<Command>			vector(0.407396,0.913250,-0.001302), vector(0.003194,0.000000,0.999995));</Command>
<Command>		trSoundPlayFN("lightthunder.wav", "14", -1, "","");</Command>
<Command>		xsDisableRule("CinPrologue02");</Command>
<Command>		xsEnableRule("CinPrologue03");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue03</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		trFadeOutAllSounds(0.0);</Command>
<Command>		trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>		trSoundPlayFN("lightningstrike2.wav", "2", -1, "","");</Command>
<Command>		trRenderSky(true, "SkyStormy");</Command>
<Command>		trSoundPlayFN("lightningbirth.wav", "4", -1, "","");</Command>
<Command>		MusicHigh();</Command>
<Command>		xsDisableRule("CinPrologue03");</Command>
<Command>		xsEnableRule("CinPrologue04");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue04</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		trCameraCut(vector(15.341919,89.480629,24.112017), vector(0.000398,-1.000000,-0.000003),</Command>
<Command>			vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>		trVectorQuestVarSet("V", xsVectorSet(23.99, 0.00, 34.41));</Command>
<Command><![CDATA[		for(x=0;<20){]]></Command>
<Command>			trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V"),trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")-1));</Command>
<Command>			DeploySober("Curse SFX", "V");</Command>
<Command>		}</Command>
<Command><![CDATA[		for(x=0;<12){]]></Command>
<Command>			trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")-0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")+0.75));</Command>
<Command>			DeploySober("Curse SFX", "V");</Command>
<Command>		}</Command>
<Command><![CDATA[		for(x=0;<12){]]></Command>
<Command>			trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")-0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")-0.75));</Command>
<Command>			DeploySober("Curse SFX", "V");</Command>
<Command>		}</Command>
<Command>		trSoundPlayFN("lightningstrike1.wav", "2", -1, "","");</Command>
<Command>		trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>		trOverlayText("Zenophobia presents...", 4.0, -1, -1, -1);</Command>
<Command>		trSoundPlayFN("godpower.wav", "6", -1, "","");</Command>
<Command>		xsDisableRule("CinPrologue04");</Command>
<Command>		xsEnableRule("CinPrologue05");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue05</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " :Spooked by the sudden storm, Rogers picked up the pace!", "");</Command>
<Command>		trCameraCut(vector(34.321800,34.885281,60.436821), vector(0.004775,-0.665678,0.746224),</Command>
<Command>			vector(0.004259,0.746244,0.665658), vector(0.999979,0.000000,-0.006399));</Command>
<Command>		trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>		trUnitMoveToPoint(58.63, 0.00, 101.83, -1, false);</Command>
<Command>		trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>		trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>		xsDisableRule("CinPrologue05");</Command>
<Command>		xsEnableRule("CinPrologue06");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue06</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " :Inevitably, he stumbled and fell.", "");</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>		trDamageUnitPercent(100);</Command>
<Command>		trUnitSetAnimation("default",false,-1);</Command>
<Command>		xsDisableRule("CinPrologue06");</Command>
<Command>		xsEnableRule("CinPrologue07");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue07</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>		trSoundPlayFN("lightningstrike4.wav", "5", -1, "","");</Command>
<Command>		trSoundPlayFN("vortexstart.wav", "3", -1, "","");</Command>
<Command>		trCameraCut(vector(16.595451,124.640816,14.744846), vector(0.000398,-1.000000,-0.000003),</Command>
<Command>			vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>		trOverlayText("...in collaboration with Nickonhawk...", 4.0, 450, 600, 1000);</Command>
<Command>		trVectorQuestVarSet("V", xsVectorSet(7.98, 0.00, 2.24));</Command>
<Command>		string n = "Curse SFX";</Command>
<Command>		string g = "Increase Prosperity Small";</Command>
<Command><![CDATA[		for(z=0;<26){]]></Command>
<Command><![CDATA[			for(x=0;<24){]]></Command>
<Command>				string p = "";</Command>
<Command><![CDATA[			if(z==0 && x>14 && x<17){p=n;}]]></Command>
<Command><![CDATA[			if(z==1 && (x>3 && x<6 || x>11 && x<19)){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==2 && x<19){ if(x>14){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==3 && x<19){ if(x>11 && x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==4){ if(x>10 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==5){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==6){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==7 && x<22){ if(x>8&&x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==8 && x<19 && x!=12){ if(x>12){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==9 && x<19 && x!=12 && x!=13){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			if(z==10 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			if(z==11 && x>0 && x<15){p=n;}]]></Command>
<Command><![CDATA[			if(z==12 && x>0 && x<11){p=n;}]]></Command>
<Command><![CDATA[			if(z==13 && x<11){p=n;}]]></Command>
<Command><![CDATA[			if(z==14 && x<11){p=n;}]]></Command>
<Command><![CDATA[			if(z==15 && x<11){p=n;}]]></Command>
<Command><![CDATA[			if(z==16 && x<11){p=n;}]]></Command>
<Command><![CDATA[			if(z==17 && x<13){p=n;}]]></Command>
<Command><![CDATA[			if(z==18 && x<15){p=n;}]]></Command>
<Command><![CDATA[			if(z==19 && x<17){p=n;}]]></Command>
<Command><![CDATA[			if(z==20 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			if(z==21 && x>2 && x<19){p=n;}]]></Command>
<Command><![CDATA[			if(z==22 && x>4 && x<19){p=n;}]]></Command>
<Command><![CDATA[			if(z==23 && x>14 && x<19){p=n;}]]></Command>
<Command><![CDATA[			if(z==24 && x>14 && x<18){p=n;}]]></Command>
<Command><![CDATA[			if(z==25 && x>14 && x<17){p=n;}]]></Command>
<Command>				if(p!=""){</Command>
<Command>					trArmyDispatch("1,10",p,1,trVectorQuestVarGetX("V")+x,0,trVectorQuestVarGetZ("V")+z,0,true);</Command>
<Command>				}</Command>
<Command>			}}</Command>
<Command>			xsDisableRule("CinPrologue07");</Command>
<Command>			xsEnableRule("CinPrologue08");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue08</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) >= 4){</Command>
<Command>			trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>			trUIFadeToColor(255,255,255,500,0,true);</Command>
<Command>			trFadeOutAllSounds(3.0);</Command>
<Command>			trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>			trVectorQuestVarSet("V", xsVectorSet(74.62, 0.00, 119.92));</Command>
<Command>			trVectorQuestVarSet("U", trVectorQuestVarGet("V"));</Command>
<Command>			trVectorQuestVarSet("U", xsVectorSet(trVectorQuestVarGetX("U"),trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U") - 28));</Command>
<Command><![CDATA[			for(x=0;<18){]]></Command>
<Command>				trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")+8,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("V"),trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V"),270,true);</Command>
<Command>				trVectorQuestVarSet("U",xsVectorSet(trVectorQuestVarGetX("U")+8,trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U")));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("U"),trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U"),90,true);</Command>
<Command>			}</Command>
<Command>			unitTransform("Dwarf","Palace");</Command>
<Command>			xsDisableRule("CinPrologue08");</Command>
<Command>			xsEnableRule("CinPrologue09");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue09</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) >= 2){</Command>
<Command>			trSoundPlayDialog("default", "1", -1, false, " : When Rogers woke up, he found himself in a different place.", "");</Command>
<Command>			trUIFadeToColor(255,255,255,2000,0,false);</Command>
<Command>			trSoundPlayFN("visionswoosh.wav", "4", -1, "","");</Command>
<Command>			trSoundPlayFN("skypassageout.wav", "1", -1, "","");</Command>
<Command>			trCameraCut(vector(54.713875,7.545822,105.967346), vector(0.930725,-0.365716,-0.001491),</Command>
<Command>				vector(0.365710,0.930729,-0.000586), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>			xsDisableRule("CinPrologue09");</Command>
<Command>			xsEnableRule("CinPrologue10");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue10</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) >= 4){</Command>
<Command>			trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>			unitTransform("Mist Olympus","Cinematic Block");</Command>
<Command>			trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("otherRogers"));</Command>
<Command>			trUnitMoveToPoint(75, 0.00, 104.7, -1, false);</Command>
<Command>			trCamTrackLoad("Prologue");</Command>
<Command>			trCamTrackPlay(-1, -1);</Command>
<Command>			xsDisableRule("CinPrologue10");</Command>
<Command>			xsEnableRule("CinPrologue11");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue11</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) >= 4){</Command>
<Command>			trOverlayTextColour(255, 255, 0);</Command>
<Command>			trOverlayText("~ H E A V E N   G A M E S ~", 4.7, 516, 200, 1000);</Command>
<Command>			trSoundPlayFN("xsentinelbirth.wav", "3", -1, "","");</Command>
<Command>			trSoundPlayFN("cinematics\32_in\music.mp3", "15", -1, "","");</Command>
<Command>			trModifyProtounit("Hero Greek Jason", 1, 1, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit("Hero Greek Jason", 1, 1, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit("Hero Greek Jason", 1, 1, 10);</Command>
<Command>			xsDisableRule("CinPrologue11");</Command>
<Command>			xsEnableRule("CinPrologue12");</Command>
<Command>			trUIFadeToColor(0,0,0,1000,6000,true);</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue12</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) >= 7){</Command>
<Command>			trPaintTerrain(0, 0, 60, 60, 5, 4, false);</Command>
<Command>			int next = trGetNextUnitScenarioNameNumber();</Command>
<Command><![CDATA[			for(i=trQuestVarGet("idsStart");<next){]]></Command>
<Command>				trUnitSelectClear();trUnitSelect(""+i);</Command>
<Command>				trUnitDestroy();</Command>
<Command>			}</Command>
<Command>			xsDisableRule("CinPrologue12");</Command>
<Command>			trQuestVarSet("missionSelection", -1);</Command>
<Command>			trQuestVarSet("missionClass", -1);</Command>
<Command>			trQuestVarSet("newCommanderType", kbGetProtoUnitID("Hero Greek Jason"));</Command>
<Command>			xsEnableRule("CinPrologue14");</Command>
<Command>			xsEnableRule("NewCommander0");</Command>
<Command>			trCameraCut(vector(-58.161659,112.294716,-58.161659),vector(0.500000,-0.707107,0.500000),vector(0.500000,0.707107,0.500000),vector(0.707107,0.000000,-0.707107));</Command>
<Command>			trLetterBox(false);</Command>
<Command>			trShowImageDialog("icons\god power meteor icon", "Great Evil approaches! You must bring together the scattered Forumers!");</Command>
<Command>			trSoundPlayFN("xnew_objective.wav","1",-1,"","");</Command>
<Command>			trDelayedRuleActivation("ClassUnlockMessage_0");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule CinPrologue14</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if (trQuestVarGet("newCommanderType") == 0){</Command>
<Command>			xsDisableRule("CinPrologue14");</Command>
<Command>			xsEnableRule("MissionBegin");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_0</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\building specialist icons 64", "Class Unlocked: Adventurer");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_1</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\improvement focus icons 64", "Class Unlocked: Arcane");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_2</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\improvement poseidons secret icons 64", "Class Unlocked: Naga");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_3</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\improvement engineers icon 64", "Class Unlocked: Clockwork");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_4</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\god power ancestors icon 64", "Class Unlocked: Evil");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	rule ClassUnlockMessage_5</Command>
<Command>	highFrequency</Command>
<Command>	inactive</Command>
<Command>	{</Command>
<Command>		if ((trTime()-cActivationTime) > 0){</Command>
<Command>			xsDisableSelf();</Command>
<Command>			trShowImageDialog("icons\god power eclipse icon 64", "Class Unlocked: Space");</Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>const int RIGHT_CLICK = 2;</Command>
<Command>const int LEFT_CLICK = 1;</Command>

<Command>rule detectClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	if (yFindLatest("vision"+p, "Gold Mine Dwarven", 0) > 0) {</Command>
<Command>		trQuestVarSet("p"+p+"mine", 1);</Command>
<Command>		trVectorSetUnitPos("p"+p+"clickPos", "vision"+p, true);</Command>
<Command>		trQuestVarSet("p"+p+"click", RIGHT_CLICK);</Command>
<Command>		trUnitDestroy();</Command>
<Command>		trTechGodPower(p, "create gold", 1);</Command>
<Command>		ChatLogShow();</Command>
<Command>	}</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		if (trPlayerUnitCountSpecific(p, "Animal Attractor") >= 1) {</Command>
<Command>			yFindLatest("magnet"+p, "Animal Attractor", p);</Command>
<Command>			trVectorSetUnitPos("p"+p+"clickPos", "magnet"+p, true);</Command>
<Command>			trQuestVarSet("p"+p+"click", LEFT_CLICK);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			trTechGodPower(p, "Animal magnetism", 1);</Command>
<Command>			ChatLogShow();</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	trTechGodPower(1, "Animal magnetism", 1);</Command>
<Command>	trTechGodPower(2, "Animal magnetism", 1);</Command>
<Command>	map("mouse1down", "game", "uiSetSpecialPower(227) uiSpecialPowerAtPointer");	// animal magnetism for left click</Command>
<Command>	map("mouse2up", "game", "uiSetSpecialPower(84) uiSpecialPowerAtPointer");		// dwarven mine for right click</Command>
<Command>	map("space", "game", "uiSetSpecialPower(156) uiSpecialPowerAtPointer");			// rain for space (look at hand)</Command>
<Command>	map("enter", "game", "uiSetSpecialPower(235) uiSpecialPowerAtPointer");			// nidhogg for enter (end turn)</Command>

<Command>	xsDisableRule("initializeClick");</Command>
<Command>}</Command>
<Command>const int GAMEPLAY_SELECT = 0;</Command>
<Command>const int GAMEPLAY_WORK = 1;</Command>
<Command>const int GAMEPLAY_MOVING = 2;</Command>
<Command>const int GAMEPLAY_SUMMONING = 3;</Command>
<Command>const int GAMEPLAY_ATTACKING = 4;</Command>
<Command>const int GAMEPLAY_SPELL_UNIT = 5;</Command>
<Command>const int GAMEPLAY_SPELL_TILE = 6;</Command>


<Command>const int ACTION_READY = 0;</Command>
<Command>const int ACTION_MOVED = 1;</Command>
<Command>const int ACTION_DONE = 2;</Command>
<Command>const int ACTION_FURY = 3;</Command>
<Command>const int ACTION_SLEEPING = 4;</Command>
<Command>const int ACTION_STUNNED = 5;</Command>

<Command>const int ATTACK_START = 0;</Command>
<Command>const int ATTACK_ANIMATE = 1;</Command>
<Command>const int ATTACK_DONE = 2;</Command>

<Command>const int ANIM_DEFAULT = 0;</Command>
<Command>const int ANIM_CHARGING = 1;</Command>
<Command>const int ANIM_GORE = 2;</Command>

<Command>void scaleUnit(int unit = 0) {</Command>
<Command>	float scale = xsSqrt(mGetVar(unit, "scale"));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+unit);</Command>
<Command>	trSetSelectedScale(scale, scale, scale);</Command>
<Command>}</Command>

<Command>void refreshGuardAll() {</Command>
<Command>	yClearDatabase("guardUnits");</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		if (HasKeyword(GUARD, 1*mGetVarByQV("allUnits", "keywords")) == false) {</Command>
<Command>			tileGuard(1*mGetVarByQV("allUnits", "tile"), false);</Command>
<Command>		} else {</Command>
<Command>			yAddToDatabase("guardUnits", "allUnits");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	for(x=yGetDatabaseCount("guardUnits"); >0) {</Command>
<Command>		yDatabaseNext("guardUnits");</Command>
<Command>		tileGuard(1*mGetVarByQV("guardUnits", "tile"), true);</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void removeUnit(string db = "allUnits") {</Command>
<Command>	yRemoveFromDatabase(db);</Command>
<Command>}</Command>

<Command>void transferUnit(string to = "", string from = "") {</Command>
<Command>	yAddToDatabase(to, from);</Command>
<Command>	yAddUpdateVar(to, "pos", yGetVar(from, "pos"));</Command>
<Command>}</Command>


<Command>void teleportToTile(int name = 0, int tile = 0) {</Command>
<Command>	int p = mGetVar(name, "player");</Command>

<Command>	if (HasKeyword(GUARD, 1*mGetVar(name, "keywords"))) {</Command>
<Command>		if (mGetVar(name, "tile") > 0) {</Command>
<Command>			tileGuard(1*mGetVar(name, "tile"), false);</Command>
<Command>		}</Command>
<Command>		tileGuard(tile, true);</Command>
<Command>	}</Command>


<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trUnitConvert(p);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+name);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Dwarf"));</Command>
<Command>	trImmediateUnitGarrison(""+tile);</Command>
<Command>	trUnitChangeProtoUnit("Victory Marker");</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+name);</Command>
<Command>	trMutateSelected(1*mGetVar(name, "proto"));</Command>
<Command>	scaleUnit(name);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trUnitConvert(0);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>	mSetVar(name, "tile", tile);</Command>
<Command>	zSetVarByIndex("tiles", "occupant", tile, name);</Command>
<Command>}</Command>

<Command>int summonAtTile(int tile = 0, int p = 0, int proto = 0) {</Command>
<Command>	trQuestVarSet("next", CardInstantiate(p, proto, SPELL_NONE));</Command>
<Command>	teleportToTile(1*trQuestVarGet("next"), tile);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("next"));</Command>
<Command>	trUnitOverrideAnimation(-1,0,false,true,-1);</Command>
<Command>	yAddToDatabase("allUnits", "next");</Command>
<Command>	return(1*trQuestVarGet("next"));</Command>
<Command>}</Command>


<Command>int findNearestUnit(string qv = "", float radius = 1) {</Command>
<Command>	int id = 0;</Command>
<Command>	for (x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		id = yDatabaseNext("allUnits", true);</Command>
<Command>		if (id == -1) {</Command>
<Command>			removeUnit();</Command>
<Command>		} else {</Command>
<Command><![CDATA[			if (trDistanceToVectorSquared("allUnits", qv) < radius) {]]></Command>
<Command>				return(1*trQuestVarGet("allUnits"));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>




<Command>void highlightReachable(int name = 0) {</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+name, true));</Command>
<Command>	int tile = findNearestTile("pos");</Command>
<Command>	findAvailableTiles(tile, mGetVar(name, "speed"), "reachable",</Command>
<Command><![CDATA[		(HasKeyword(ETHEREAL, 1*mGetVar(name, "keywords")) || HasKeyword(FLYING, 1*mGetVar(name, "keywords"))));]]></Command>
<Command>	for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>		tile = yDatabaseNext("reachable");</Command>
<Command>		highlightTile(tile, 3600);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void highlightReady(float duration = 0.1) {</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[		if ((mGetVarByQV("allUnits", "action") == ACTION_READY) && (mGetVarByQV("allUnits", "player") == p)) {]]></Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				trUnitHighlight(duration, false);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void findTargets(int name = 0, string db = "", bool healer = false) {</Command>
<Command>	float dist = xsPow(mGetVar(name, "range") * 6 + 1, 2);</Command>
<Command>	int p = 3 - mGetVar(name, "player");</Command>
<Command>	if (healer) {</Command>
<Command>		p = 3 - p;</Command>
<Command>	}</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+name));</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		if (trQuestVarGet("allUnits") == name) {</Command>
<Command>			continue;</Command>
<Command><![CDATA[		} else if ((mGetVarByQV("allUnits", "player") == p) ||]]></Command>
<Command>			mGetVar(name, "proto") == kbGetProtoUnitID("Hoplite")) {</Command>
<Command><![CDATA[			if (trDistanceToVectorSquared("allUnits", "pos") < dist) {]]></Command>
<Command>				if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords")) == false) {</Command>
<Command>					if (HasKeyword(FLYING, 1*mGetVarByQV("allUnits", "keywords")) == false) {</Command>
<Command>						yAddToDatabase(db, "allUnits");</Command>
<Command>					} else if (mGetVar(name, "range") > 1) {</Command>
<Command>						yAddToDatabase(db, "allUnits");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void healUnit(int index = 0, float heal = 0) {</Command>
<Command>	xsSetContextPlayer(1*mGetVar(index, "player"));</Command>
<Command>	float health = kbUnitGetCurrentHitpoints(kbGetBlockID(""+index));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+index);</Command>
<Command>	trDamageUnit(0 - heal);</Command>
<Command>	float diff = kbUnitGetCurrentHitpoints(kbGetBlockID(""+index)) - health;</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command>	mSetVar(index, "health", 1*mGetVar(index, "health") + diff);</Command>
<Command><![CDATA[	if(heal>=1 && trQuestVarGet("p"+1*trQuestVarGet("activePlayer")+"commanderType")==COMMANDER_GOD) {]]></Command>
<Command>		yClearDatabase("toyTiles");</Command>
<Command>		findAvailableTiles(1*mGetVar(index, "tile"), 1, "toyTiles", false);</Command>
<Command>		if(yGetDatabaseCount("toyTiles") > 0){</Command>
<Command>			int target = summonAtTile(1*yDatabaseNext("toyTiles"),1*trQuestVarGet("activePlayer"),kbGetProtoUnitID("Forkboy"));</Command>
<Command>			mSetVar(target, "attack", heal);</Command>
<Command>			mSetVar(target, "health", heal);</Command>
<Command>			mSetVar(target, "speed", 2);</Command>
<Command>			mSetVar(target, "cost", heal);</Command>
<Command>			mSetVar(target, "scale", 0.5 + 0.25 * heal);</Command>
<Command>			scaleUnit(target);</Command>
<Command>		} else {</Command>
<Command>			ChatLog(1, "No space to summon!");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void damageUnit(int index = 0, float dmg = 0) {</Command>
<Command>	if (HasKeyword(IMMUNE, 1*mGetVar(index, "keywords"))) {</Command>
<Command>		return;</Command>
<Command>	}</Command>
<Command>	if (HasKeyword(ARMORED, 1*mGetVar(index, "keywords"))) {</Command>
<Command>		dmg = xsMax(0, dmg - 1);</Command>
<Command>	}</Command>
<Command><![CDATA[	if (1*mGetVar(index, "proto") == kbGetProtoUnitID("Golem") && iModulo(2,dmg) == 1) {]]></Command>
<Command>		return;</Command>
<Command>	}</Command>
<Command><![CDATA[	if(dmg > 0 && HasKeyword(STEALTH, 1*mGetVar(index, "keywords"))){]]></Command>
<Command>		mSetVar(index, "keywords", mGetVar(index, "keywords") - Keyword(STEALTH));</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("spyEye"+1*trQuestVarGet("stealthSFX"+index)));</Command>
<Command>		trUnitDestroy();</Command>
<Command>	}</Command>
<Command>	int p = mGetVar(index, "player");</Command>
<Command>	if(index == trQuestVarGet("p"+p+"commander")){</Command>
<Command>		if (trCountUnitsInArea("128",p,"Trident Soldier Hero",45) > 0) {</Command>
<Command>			int pointer = yGetPointer("allUnits");</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (1*mGetVarByQV("allUnits", "proto") == kbGetProtoUnitID("Trident Soldier Hero")) {</Command>
<Command>					damageUnit(1*trQuestVarGet("allUnits"), dmg);</Command>
<Command>					ySetPointer("allUnits", pointer);</Command>
<Command>					return;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			ySetPointer("allUnits", pointer);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	xsSetContextPlayer(p);</Command>
<Command>	float health = kbUnitGetCurrentHitpoints(kbGetBlockID(""+index));</Command>
<Command>	xsSetContextPlayer(0);</Command>
<Command>	mSetVar(index, "health", xsMax(0, 1*mGetVar(index, "health") - dmg));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+index);</Command>
<Command>	trDamageUnit(health - xsMax(mGetVar(index, "health"), 1));</Command>
<Command>}</Command>

<Command>void lightning(int index = 0, int damage = 0, bool deadly = false) {</Command>
<Command>	trQuestVarSetFromRand("rand", 1, 5, true);</Command>
<Command>	trSoundPlayFN("lightningstrike"+1*trQuestVarGet("rand")+".wav","1",-1,"","");</Command>
<Command>	int p = mGetVar(index, "player");</Command>
<Command>	if (deadly) {</Command>
<Command>		damage = -1;</Command>
<Command>	}</Command>
<Command>	// find lightning chain</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command>		zSetVar("tiles", "searched", 0);</Command>
<Command>	}</Command>
<Command>	int unit = index;</Command>
<Command>	zSetVarByIndex("tiles", "searched", 1*mGetVar(index, "tile"), 1);</Command>
<Command>	int tile = 0;</Command>
<Command>	int pop = -1;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	int push = modularCounterNext("lightningPush");</Command>
<Command>	trQuestVarSet("lightning" + push, index);</Command>
<Command>	trQuestVarSet("lightning" + push + "damage", damage);</Command>
<Command>	while ((pop == push) == false) {</Command>
<Command>		pop = modularCounterNext("lightningPop");</Command>
<Command>		unit = trQuestVarGet("lightning" + pop);</Command>
<Command>		tile = mGetVar(unit, "tile");</Command>

<Command><![CDATA[		for(x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>			neighbor = 1*zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>			if (zGetVarByIndex("tiles", "searched", neighbor) == 0) {</Command>
<Command>				zSetVarByIndex("tiles", "searched", neighbor, 1);</Command>
<Command>				unit = zGetVarByIndex("tiles", "occupant", neighbor);</Command>
<Command>				if (unit > 0) {</Command>
<Command>					if (mGetVar(unit, "player") == p) {</Command>
<Command>						push = modularCounterNext("lightningPush");</Command>
<Command>						trQuestVarSet("lightning"+push, unit);</Command>
<Command>						trQuestVarSet("lightning"+push+"damage", damage);</Command>
<Command>					} else if (HasKeyword(CONDUCTOR, mGetVar(unit, "keywords"))) {</Command>
<Command>						push = modularCounterNext("lightningPush");</Command>
<Command>						trQuestVarSet("lightning"+push, unit);</Command>
<Command>						trQuestVarSet("lightning"+push+"damage", 0);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>int checkGuard(int target = 0) {</Command>
<Command>	trVectorQuestVarSet("targetPos", kbGetBlockPosition(""+target, true));</Command>
<Command>	float dist = 0;</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		dist = trDistanceToVectorSquared("allUnits", "targetPos");</Command>
<Command><![CDATA[		if (dist < 64 && dist > 9 &&]]></Command>
<Command><![CDATA[			mGetVarByQV("allUnits", "stunTime") == 0 &&]]></Command>
<Command><![CDATA[			mGetVarByQV("allUnits", "player") == 3 - trQuestVarGet("activePlayer") &&]]></Command>
<Command>			HasKeyword(GUARD, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>			trSoundPlayFN("bronzebirth.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("militarycreate.wav","1",-1,"","");</Command>
<Command>			trUnitHighlight(2.0, true);</Command>
<Command>			int guardTile = mGetVarByQV("allUnits", "tile");</Command>
<Command>			int saveTile = mGetVar(target, "tile");</Command>
<Command>			teleportToTile(1*trQuestVarGet("allUnits"), saveTile);</Command>
<Command>			teleportToTile(target, guardTile);</Command>
<Command>			target = 1*trQuestVarGet("allUnits");</Command>
<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	refreshGuardAll();</Command>
<Command>	return(target);</Command>
<Command>}</Command>

<Command>void startAttack(int attacker = 0, int target = 0, bool first = false, bool animate = true) {</Command>
<Command>	string db = "attacks";</Command>
<Command>	if (first) {</Command>
<Command>		db = "ambushAttacks";</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("temp", attacker);</Command>
<Command>	yAddToDatabase(db, "temp");</Command>
<Command>	yAddUpdateVar(db, "target", target);</Command>
<Command>	if (animate) {</Command>
<Command>		yAddUpdateVar(db, "phase", ATTACK_START);</Command>
<Command>		yAddUpdateVar(db, "animation", ANIM_DEFAULT);</Command>
<Command>		switch(1*mGetVar(attacker, "proto"))</Command>
<Command>		{</Command>
<Command>			case kbGetProtoUnitID("Minotaur"):</Command>
<Command>			{</Command>
<Command>				if (mGetVar(attacker, "player") == 3 - trQuestVarGet("activePlayer")){</Command>
<Command>					yAddUpdateVar(db, "animation", ANIM_GORE);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case kbGetProtoUnitID("Pharaoh of Osiris"):</Command>
<Command>			{</Command>
<Command>				yAddUpdateVar(db, "animation", ANIM_CHARGING);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		yAddUpdateVar(db, "phase", ATTACK_DONE);</Command>
<Command>	}</Command>
<Command>}</Command>



<Command>bool spyReady() {</Command>
<Command>	return(trQuestVarGet("spyFind") == trQuestVarGet("spyFound"));</Command>
<Command>}</Command>


<Command>int spyEffect(string proto = "") {</Command>
<Command>	int x = modularCounterNext("spyFind");</Command>
<Command>	trQuestVarSet("spyEye"+x+"proto", kbGetProtoUnitID(proto));</Command>
<Command>	trTechInvokeGodPower(0, "spy", xsVectorSet(1,1,1), xsVectorSet(1,1,1));</Command>
<Command>	return(x);</Command>
<Command>}</Command>

<Command>rule spy_find</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if (spyReady() == false) {</Command>
<Command>		while (yFindLatest("spyEye", "Spy Eye", 0) >= 0) {</Command>
<Command>			int x = modularCounterNext("spyFound");</Command>
<Command>			trQuestVarCopy("spyEye"+x, "spyEye");</Command>
<Command>			trMutateSelected(1*trQuestVarGet("spyEye"+x+"proto"));</Command>
<Command>			trQuestVarSet("spyTimeout", 0);</Command>
<Command>			if(trQuestVarGet("spyEye"+x+"proto") == kbGetProtoUnitID("Sky Passage")){</Command>
<Command>				trSetSelectedScale(0, 0, 0);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("spyTimeout", trQuestVarGet("spyTimeout") + 1);</Command>
<Command>		if (trQuestVarGet("spyTimeout") >= 5) {</Command>
<Command>			trQuestVarSet("spyTimeout", 0);</Command>
<Command>			trQuestVarCopy("counterspyFoundpointer", "counterspyFindpointer");</Command>
<Command>			trQuestVarCopy("spyFound", "spyFind");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void stunUnit(int index = 0) {</Command>
<Command>	if (mGetVar(index, "health") > 0) {</Command>
<Command>		mSetVar(index, "stunTime", 2);</Command>
<Command>		mSetVar(index, "action", ACTION_STUNNED);</Command>
<Command>		if (mGetVar(index, "stunSFX") == 0) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+index);</Command>
<Command>			mSetVar(index, "stunIndex", spyEffect("Shockwave stun effect"));</Command>
<Command>			xsEnableRule("spy_assign_new");</Command>
<Command>		} else {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*mGetVar(index, "stunSFX"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Shockwave stun effect"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void pushUnit(int name = 0, string dir = "") {</Command>
<Command>	int p = mGetVar(name, "player");</Command>
<Command>	int tile = mGetVar(name, "tile");</Command>
<Command>	int container = deployAtTile(p, "Dwarf", tile);</Command>
<Command>	zSetVarByIndex("tiles", "occupant", tile, 0);</Command>
<Command>	tileGuard(tile, false);</Command>
<Command>	refreshGuardAll();</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+container, true);</Command>
<Command>	trSetUnitOrientation(trVectorQuestVarGet(dir), xsVectorSet(0,1,0), true);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Hero Greek Achilles"));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+name);</Command>
<Command>	trUnitOverrideAnimation(24,0,true,true,-1);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Relic"));</Command>
<Command>	trImmediateUnitGarrison(""+container);</Command>
<Command>	trMutateSelected(1*mGetVar(name, "proto"));</Command>


<Command>	trVectorQuestVarSet("start", kbGetBlockPosition(""+name));</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+name) + (trVectorQuestVarGet(dir) * 6.0));</Command>
<Command>	bool found = true;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	int target = 0;</Command>
<Command>	while(found) {</Command>
<Command>		found = false;</Command>
<Command>		// Travel down the line and find stopping tile</Command>
<Command><![CDATA[		for(z=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>			neighbor = zGetVarByIndex("tiles", "neighbor"+z, tile);</Command>
<Command><![CDATA[			if (zGetVarByIndex("tiles", "terrain", neighbor) == 0 && neighbor < trQuestVarGet("ztilesend")) {]]></Command>
<Command>				trVectorQuestVarSet("current", kbGetBlockPosition(""+neighbor));</Command>
<Command><![CDATA[				if (trDistanceBetweenVectorsSquared("current", "pos") < 1) {]]></Command>
<Command>					if (zGetVarByIndex("tiles", "occupant", neighbor) > 0) {</Command>
<Command>						target = zGetVarByIndex("tiles", "occupant", neighbor);</Command>
<Command>					} else {</Command>
<Command>						tile = neighbor;</Command>
<Command>						trVectorQuestVarSet("pos", trVectorQuestVarGet("current") + (trVectorQuestVarGet(dir) * 6.0));</Command>
<Command>						trQuestVarSet("posx", trQuestVarGet("currentx") + 6.0*trQuestVarGet(dir+"x"));</Command>
<Command>						trQuestVarSet("posz", trQuestVarGet("currentz") + 6.0*trQuestVarGet(dir+"z"));</Command>
<Command>						found = true;</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("next", container);</Command>
<Command>	yAddToDatabase("pushes", "next");</Command>
<Command>	yAddUpdateVar("pushes", "name", name);</Command>
<Command>	yAddUpdateVar("pushes", "dest", tile);</Command>
<Command>	yAddUpdateVar("pushes", "target", target);</Command>
<Command>	yAddUpdateVar("pushes", "timeout", trTimeMS() + 70 * trDistanceBetweenVectors("start", "pos"));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+tile);</Command>
<Command>	trSetUnitOrientation(trVectorQuestVarGet(dir), xsVectorSet(0,1,0), true);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+container);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Wadjet Spit"));</Command>
<Command>	trUnitMoveToVector("pos", false);</Command>
<Command>}</Command>



<Command>void magnetize(int target = 0, int unit = 0) {</Command>
<Command>	deployAtTile(0, "Fireball Launch Damage Effect", 1*mGetVar(unit, "tile"));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+unit);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>	zSetVarByIndex("tiles", "occupant", 1*mGetVar(unit, "tile"), 0);</Command>
<Command>	tileGuard(1*mGetVar(unit, "tile"), false);</Command>
<Command>	mSetVar(target, "health", mGetVar(target, "health") + mGetVar(unit, "health"));</Command>
<Command>	mSetVar(target, "attack", mGetVar(target, "attack") + mGetVar(unit, "attack"));</Command>
<Command>	trQuestVarSet("keywords1", mGetVar(target, "keywords"));</Command>
<Command>	trQuestVarSet("keywords2", mGetVar(unit, "keywords"));</Command>
<Command>	int keywords = 0;</Command>
<Command>	int current = xsPow(2, NUM_KEYWORDS - 1);</Command>
<Command>	for(x=NUM_KEYWORDS - 1; >=0) {</Command>
<Command><![CDATA[		if (trQuestVarGet("keywords1") >= current || trQuestVarGet("keywords2") >= current) {]]></Command>
<Command>			keywords = keywords + current;</Command>
<Command>			if (trQuestVarGet("keywords1") >= current) {</Command>
<Command>				trQuestVarSet("keywords1", trQuestVarGet("keywords1") - current);</Command>
<Command>			}</Command>
<Command>			if (trQuestVarGet("keywords2") >= current) {</Command>
<Command>				trQuestVarSet("keywords2", trQuestVarGet("keywords2") - current);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		current = current / 2;</Command>
<Command>	}</Command>
<Command>	mSetVar(target, "keywords", keywords);</Command>
<Command>	mSetVar(target, "scale", mGetVar(target, "scale") + 0.25 * mGetVar(unit, "health"));</Command>
<Command>	scaleUnit(target);</Command>
<Command><![CDATA[	if (HasKeyword(CHARGE, 1*mGetVar(target, "keywords")) && mGetVar(target, "action") == ACTION_SLEEPING) {]]></Command>
<Command>		mSetVar(target, "action", ACTION_READY);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void updateRoxasHealth(int p = 0) {</Command>
<Command>	if (trQuestVarGet("p"+p+"commanderType") == COMMANDER_ROXAS) {</Command>
<Command>		int diff = trQuestVarGet("p"+p+"roxasHealth") - yGetDatabaseCount("p"+p+"deck");</Command>
<Command>		trQuestVarSet("p"+p+"roxasHealth", yGetDatabaseCount("p"+p+"deck"));</Command>
<Command>		damageUnit(1*trQuestVarGet("p"+p+"commander"), diff);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void updateAuras() {</Command>
<Command>	int card = 0;</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		trQuestVarSet("p"+p+"spellDamage", trCountUnitsInArea("128",p,"Oracle Scout",45) + trQuestVarGet("p"+p+"spellDamageNonOracle"));</Command>
<Command>		trQuestVarSet("p"+p+"spellDiscount", trCountUnitsInArea("128",p,"Priest",45));</Command>
<Command>		// trCountUnitsInArea("128",3-p,"Argus",45) we can use a different unit for this effect</Command>
<Command>		trQuestVarSet("p"+p+"minionDiscount", trCountUnitsInArea("128",p,"Throwing Axeman",45));</Command>
<Command>		if (trQuestVarGet("p"+p+"guardianOfTheSea") == 0) {</Command>
<Command>			if (trCountUnitsInArea("128",p,"Trident Soldier Hero", 45) > 0) {</Command>
<Command>				mSetVarByQV("p"+p+"commander", "keywords", SetBit(1*mGetVarByQV("p"+p+"commander", "keywords"), GUARD));</Command>
<Command>			} else {</Command>
<Command>				mSetVarByQV("p"+p+"commander", "keywords", ClearBit(1*mGetVarByQV("p"+p+"commander", "keywords"), GUARD));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		if (trCountUnitsInArea("128",p,"Hero Greek Polyphemus", 45) > 0) {</Command>
<Command>			mSetVarByQV("p"+p+"commander", "keywords", SetBit(1*mGetVarByQV("p"+p+"commander", "keywords"), FURIOUS));</Command>
<Command>		} else {</Command>
<Command>			mSetVarByQV("p"+p+"commander", "keywords", ClearBit(1*mGetVarByQV("p"+p+"commander", "keywords"), FURIOUS));</Command>
<Command>		}</Command>

<Command>		if (trCountUnitsInArea("128", p, "Heka Gigantes", 45) > 0) {</Command>
<Command>			for (x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand");</Command>
<Command>				if (mGetVarByQV("p"+p+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					mSetVarByQV("p"+p+"hand", "keywords", SetBit(1*mGetVarByQV("p"+p+"hand", "keywords"), OVERFLOW));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			for (x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand");</Command>
<Command>				if (mGetVarByQV("p"+p+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					card = mGetVarByQV("p"+p+"hand", "proto");</Command>
<Command>					if (HasKeyword(OVERFLOW, 1*trQuestVarGet("card_"+card+"_keywords")) == false) {</Command>
<Command>						mSetVarByQV("p"+p+"hand", "keywords", ClearBit(1*mGetVarByQV("p"+p+"hand", "keywords"), OVERFLOW));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		updateRoxasHealth(p);</Command>
<Command>	}</Command>
<Command>	refreshGuardAll();</Command>
<Command>}</Command>

<Command>rule resolve_pushes</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("pushes") > 0) {</Command>
<Command>		int unit = yDatabaseNext("pushes");</Command>
<Command>		trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("pushes", "dest")));</Command>
<Command><![CDATA[		if (trDistanceToVectorSquared("pushes", "pos") < 4 || trTimeMS() > yGetVar("pushes", "timeout")) {]]></Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*yGetVar("pushes", "name"));</Command>
<Command>			trUnitChangeProtoUnit("Dwarf");</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+unit);</Command>
<Command>			trUnitChangeProtoUnit("Dust Large");</Command>
<Command>			teleportToTile(1*yGetVar("pushes", "name"), 1*yGetVar("pushes", "dest"));</Command>
<Command>			if (yGetVar("pushes", "target") > 0) {</Command>
<Command>				startAttack(1*yGetVar("pushes", "name"), 1*yGetVar("pushes", "target"), false, false);</Command>
<Command>				startAttack(1*yGetVar("pushes", "target"), 1*yGetVar("pushes", "name"), false, false);</Command>
<Command>			}</Command>
<Command>			yRemoveFromDatabase("pushes");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spy_assign_new</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (spyReady())	{</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command><![CDATA[			if ((mGetVarByQV("allUnits", "stunSFX") == 0) && (mGetVarByQV("allUnits", "stunIndex") > 0)) {]]></Command>
<Command>				mSetVarByQV("allUnits", "stunSFX", trQuestVarGet("spyEye"+1*mGetVarByQV("allUnits", "stunIndex")));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spy_assign_new");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule recycle_dead_cards</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	int unit = zBankNext("allUnitsBank");</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+unit);</Command>
<Command>	switch(1*zGetVar("allUnitsBank", "state"))</Command>
<Command>	{</Command>
<Command>		case STATE_ALIVE:</Command>
<Command>		{</Command>
<Command>			if (trUnitAlive() == false) {</Command>
<Command>				zSetVar("allUnitsBank", "state", STATE_DEAD);</Command>
<Command>				zSetVar("allUnitsBank", "next", trTimeMS() + 2000);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case STATE_DEAD:</Command>
<Command>		{</Command>
<Command>			if (trTimeMS() > zGetVar("allUnitsBank", "next")) {</Command>
<Command>				trDamageUnitPercent(-100);</Command>
<Command>				trUnitChangeProtoUnit("Automaton");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+unit);</Command>
<Command>				trDamageUnitPercent(-100);</Command>
<Command>				trUnitChangeProtoUnit("Victory Marker");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+unit);</Command>
<Command>				if (trUnitAlive() == true) {</Command>
<Command>					zSetVar("allUnitsBank", "state", STATE_ALIVE);</Command>
<Command>					mSetVarByQV("allUnitsBank", "played", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule directional_lasers</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("directionalLasers") > 0) {</Command>
<Command>		yDatabaseNext("directionalLasers", true);</Command>
<Command>		float scale = yGetVar("directionalLasers", "timeout") - trTimeMS();</Command>
<Command>		if (scale > 0) {</Command>
<Command>			scale = scale / 50;</Command>
<Command>			trSetSelectedScale(scale, 0, 60);</Command>
<Command>		} else {</Command>
<Command>			trUnitDestroy();</Command>
<Command>			yRemoveFromDatabase("directionalLasers");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		xsDisableRule("directional_lasers");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void shuffleDeck(int p = 0) {</Command>
<Command>	int proto = 0;</Command>
<Command>	int spell = 0;</Command>
<Command>	int count = yGetDatabaseCount("p"+p+"deck");</Command>
<Command>	int db = aiPlanCreate("shuffle", 8);</Command>
<Command>	aiPlanAddUserVariableInt(db, 0, "proto", count);</Command>
<Command>	aiPlanAddUserVariableInt(db, 1, "spell", count);</Command>
<Command><![CDATA[	for(i=0; < count) {]]></Command>
<Command>		proto = yDatabaseNext("p"+p+"deck");</Command>
<Command>		spell = yGetVar("p"+p+"deck", "spell");</Command>
<Command>		aiPlanSetUserVariableInt(db, 0, i, proto);</Command>
<Command>		aiPlanSetUserVariableInt(db, 1, i, spell);</Command>
<Command>	}</Command>
<Command>	yClearDatabase("p"+p+"deck");</Command>
<Command>	for(i=count - 1; >= 0) {</Command>
<Command>		// choose a random card</Command>
<Command>		trQuestVarSetFromRand("temp", 0, i, true);</Command>
<Command>		trQuestVarSet("tempProto", aiPlanGetUserVariableInt(db, 0, 1*trQuestVarGet("temp")));</Command>
<Command>		trQuestVarSet("tempSpell", aiPlanGetUserVariableInt(db, 1, 1*trQuestVarGet("temp")));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "tempProto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", trQuestVarGet("tempSpell"));</Command>
<Command>		// swap with the last card</Command>
<Command>		proto = aiPlanGetUserVariableInt(db, 0, i);</Command>
<Command>		spell = aiPlanGetUserVariableInt(db, 1, i);</Command>
<Command>		aiPlanSetUserVariableInt(db, 0, 1*trQuestVarGet("temp"), proto);</Command>
<Command>		aiPlanSetUserVariableInt(db, 1, 1*trQuestVarGet("temp"), spell);</Command>
<Command>	}</Command>
<Command>	aiPlanDestroy(db);</Command>
<Command>}</Command>
<Command>void updateHandPlayable(int p = 0) {</Command>
<Command>	for(x=zGetBankCount("p"+p+"handPos"); >0) {</Command>
<Command>		zBankNext("p"+p+"handPos", true);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>	}</Command>
<Command>	int cost = 0;</Command>
<Command>	trQuestVarSet("p"+p+"minionDiscount", trCountUnitsInArea("128",p,"Throwing Axeman",45));</Command>
<Command>	trQuestVarSet("p"+p+"spellDiscount", trCountUnitsInArea("128",p,"Priest",45));</Command>
<Command>	for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>		yDatabaseNext("p"+p+"hand");</Command>
<Command>		cost = mGetVarByQV("p"+p+"hand", "cost");</Command>
<Command>		if (mGetVarByQV("p"+p+"hand", "spell") > 0) {</Command>
<Command>			cost = cost - trQuestVarGet("p"+p+"spellDiscount");</Command>
<Command>		} else {</Command>
<Command>			cost = cost - trQuestVarGet("p"+p+"minionDiscount");</Command>
<Command>		}</Command>
<Command>		if (HasKeyword(OVERFLOW, 1*mGetVarByQV("p"+p+"hand", "keywords"))) {</Command>
<Command>			cost = cost - trQuestVarGet("p"+p+"manaflow");</Command>
<Command>		}</Command>
<Command><![CDATA[		if (cost <= trQuestVarGet("p"+p+"mana")) {]]></Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void addCardToDeck(int p = 0, string proto = "", int spell = 0) {</Command>
<Command>	if (spell == 0) {</Command>
<Command>		trQuestVarSet("proto", kbGetProtoUnitID(proto));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", 0);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("proto", kbGetProtoUnitID("Statue of Lightning"));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", spell);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void addCardToDeckByIndex(int p = 0, int card = 0) {</Command>
<Command>	int spell = CardToSpell(card);</Command>
<Command>	if (spell == 0) {</Command>
<Command>		trQuestVarSet("proto", CardToProto(card));</Command>
<Command>		if (trQuestVarGet("proto") == 0) {</Command>
<Command>			trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>			ChatLog(1, "Card invalid! " + card);</Command>
<Command>		}</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", 0);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("proto", kbGetProtoUnitID("Statue of Lightning"));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", spell);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void addCardToHand(int p = 0, int proto = 0, int spell = 0, bool fleeting = false) {</Command>
<Command>	trQuestVarSet("next", CardInstantiate(p, proto, spell));</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>

<Command>	if (spell > SPELL_NONE) {</Command>
<Command>		proto = kbGetProtoUnitID("Statue of Lightning");</Command>
<Command>	}</Command>

<Command>	yAddToDatabase("p"+p+"hand", "next");</Command>

<Command>	trUnitHighlight(3, true);</Command>

<Command>	if (fleeting) {</Command>
<Command>		mSetVarByQV("next", "keywords", SetBit(1*trQuestVarGet("card_" + proto + "_Keywords"), FLEETING));</Command>
<Command>	}</Command>

<Command><![CDATA[	if ((trCountUnitsInArea("128",p,"Heka Gigantes",45) > 0) && (spell == SPELL_NONE)) {]]></Command>
<Command>		mSetVarByQV("next", "keywords", SetBit(1*trQuestVarGet("card_" + proto + "_Keywords"), OVERFLOW));</Command>
<Command>	}</Command>

<Command>	// Find an empty position in the hand to place the unit.</Command>
<Command>	for(x=zGetBankCount("p"+p+"handPos"); >0) {</Command>
<Command>		zBankNext("p"+p+"handPos");</Command>
<Command>		if (zGetVar("p"+p+"handPos", "occupied") == 0) {</Command>
<Command>			zSetVar("p"+p+"handPos", "occupied", 1);</Command>
<Command>			yAddUpdateVar("p"+p+"hand", "pos", trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Dwarf"));</Command>
<Command>			trImmediateUnitGarrison(""+1*trQuestVarGet("p"+p+"handPos"));</Command>

<Command>			trUnitChangeProtoUnit(kbGetProtoUnitName(proto));</Command>


<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if (spell > SPELL_NONE) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>		float scale = 0.2 + xsSqrt(trQuestVarGet("spell_"+spell+"_cost")) * 0.4;</Command>
<Command>		trSetSelectedScale(0.75, scale, 0.75);</Command>
<Command>		trUnitSetAnimationPath(""+1*trQuestVarGet("spell_"+spell+"_animation") + ",0,0,0,0");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void addCardToHandByIndex(int p = 0, int card = 0, bool fleeting = false) {</Command>
<Command>	int spell = CardToSpell(card);</Command>
<Command>	int proto = CardToProto(card)	;</Command>
<Command>	addCardToHand(p, proto, spell, fleeting);</Command>
<Command>}</Command>


<Command>void drawCard(int p = 0, bool fleeting = false) {</Command>
<Command><![CDATA[	if (yGetDatabaseCount("p"+p+"deck") <= 0) {]]></Command>
<Command>		trQuestVarSet("p"+p+"fatigue", 1 + trQuestVarGet("p"+p+"fatigue"));</Command>
<Command>		damageUnit(1*trQuestVarGet("p"+p+"commander"), trQuestVarGet("p"+p+"fatigue"));</Command>
<Command><![CDATA[		ChatLog(0, "<color={Playercolor("+p+")}>{Playername("+p+")}</color> has no more cards! " + 1*trQuestVarGet("p"+p+"fatigue") + " damage");]]></Command>
<Command>		trQuestVarSetFromRand("sound", 1, 5, true);</Command>
<Command>		trSoundPlayFN("lightningstrike"+1*trQuestVarGet("sound")+".wav","1",-1,"","");</Command>
<Command><![CDATA[		if (mGetVarByQV("p"+p+"commander", "health") <= 0) {]]></Command>
<Command>			trQuestVarSet("p"+p+"drawCards", 0);</Command>
<Command>			trQuestVarSet("p"+p+"defeated", 1);</Command>
<Command>			xsEnableRule("match_end");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		int proto = yDatabaseNext("p"+p+"deck");</Command>
<Command><![CDATA[		if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>				ChatLog(p, "Drew " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>			} else {</Command>
<Command>				ChatLog(p, "Drew " + trStringQuestVarGet("spell_" + 1*yGetVar("p"+p+"deck", "spell") + "_Name"));</Command>
<Command>			}</Command>
<Command>			addCardToHand(p, proto, 1*yGetVar("p"+p+"deck", "spell"), fleeting);</Command>
<Command>		} else {</Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>				ChatLog(p, "Hand full! Burned " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>			} else {</Command>
<Command>				ChatLog(p, "Hand full! Burned " + trStringQuestVarGet("spell_" + 1*yGetVar("p"+p+"deck", "spell") + "_Name"));</Command>
<Command>			}</Command>

<Command>		}</Command>
<Command>		yRemoveFromDatabase("p"+p+"deck");</Command>

<Command>		updateRoxasHealth(p);</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		updateMana();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void generateCard(int p = 0, int proto = 0, int spell = 0, bool fleeting = false) {</Command>
<Command><![CDATA[	if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		if (spell == 0) {</Command>
<Command>			ChatLog(p, "Created " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		} else {</Command>
<Command>			ChatLog(p, "Created " + trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>		}</Command>
<Command>		addCardToHand(p, proto, spell, fleeting);</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		updateMana();</Command>
<Command>	} else {</Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		if (spell == 0) {</Command>
<Command>			ChatLog(p, "Hand full! Burned created " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		} else {</Command>
<Command>			ChatLog(p, "Hand full! Burned created " + trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeHand</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	zBankInit("p1handPos", 849, 10);</Command>
<Command>	zBankInit("p2handPos", 859, 10);</Command>

<Command>	trVectorQuestVarSet("p1deck", xsVectorSet(1,0,1));</Command>
<Command>	trVectorQuestVarSet("p2deck", xsVectorSet(119,0,119));</Command>

<Command>	xsDisableRule("initializeHand");</Command>
<Command>}</Command>


<Command>rule card_draw</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	// We want to give the trCountUnitsInArea some time to update</Command>
<Command>	if (trTimeMS() > trQuestVarGet("card_draw_next")) {</Command>
<Command>		trQuestVarSet("card_draw_next", trTimeMS() + 500);</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			if (trQuestVarGet("p"+p+"drawCards") > 0) {</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") - 1);</Command>
<Command>				drawCard(p);</Command>
<Command>				if (trQuestVarGet("p"+p+"drawCards") == 0) {</Command>
<Command>					updateHandPlayable(1*trQuestVarGet("activePlayer"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>







<Command>int deckc1d0 = 0;</Command>
<Command>int deckc1d1 = 0;</Command>
<Command>int deckc2d0 = 0;</Command>
<Command>int deckc2d1 = 0;</Command>

<Command>void dataSave() {</Command>
<Command>	trQuestVarCopy("p1commanderType", "commander");</Command>
<Command>	int card = 0;</Command>
<Command>	int c = trQuestVarGet("class1");</Command>
<Command>	int data = 0;</Command>
<Command>	int power = 1;</Command>
<Command><![CDATA[	for(x=0; <15) {]]></Command>
<Command>		card = x + 30 * c;</Command>
<Command>		data = data + power * getCardCountDeck(card);</Command>
<Command>		power = power * 4;</Command>
<Command>	}</Command>
<Command>	trSetCurrentScenarioUserData(6, data);</Command>
<Command>	data = 0;</Command>
<Command>	power = 1;</Command>
<Command><![CDATA[	for(x=15; <30) {]]></Command>
<Command>		card = x + 30 * c;</Command>
<Command>		data = data + power * getCardCountDeck(card);</Command>
<Command>		power = power * 4;</Command>
<Command>	}</Command>
<Command>	trSetCurrentScenarioUserData(7, data);</Command>

<Command>	if (trQuestVarGet("class1") == trQuestVarGet("class2")) {</Command>
<Command>		trSetCurrentScenarioUserData(8, 0);</Command>
<Command>		trSetCurrentScenarioUserData(9, 0);</Command>
<Command>	} else {</Command>
<Command>		c = trQuestVarGet("class2");</Command>
<Command>		data = 0;</Command>
<Command>		power = 1;</Command>
<Command><![CDATA[		for(x=0; <15) {]]></Command>
<Command>			card = x + 30 * c;</Command>
<Command>			data = data + power * getCardCountDeck(card);</Command>
<Command>			power = power * 4;</Command>
<Command>		}</Command>
<Command>		trSetCurrentScenarioUserData(8, data);</Command>
<Command>		data = 0;</Command>
<Command>		power = 1;</Command>
<Command><![CDATA[		for(x=15; <30) {]]></Command>
<Command>			card = x + 30 * c;</Command>
<Command>			data = data + power * getCardCountDeck(card);</Command>
<Command>			power = power * 4;</Command>
<Command>		}</Command>
<Command>		trSetCurrentScenarioUserData(9, data);</Command>
<Command>	}</Command>


<Command><![CDATA[	for(c=0; <6) {]]></Command>
<Command>		data = 0;</Command>
<Command>		if (trQuestVarGet("class2") == c) {</Command>
<Command>			data = data + 3; // set the first bit</Command>
<Command>		} else if (trQuestVarGet("class1") == c) {</Command>
<Command>			data = data + 1; // set the first 2 bits</Command>
<Command>			data = data + 4 * (1 * trQuestVarGet("commander") - 2 * c); // set the commander bit</Command>
<Command>		}</Command>
<Command>		data = data + 8 * trQuestVarGet("class"+c+"progress"); // progress is bits 3-5</Command>

<Command>		power = 64; // skip first 6 bits to add collectible cards</Command>
<Command><![CDATA[		for(x=7; <15) {]]></Command>
<Command>			card = x + 30 * c;</Command>
<Command>			data = data + power * trQuestVarGet("card_"+card+"_count");</Command>
<Command>			power = power * 4;</Command>
<Command>		}</Command>
<Command>		trSetCurrentScenarioUserData(c, data);</Command>

<Command>		data = 0;</Command>
<Command>		power = 1;</Command>
<Command><![CDATA[		for(x=15; < 30) {]]></Command>
<Command>			card = x + 30 * c;</Command>
<Command>			data = data + power * trQuestVarGet("card_"+card+"_count");</Command>
<Command>			power = power * 4;</Command>
<Command>		}</Command>
<Command>		trSetCurrentScenarioUserData(c+10, data);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void showLoadProgress(int p = 0) {</Command>
<Command>	trSoundPlayFN("default","1",-1,"Loading Data:"+100 * p / 22,"icons\god power reverse time icons 64");</Command>
<Command>}</Command>

<Command>rule data_load_00</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("cardsReady") == 1) {</Command>
<Command>		int data = 0;</Command>
<Command>		int bit = 0;</Command>
<Command>		int card = 0;</Command>


<Command><![CDATA[		for(x=0; < 6) {]]></Command>
<Command>			data = trGetScenarioUserData(x, "!HeavenGames.scx");</Command>
<Command>			bit = iModulo(2, data);</Command>
<Command>			if (bit == 1) {</Command>
<Command>				data = data / 2;</Command>
<Command>				bit = iModulo(2, data);</Command>
<Command>				if (bit == 1) {</Command>
<Command>					trQuestVarSet("class2", x);</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("class1", x);</Command>
<Command>					data = data / 2;</Command>
<Command>					bit = iModulo(2, data);</Command>
<Command>					trQuestVarSet("commander", 2*trQuestVarGet("class1") + bit);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			data = trGetScenarioUserData(x, "!HeavenGames.scx");</Command>
<Command>			data = data / 8;</Command>
<Command>			trQuestVarSet("class"+x+"progress", iModulo(8, data));</Command>
<Command>		}</Command>

<Command>		if (Multiplayer) {</Command>
<Command>			trSoundPlayFN("default","1",-1,"Loading:","icons\god power reverse time icons 64");</Command>
<Command>			trUIFadeToColor(0,0,0,0,0,true);</Command>

<Command>			for(p=2; >0) {</Command>
<Command>				trModifyProtounit("Swordsman Hero", p, 6, -100);	// population count</Command>
<Command>				trModifyProtounit("Swordsman Hero", p, 16, -1000);	// cost gold</Command>
<Command>				trModifyProtounit("Swordsman Hero", p, 17, -1000);	// cost food</Command>
<Command>				trModifyProtounit("Swordsman Hero", p, 18, -1000);	// cost wood</Command>
<Command>				trModifyProtounit("Swordsman Hero", p, 19, -1000);	// cost favor</Command>
<Command>			}</Command>
<Command>			int m = kbGetProtoUnitID("Swordsman");</Command>
<Command><![CDATA[			for(x=0; < 128) {]]></Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(m);</Command>
<Command>			}</Command>

<Command>			trBlockAllSounds(true);</Command>
<Command>			xsEnableRule("data_load_01_ready");</Command>
<Command>		} else {</Command>
<Command>			trForbidProtounit(1, "Swordsman Hero");</Command>
<Command>			trForbidProtounit(2, "Swordsman Hero");</Command>
<Command>			ChatLog(1, "Mode:Singleplayer");</Command>
<Command>			// Cards will probably be unlocked in order, so I'm assuming the player has not played before if the first value is zero</Command>
<Command><![CDATA[			if(trGetScenarioUserData(0) <= 0){]]></Command>
<Command>				xsEnableRule("CinPrologue00");</Command>
<Command>			} else {</Command>
<Command>				xsEnableRule("Collection");</Command>
<Command>			}</Command>
<Command><![CDATA[			for(c=0; <6) {]]></Command>
<Command>				// Starter cards 0-6</Command>
<Command><![CDATA[				for (x=0; < 7) {]]></Command>
<Command>					card = x + 30 * c;</Command>
<Command>					trQuestVarSet("card_"+card+"_count", 3);</Command>
<Command>				}</Command>
<Command>				// Cards 7-14</Command>
<Command>				data = trGetScenarioUserData(c, "!HeavenGames.scx");</Command>
<Command>				data = data / 64; // skip first 6 bits</Command>
<Command><![CDATA[				for(x=7; <15) {]]></Command>
<Command>					card = x + 30 * c;</Command>
<Command>					trQuestVarSet("card_"+card+"_count", iModulo(4, data));</Command>
<Command>					data = data / 4;</Command>
<Command>				}</Command>
<Command>				// Cards 15-29</Command>
<Command>				data = trGetScenarioUserData(c + 10, "!HeavenGames.scx");</Command>
<Command><![CDATA[				for(x=15; <30) {]]></Command>
<Command>					card = x + 30 * c;</Command>
<Command>					trQuestVarSet("card_"+card+"_count", iModulo(4, data));</Command>
<Command>					data = data / 4;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			c = 30 * trQuestVarGet("class1");</Command>
<Command>			data = trGetScenarioUserData(6, "!HeavenGames.scx");</Command>
<Command><![CDATA[			for(x=0;<15) {]]></Command>
<Command>				card = c + x;</Command>
<Command>				trQuestVarSet("card_"+card+"_countInDeck", iModulo(4, data));</Command>
<Command>				data = data / 4;</Command>
<Command>				if (data == 0) {</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			data = trGetScenarioUserData(7, "!HeavenGames.scx");</Command>
<Command><![CDATA[			for(x=15;<30) {]]></Command>
<Command>				card = c + x;</Command>
<Command>				trQuestVarSet("card_"+card+"_countInDeck", iModulo(4, data));</Command>
<Command>				data = data / 4;</Command>
<Command>				if (data == 0) {</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			if ((trQuestVarGet("class1") == trQuestVarGet("class2")) == false) {</Command>
<Command>				c = 30 * trQuestVarGet("class2");</Command>
<Command>				data = trGetScenarioUserData(8, "!HeavenGames.scx");</Command>
<Command><![CDATA[				for(x=0;<15) {]]></Command>
<Command>					card = c + x;</Command>
<Command>					trQuestVarSet("card_"+card+"_countInDeck", iModulo(4, data));</Command>
<Command>					data = data / 4;</Command>
<Command>					if (data == 0) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				data = trGetScenarioUserData(9, "!HeavenGames.scx");</Command>
<Command><![CDATA[				for(x=15;<30) {]]></Command>
<Command>					card = c + x;</Command>
<Command>					trQuestVarSet("card_"+card+"_countInDeck", iModulo(4, data));</Command>
<Command>					data = data / 4;</Command>
<Command>					if (data == 0) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>		}</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_01_ready</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trPlayerUnitCountSpecific(1, "Swordsman") + trPlayerUnitCountSpecific(2, "Swordsman") == 128) {</Command>
<Command>		xsEnableRule("data_load_01_load_classes");</Command>
<Command>		xsEnableRule("data_load_02_detect_classes");</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_01_load_classes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trLetterBox(false);</Command>
<Command>	trBlockAllSounds(true);</Command>
<Command>	int c = 6 * trQuestVarGet("class1") + trQuestVarGet("class2");</Command>
<Command>	if (trCurrentPlayer() == 2) {</Command>
<Command>		c = c + 64;</Command>
<Command>	}</Command>
<Command>	trChatSend(0, "Class data: " + c);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(c);</Command>
<Command>	for(i=64; >0) {</Command>
<Command>		if (trUnitIsSelected() == false) {</Command>
<Command>			uiFindType("Swordsman");</Command>
<Command>		} else {</Command>
<Command>			trChatSend(0, "Found!");</Command>
<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	uiTransformSelectedUnit("Swordsman Hero");</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trForceNonCinematicModels(true);</Command>
<Command>	trLetterBox(true);</Command>
<Command>	showLoadProgress(1*trQuestVarGet("progress"));</Command>
<Command>}</Command>

<Command>rule data_load_02_detect_classes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trPlayerUnitCountSpecific(1, "Swordsman Hero") + trPlayerUnitCountSpecific(2, "Swordsman Hero") == 2) {</Command>
<Command><![CDATA[		for(x=0; < 64) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trQuestVarSet("p1classes", x);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command><![CDATA[		for(x=64; < 128) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trQuestVarSet("p2classes", x - 64);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		int c = 0;</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			c = trQuestVarGet("p"+p+"classes");</Command>
<Command>			trQuestVarSet("p"+p+"class2", iModulo(6, c));</Command>
<Command>			c = c / 6;</Command>
<Command>			trQuestVarSet("p"+p+"class1", c);</Command>
<Command>			trPlayerGrantResources(p, "food", -1000);</Command>
<Command>			trPlayerGrantResources(p, "wood", -1000);</Command>
<Command>			trPlayerGrantResources(p, "gold", -1000);</Command>
<Command>			trPlayerGrantResources(p, "favor", -1000);</Command>
<Command>		}</Command>
<Command>		showLoadProgress(1);</Command>
<Command>		xsEnableRule("data_load_03_load_commanders");</Command>
<Command>		xsEnableRule("data_load_04_detect_commanders");</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_03_load_commanders</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trCurrentPlayer();</Command>
<Command>	if (trPlayerUnitCountSpecific(p, "Swordsman Hero") == 0) {</Command>
<Command>		trLetterBox(false);</Command>
<Command>		trBlockAllSounds(true);</Command>
<Command>		int c = trQuestVarGet("commander");</Command>
<Command>		if (p == 2) {</Command>
<Command>			c = c + 64;</Command>
<Command>		}</Command>
<Command>		trChatSend(0, "Commander data: " + c);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(c);</Command>
<Command>		for(i=64; >0) {</Command>
<Command>			if (trUnitIsSelected() == false) {</Command>
<Command>				uiFindType("Swordsman");</Command>
<Command>			} else {</Command>
<Command>				trChatSend(0, "Found!");</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		if (trUnitIsOwnedBy(trCurrentPlayer())) {</Command>
<Command>			uiTransformSelectedUnit("Swordsman Hero");</Command>
<Command>		}</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trForceNonCinematicModels(true);</Command>
<Command>		trLetterBox(true);</Command>
<Command>		showLoadProgress(1*trQuestVarGet("progress"));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_04_detect_commanders</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trPlayerUnitCountSpecific(1, "Swordsman Hero") + trPlayerUnitCountSpecific(2, "Swordsman Hero") == 2) {</Command>
<Command><![CDATA[		for(x=0; < 12) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trQuestVarSet("p1commanderType", x);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command><![CDATA[		for(x=64; < 76) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trQuestVarSet("p2commanderType", x - 64);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		showLoadProgress(2);</Command>
<Command>		xsDisableRule("data_load_04_detect_commanders");</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			trPlayerGrantResources(p, "food", -1000);</Command>
<Command>			trPlayerGrantResources(p, "wood", -1000);</Command>
<Command>			trPlayerGrantResources(p, "gold", -1000);</Command>
<Command>			trPlayerGrantResources(p, "favor", -1000);</Command>
<Command>		}</Command>

<Command>		deckc1d0 = trGetScenarioUserData(6, "!HeavenGames.scx");</Command>
<Command>		deckc1d1 = trGetScenarioUserData(7, "!HeavenGames.scx");</Command>
<Command>		deckc2d0 = trGetScenarioUserData(8, "!HeavenGames.scx");</Command>
<Command>		deckc2d1 = trGetScenarioUserData(9, "!HeavenGames.scx");</Command>

<Command>		trQuestVarSet("loadProgress", 0);</Command>
<Command>		trQuestVarSet("classProgress", 1);</Command>
<Command>		trQuestVarSet("loadNext", 1);</Command>
<Command>		trQuestVarSet("progress", 2);</Command>

<Command>		xsEnableRule("data_load_05_load_cards");</Command>
<Command>		xsEnableRule("data_load_06_detect_cards");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_05_load_cards</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trCurrentPlayer();</Command>
<Command><![CDATA[	if ((trQuestVarGet("loadNext") == 1) &&]]></Command>
<Command>		(trPlayerUnitCountSpecific(p, "Swordsman Hero") == 0)) {</Command>
<Command>		trLetterBox(false);</Command>
<Command>		trBlockAllSounds(true);</Command>
<Command>		trQuestVarSet("loadNext", 0);</Command>
<Command>		int c = trQuestVarGet("classProgress");</Command>
<Command>		int d = 0;</Command>
<Command>		if (trQuestVarGet("loadProgress") >= 5) {</Command>
<Command>			d = 1;</Command>
<Command>		}</Command>
<Command>		int data = 0;</Command>
<Command>		switch(10*c + d)</Command>
<Command>		{</Command>
<Command>			case 10:</Command>
<Command>			{</Command>
<Command>				data = deckc1d0;</Command>
<Command>				deckc1d0 = deckc1d0 / 64;</Command>
<Command>			}</Command>
<Command>			case 11:</Command>
<Command>			{</Command>
<Command>				data = deckc1d1;</Command>
<Command>				deckc1d1 = deckc1d1 / 64;</Command>
<Command>			}</Command>
<Command>			case 20:</Command>
<Command>			{</Command>
<Command>				data = deckc2d0;</Command>
<Command>				deckc2d0 = deckc2d0 / 64;</Command>
<Command>			}</Command>
<Command>			case 21:</Command>
<Command>			{</Command>
<Command>				data = deckc2d1;</Command>
<Command>				deckc2d1 = deckc2d1 / 64;</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		int x = iModulo(64, data);</Command>
<Command>		if (p == 2) {</Command>
<Command>			x = x + 64;</Command>
<Command>		}</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(x);</Command>
<Command>		for(i=64; >0) {</Command>
<Command>			if (trUnitIsSelected() == false) {</Command>
<Command>				uiFindType("Swordsman");</Command>
<Command>			} else {</Command>
<Command>				trChatSend(0, "Found!");</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		uiTransformSelectedUnit("Swordsman Hero");</Command>
<Command>		trForceNonCinematicModels(true);</Command>
<Command>		trLetterBox(true);</Command>
<Command>		showLoadProgress(1*trQuestVarGet("progress"));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void loadCardsToDeck(int p = 1, int v = 0) {</Command>
<Command>	int class = trQuestVarGet("p"+p+"class"+1*trQuestVarGet("classProgress"));</Command>
<Command>	int offset = 30 * class + 3 * trQuestVarGet("loadProgress");</Command>
<Command><![CDATA[	for(y = 0; <3) {]]></Command>
<Command>		int count = iModulo(4, v);</Command>
<Command>		for(x=count; >0) {</Command>
<Command>			addCardToDeckByIndex(p,offset+y);</Command>
<Command>		}</Command>
<Command>		v = v / 4;</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_06_detect_cards</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int r = trPlayerUnitCountSpecific(1, "Swordsman Hero") + trPlayerUnitCountSpecific(2, "Swordsman Hero");</Command>
<Command>	if (r == 2) {</Command>
<Command>		trQuestVarSet("derp", trTime());</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			trPlayerGrantResources(p, "food", -1000);</Command>
<Command>			trPlayerGrantResources(p, "wood", -1000);</Command>
<Command>			trPlayerGrantResources(p, "gold", -1000);</Command>
<Command>			trPlayerGrantResources(p, "favor", -1000);</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("progress", 1 + trQuestVarGet("progress"));</Command>
<Command>		showLoadProgress(1*trQuestVarGet("progress"));</Command>
<Command><![CDATA[		for(x=0; < 64) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trChatSend(0, "value1: " + x);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				loadCardsToDeck(1, x);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command><![CDATA[		for(x=64; < 128) {]]></Command>
<Command>			if (kbGetUnitBaseTypeID(x) == kbGetProtoUnitID("Swordsman Hero")) {</Command>
<Command>				trChatSend(0, "value2: " + x);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(x);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Swordsman"));</Command>
<Command>				loadCardsToDeck(2, x - 64);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("loadProgress", 1 + trQuestVarGet("loadProgress"));</Command>
<Command>		if (trQuestVarGet("loadProgress") == 10) {</Command>
<Command>			trQuestVarSet("loadProgress", 0);</Command>
<Command>			trQuestVarSet("classProgress", 1 + trQuestVarGet("classProgress"));</Command>
<Command>			if (trQuestVarGet("classProgress") == 3) {</Command>
<Command>				xsDisableRule("data_load_05_load_cards");</Command>
<Command>				xsDisableRule("data_load_06_detect_cards");</Command>
<Command>				xsEnableRule("data_load_07_done");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("loadNext", 1);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule data_load_07_done</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	unitTransform("Swordsman", "Cinematic Block");</Command>
<Command>	trForbidProtounit(1, "Swordsman Hero");</Command>
<Command>	trForbidProtounit(2, "Swordsman Hero");</Command>
<Command>	trLetterBox(false);</Command>
<Command>	trUIFadeToColor(0,0,0,1000,0,false);</Command>
<Command>	trUnblockAllSounds();</Command>
<Command>	trSoundPlayFN("favordump.wav","1",-1,"","");</Command>
<Command>	xsDisableRule("data_load_07_done");</Command>
<Command>	trQuestVarSet("dimension", 6);</Command>
<Command>	xsEnableRule("initializeBoard");</Command>
<Command>}</Command>

<Command>void CinematicReset() {</Command>
<Command>	trQuestVarSet("cinematicStep", 0);</Command>
<Command>	trQuestVarSet("cinematicLength", 0);</Command>
<Command>}</Command>

<Command>void CinematicAdd(string i = "", string s = "") {</Command>
<Command>	trQuestVarSet("cinematicLength", 1 + trQuestVarGet("cinematicLength"));</Command>
<Command>	trStringQuestVarSet("cinematicImage"+1*trQuestVarGet("cinematicLength"), i);</Command>
<Command>	trStringQuestVarSet("cinematicText"+1*trQuestVarGet("cinematicLength"), s);</Command>
<Command>}</Command>

<Command>void CinematicStart(string m = "") {</Command>
<Command>	trMusicPlay(m, "1", 0);</Command>
<Command>	xsEnableRule("Story_Cinematic_Play");</Command>
<Command>}</Command>

<Command>bool ValidateClass(int class = 0){</Command>
<Command>	bool valid = true;</Command>
<Command>	bool hasCardsInDeck = false;</Command>
<Command><![CDATA[	for(i = 30 * class;<30 * (class + 1)){]]></Command>
<Command>		if(getCardCountDeck(i) > 0){</Command>
<Command>			hasCardsInDeck = true;</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("cardsInDeck", trQuestVarGet("cardsInDeck") + getCardCountDeck(i));</Command>
<Command><![CDATA[		if((i == 14 + 30 * class) || (i == 29 + 30 * class)){]]></Command>
<Command>			if(getCardCountDeck(i) + getCardCountCollection(i) > 1){</Command>
<Command>				ChatLog(1, "ERROR! More than 1 copy of Legendary card: " + i);</Command>
<Command>				valid = false;</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			if(getCardCountDeck(i) + getCardCountCollection(i) > 3){</Command>
<Command>				ChatLog(1, "ERROR! More than 3 copies of Common card: " + i);</Command>
<Command>				valid = false;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command><![CDATA[	if(getDeckCommander() == (2 * class) || getDeckCommander() == (2 * class + 1)){]]></Command>
<Command>		trQuestVarSet("commanderClass", class);</Command>
<Command>		trQuestVarSet("class1", class);</Command>
<Command><![CDATA[		if(getClassProgress(class) < 1){]]></Command>
<Command>			ChatLog(1, "ERROR! Deck Commander is from locked class: " + class);</Command>
<Command>			valid = false;</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		if(hasCardsInDeck){</Command>
<Command>			trQuestVarSet("class2", class);</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	if(hasCardsInDeck){</Command>
<Command>		trQuestVarSet("classesInDeck", trQuestVarGet("classesInDeck") + 1);</Command>
<Command><![CDATA[		if(getClassProgress(class) < 1){]]></Command>
<Command>			ChatLog(1, "ERROR! Cards in locked class: " + class);</Command>
<Command>			valid = false;</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	return (valid);</Command>
<Command>}</Command>

<Command>bool ValidateCollection(){</Command>
<Command><![CDATA[	if(getClassProgress(0) <= 0){]]></Command>
<Command>		setDeckCommander(-1);</Command>
<Command>	}</Command>
<Command>	bool valid = true;</Command>
<Command>	trQuestVarSet("class1", -1);</Command>
<Command>	trQuestVarSet("class2", -1);</Command>
<Command>	trQuestVarSet("commanderClass", -1);</Command>
<Command>	trQuestVarSet("cardsInDeck", 0);</Command>
<Command>	trQuestVarSet("classesInDeck", 0);</Command>
<Command><![CDATA[	for(class=0;<6){]]></Command>
<Command>		if(ValidateClass(class) == false){</Command>
<Command>			valid = false;</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command><![CDATA[	if(trQuestVarGet("class2") < 0){]]></Command>
<Command>		trQuestVarSet("class2", trQuestVarGet("class1"));</Command>
<Command>	}</Command>

<Command>	string cardsInDeckColor = "";</Command>
<Command>	if(trQuestVarGet("cardsInDeck") != 40){</Command>
<Command>		ChatLog(1, "ERROR! Not 40 cards in deck! " + 1*trQuestVarGet("cardsInDeck") + "/40");</Command>
<Command>		valid = false;</Command>
<Command><![CDATA[		cardsInDeckColor = "<color={Playercolor(2)}>";]]></Command>
<Command>	}</Command>

<Command>	if(trQuestVarGet("classesInDeck") > 2){</Command>
<Command>		ChatLog(1, "ERROR! More than 2 classes in deck!");</Command>
<Command>		valid = false;</Command>
<Command>	}</Command>

<Command><![CDATA[	if(trQuestVarGet("commanderClass") < 0){]]></Command>
<Command>		ChatLog(1, "ERROR! No Commander in deck!");</Command>
<Command>		valid = false;</Command>
<Command>	}</Command>

<Command><![CDATA[	if(trQuestVarGet("commanderClass") != trQuestVarGet("class1") && trQuestVarGet("commanderClass") != trQuestVarGet("class2")){]]></Command>
<Command>		ChatLog(1, "ERROR! Deck Commander not from one of the two classes!");</Command>
<Command>		valid = false;</Command>
<Command>	}</Command>

<Command>	trCounterAbort("deckCount");</Command>
<Command>	trCounterAddTime("deckCount", -1, -9999999, cardsInDeckColor+"Deck: " + 1*trQuestVarGet("cardsInDeck") + "/40");</Command>

<Command>	return (valid);</Command>
<Command>}</Command>

<Command>void CollectionDeploy(int card = 0, int x = 0, int z = 0, bool cardIsCommander = false){</Command>
<Command>	trQuestVarSet("next", trGetNextUnitScenarioNameNumber());</Command>
<Command>	trArmyDispatch("1,10","Dwarf",1,x,0,z,180,true);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>

<Command>	yAddToDatabase("allUnits", "next");</Command>
<Command>	int proto = CardToProto(card);</Command>
<Command>	int spell = CardToSpell(card);</Command>

<Command>	if(cardIsCommander){</Command>
<Command>		proto = card;</Command>
<Command>		spell = SPELL_COMMANDER;</Command>
<Command>	}</Command>

<Command><![CDATA[	if (spell == 0 || spell == SPELL_COMMANDER) {]]></Command>
<Command>		trUnitChangeName(trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		trUnitChangeProtoUnit(kbGetProtoUnitName(proto));</Command>
<Command>	} else {</Command>
<Command>		trUnitChangeName(trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>		proto = kbGetProtoUnitID("Statue of Lightning");</Command>
<Command>		trUnitChangeProtoUnit("Statue of Lightning");</Command>
<Command>		trSetSelectedScale(0.75, 0.2 + xsSqrt(trQuestVarGet("spell_" + spell + "_cost")) * 0.4, 0.75);</Command>
<Command>		trUnitSetAnimationPath(""+1*trQuestVarGet("spell_"+spell+"_animation") + ",0,0,0,0");</Command>
<Command>	}</Command>

<Command>	yAddUpdateVar("allUnits", "player", 1);</Command>
<Command>	yAddUpdateVar("allUnits", "proto", proto);</Command>
<Command>	yAddUpdateVar("allUnits", "spell", spell);</Command>

<Command>	trModifyProtounit(kbGetProtoUnitName(proto), 1, 1, 9999999999999999999.0);</Command>
<Command>	trModifyProtounit(kbGetProtoUnitName(proto), 1, 1, -9999999999999999999.0);</Command>
<Command>}</Command>

<Command>int CommanderToProtounit(int commander = 0){</Command>
<Command>	switch(commander)</Command>
<Command>	{</Command>
<Command>		case COMMANDER_ROGERS:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Hero Greek Jason"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_VENLESH:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Lancer Hero"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_NANO:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Oracle Hero"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_NOTTUD:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Minotaur"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_REACH:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Royal Guard Hero"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_SCRAGINS:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Archer Atlantean Hero"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_ROXAS:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Arkantos God"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_YEEBAAGOOON:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Pharaoh of Osiris"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_ZENOPHOBIA:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Hoplite"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_ANRAHEIR:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Hero Greek Perseus"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_NICK:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command>		}</Command>
<Command>		case COMMANDER_GOD:</Command>
<Command>		{</Command>
<Command>			return (kbGetProtoUnitID("Caravan Atlantean"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return (commander);</Command>
<Command>	//ThrowError("CommanderToProtounit");</Command>
<Command>}</Command>

<Command>void CollectionCommander(int commander = 0, int x = 0, int z = 0){</Command>
<Command>	CollectionDeploy(CommanderToProtounit(commander), x, z, true);</Command>
<Command>}</Command>

<Command>void CollectionCard(int index = 0, int x = 0, int z = 0) {</Command>
<Command>	int countDeck = getCardCountDeck(index);</Command>
<Command>	int countCollection = getCardCountCollection(index);</Command>
<Command><![CDATA[	for(i=0;<3){]]></Command>
<Command>		if(countDeck > 0){</Command>
<Command>			CollectionDeploy(index, x, z + 44);</Command>
<Command>			countDeck = countDeck - 1;</Command>
<Command>		} else if(countCollection > 0){</Command>
<Command>			CollectionDeploy(index, x, z);</Command>
<Command>			countCollection = countCollection - 1;</Command>
<Command>		}</Command>
<Command><![CDATA[		for(j=0;<6){]]></Command>
<Command><![CDATA[			if(index > 0 && index == trQuestVarGet("packReward" + j)){]]></Command>
<Command>				trUnitHighlight(4.7, true);</Command>
<Command>				trQuestVarSet("packReward" + j, -1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		x = x + 2;</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>string GetMissionTitle(int class = 0, int mission = 0){</Command>
<Command>	switch(class)</Command>
<Command>	{</Command>
<Command>		case CLASS_ADVENTURER:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("Shrubbery Lane");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Standard Procedure");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Carbon-Free Antivirus");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("Swampy Hideout");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("Forest Heart");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("The Real Fight");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_ARCANE:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("Tower Courtyard");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Flammable Fire");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Freezing Frost");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("Elevator");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("Archmage");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("On Top Of The Arcane Tower");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_NAGA:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("Waves");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Underwater");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Reef");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("Bubbles");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("Deep Gate");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("Deep Palace");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_CLOCKWORK:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("The Scrapyard");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Profit Raid");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Sneak Mission");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("A Dastardly Trap");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("Minigames Z");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("The Final Boss?");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_EVIL:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("The Old Lands");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Den of Spiders");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Nightfall");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("Crossing Over");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("The Otherworld");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("Zeno's Paradox");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_SPACE:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					return ("Hoof, Sword and Arrow");</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					return ("Magical Staff");</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					return ("Water Horse");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					return ("Cogs");</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					return ("Nasty Hand");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					return ("Black Star");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	ThrowError("GetMissionTitle");</Command>
<Command>}</Command>

<Command>void SetupClass(int class = 0, int terrainType = 0, int terrainSubType = 0){</Command>
<Command>	int progress = getClassProgress(class);</Command>
<Command>	int x = 0;</Command>
<Command>	int z = 0;</Command>
<Command>	bool doClass = false;</Command>

<Command>	if(progress > 0){</Command>
<Command>		doClass = true;</Command>
<Command>	}</Command>

<Command><![CDATA[	for(i = (30 * class) + 7;<30 * (class + 1)){]]></Command>
<Command><![CDATA[		if(getCardCountCollection(i) > 0 || getCardCountDeck(i) > 0){]]></Command>
<Command>			doClass = true;</Command>
<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	if(doClass){</Command>
<Command>		//ChatLog(1, "Setup Class: " + class + " Progress: " + progress);</Command>
<Command>		trPaintTerrain(10 * class, 0, 10 + 10 * class, 43, 0, 73, false); // CityTileWaterPool</Command>
<Command>		trPaintTerrain(1 + 10 * class, 0, 9 + 10 * class, 20, terrainType, terrainSubType, false);</Command>
<Command>		trPaintTerrain(1 + 10 * class, 22, 9 + 10 * class, 42, terrainType, terrainSubType, false);</Command>
<Command>		x = 3 + 20 * class; z = 37;</Command>
<Command><![CDATA[		for(i = 30 * class;<30 * (class + 1)){]]></Command>
<Command><![CDATA[			if(progress < 1 && i < (30 * class) + 7){]]></Command>
<Command>				continue;</Command>
<Command>			}</Command>
<Command>			if(i == 14 + 30 * class){</Command>
<Command>				CollectionCard(i,9 + 20 * class,35);</Command>
<Command>			} else if(i == 29 + 30 * class){</Command>
<Command>				CollectionCard(i,13 + 20 * class,35);</Command>
<Command>			} else {</Command>
<Command>				CollectionCard(i,x,z);</Command>
<Command>				z = z - 4;</Command>
<Command>				if(i == 9 + 30 * class){</Command>
<Command>					x = 9 + 20 * class; z = 31;</Command>
<Command>				}</Command>
<Command>				if(i == 18 + 30 * class){</Command>
<Command>					x = 15 + 20 * class; z = 37;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if(progress > 0){</Command>
<Command>			z = 41;</Command>
<Command>			if(getDeckCommander() ==  (2 * class)){</Command>
<Command>				trQuestVarSet("currentCommander", trGetNextUnitScenarioNameNumber());</Command>
<Command>				z = z + 44;</Command>
<Command>			}</Command>
<Command>			CollectionCommander(2 * class, 5 + 20 * class, z);</Command>
<Command>			if(progress > 6){</Command>
<Command>				z = 41;</Command>
<Command>				if(getDeckCommander() == (2 * class + 1)){</Command>
<Command>					trQuestVarSet("currentCommander", trGetNextUnitScenarioNameNumber());</Command>
<Command>					z = z + 44;</Command>
<Command>				}</Command>
<Command>				CollectionCommander(2 * class + 1, 17 + 20 * class, z);</Command>
<Command>			}</Command>

<Command>			x = 11 + 20 * class; z = 91;</Command>
<Command><![CDATA[			for(i=1;<=xsMin(progress,6)){]]></Command>
<Command>				trQuestVarSet("class" + class + "Mission" + i, trGetNextUnitScenarioNameNumber());</Command>
<Command>				trArmyDispatch("1,10", "Dwarf", 1, x, 0, z, 180, true);</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeName(GetMissionTitle(class,i));</Command>
<Command>				trUnitChangeProtoUnit("Outpost");</Command>
<Command>				trSetSelectedScale(1.0, 0.3, 1.0);</Command>
<Command>				yAddToDatabase("allUnits", "class" + class + "Mission" + i);</Command>
<Command>				yAddUpdateVar("allUnits", "proto", kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>				z = z + 4;</Command>
<Command>			}</Command>
<Command><![CDATA[			if(progress < 7){]]></Command>
<Command>				trArmyDispatch("1,10", "Dwarf", 1, 0, 0, 0, 180, true);</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeProtoUnit("Garrison Flag Sky Passage");</Command>
<Command>				trUnitTeleport(x,0,z - 4);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>string collectionReward = "";</Command>

<Command>void CollectionGodPowers(){</Command>
<Command>	trCounterAbort("tooltipSpace");</Command>
<Command>	trCounterAbort("tooltipEnter");</Command>
<Command>	trCounterAbort("mission");</Command>
<Command>	trCounterAbort("reward");</Command>
<Command>	if(collectionMission != ""){</Command>
<Command>		trCounterAddTime("mission", -1, -9999999, collectionMission);</Command>
<Command>	}</Command>
<Command>	if(collectionReward != ""){</Command>
<Command>		trCounterAddTime("reward", -1, -9999999, collectionReward);</Command>
<Command>	}</Command>
<Command>	trPlayerKillAllGodPowers(1);</Command>
<Command>	trTechGodPower(1, "animal magnetism", 1);</Command>
<Command>	trTechGodPower(1, "create gold", 1);</Command>
<Command>	if(trQuestVarGet("canPressSpace") == 1){</Command>
<Command>		trTechGodPower(1, "rain", 1);</Command>
<Command>		if(trQuestVarGet("canPressEnter") == 1){</Command>
<Command>			trCounterAddTime("tooltipEnter", -1, -9999999, "(Press ENTER to start mission)");</Command>
<Command>			trTechGodPower(1, "nidhogg", 1);</Command>
<Command>		} else {</Command>
<Command>			xsDisableRule("CollectionEnter");</Command>
<Command>		}</Command>
<Command>		trCounterAddTime("tooltipSpace", -1, -9999999, "(Press SPACE to save deck and QUIT)");</Command>
<Command>	} else {</Command>
<Command>		xsDisableRule("CollectionSpace");</Command>
<Command>		xsDisableRule("CollectionEnter");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule Collection</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trCameraCut(vector(-58.161659,112.294716,-58.161659),vector(0.500000,-0.707107,0.500000),vector(0.500000,0.707107,0.500000),vector(0.707107,0.000000,-0.707107));</Command>
<Command>	xsEnableRule("CollectionClick");</Command>
<Command>	trSetFogAndBlackmap(false, false);</Command>
<Command>	unitTransform("Statue of Automaton Base","Victory Marker");</Command>
<Command>	trPaintTerrain(0, 0, 60, 60, 5, 4, false); //Black</Command>
<Command>	// trChatHistoryClear();</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>	}</Command>
<Command>	yClearDatabase("allUnits");</Command>
<Command>	trQuestVarSet("activePlayer", 1);</Command>
<Command>	trQuestVarSet("idsStart", trGetNextUnitScenarioNameNumber());</Command>
<Command>	collectionMission = "";</Command>
<Command>	collectionReward = "";</Command>
<Command>	trQuestVarSet("missionSelection", -1);</Command>
<Command>	trQuestVarSet("missionClass", -1);</Command>
<Command>	trQuestVarSet("canPressEnter", -1);</Command>
<Command>	ValidateCollection();</Command>
<Command>	if(true){</Command>
<Command>		trUIFadeToColor(0,0,0,1000,0,false);</Command>
<Command>		xsEnableRule("CollectionSpace");</Command>
<Command>		trCounterAddTime("tooltipSpace", -1, -9999999, "(Press SPACE to save deck and QUIT)");</Command>
<Command>		trQuestVarSet("canPressSpace", 1);</Command>
<Command><![CDATA[		if(getClassProgress(CLASS_ADVENTURER) == 1 && getClassProgress(CLASS_ARCANE) == 1){]]></Command>
<Command>			CinematicReset();</Command>
<Command>			CinematicAdd("icons\improvement architects icon 64", "This is your Collection and Deck. Right Click a Card to move it between the two.");</Command>
<Command>			CinematicAdd("icons\improvement architects icon 64", "Your Deck must have a Commander and 40 Cards from one or two Classes.");</Command>
<Command>			CinematicAdd("icons\improvement architects icon 64", "The Deck you make will be used for Story Missions as well as PvP when playing Multiplayer.");</Command>
<Command>			CinematicAdd("icons\building outpost icon 64", "The Story Missions are Outposts. They reward packs containing Class Cards.");</Command>
<Command>			CinematicAdd("icons\building outpost icon 64", "After beating a Mission you can replay it on Hardmode for packs containing Random Cards.");</Command>
<Command>			CinematicAdd("icons\building outpost icon 64", "After completing a Class Story you will unlock the second Commander for that Class.");</Command>
<Command>			CinematicAdd("icons\improvement rheias gift icons 64", "Complete your first Class Story to unlock the other Classes.");</Command>
<Command>			CinematicStart();</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trLetterBox(true);</Command>
<Command>		trUIFadeToColor(0,0,0,0,0,true);</Command>
<Command>		trOverlayTextColour(255, 0, 255);</Command>
<Command>		trOverlayText("Collection Invalid! Fuck off cheater!", 4.7, 500, 200, 1000);</Command>
<Command>		trSoundPlayFN("default","1",-1," :Alternatively, this is a bug in which case we apologise and kindly ask you to report it.","");</Command>
<Command>		trSoundPlayFN("xpack\xtaunts\en\999 theme.mp3", "1", -1, "","");</Command>
<Command>		trMusicPlay("xpack\xtaunts\en\999 theme.mp3", "1", 0.0);</Command>
<Command><![CDATA[		for(x=0; <16) {]]></Command>
<Command>			trSetCurrentScenarioUserData(x, 0);</Command>
<Command>		}</Command>
<Command>		xsEnableRule("EjectButton");</Command>
<Command>	}</Command>
<Command>	CollectionGodPowers();</Command>

<Command>	SetupClass(CLASS_ADVENTURER, 0, 65); // GreekRoadA</Command>
<Command>	SetupClass(CLASS_ARCANE, 5, 2); // IceC</Command>
<Command>	SetupClass(CLASS_NAGA, 3, 10); // coralB</Command>
<Command>	SetupClass(CLASS_CLOCKWORK, 0, 71); // CityTileAtlantis</Command>
<Command>	SetupClass(CLASS_EVIL, 0, 84); // Hadesbuildable1</Command>
<Command>	SetupClass(CLASS_SPACE, 0, 52); // OlympusC</Command>

<Command>	xsDisableRule("Collection");</Command>
<Command>}</Command>

<Command>rule CollectionClick</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	switch(1*trQuestVarGet("p1click"))</Command>
<Command>	{</Command>
<Command>		case LEFT_CLICK:</Command>
<Command>		{</Command>
<Command>			uiClearSelection();</Command>
<Command>			trQuestVarSet("p1click", 0);</Command>
<Command>			trClearCounterDisplay();</Command>
<Command>			trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>			CollectionGodPowers();</Command>
<Command>			trQuestVarSet("selectionTryAgain", 0);</Command>
<Command>			xsDisableRule("CollectionSelect");</Command>
<Command>			trDelayedRuleActivation("CollectionSelect");</Command>
<Command>		}</Command>
<Command>		case RIGHT_CLICK:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p1click", 0);</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				int id = yDatabaseNext("allUnits", true);</Command>
<Command>				float dist = trDistanceToVectorSquared("allUnits","p1clickPos");</Command>
<Command><![CDATA[				if(dist < 4){]]></Command>
<Command>					trVectorSetUnitPos("temp","allUnits");</Command>
<Command>					if(1*yGetVar("allUnits", "spell") == SPELL_COMMANDER){</Command>
<Command><![CDATA[						if(trVectorQuestVarGetZ("temp") < 44){]]></Command>
<Command>							trUnitTeleport(trVectorQuestVarGetX("temp"),trVectorQuestVarGetY("temp"),trVectorQuestVarGetZ("temp") + 44);</Command>
<Command><![CDATA[							for(y=0; <12) {]]></Command>
<Command>								if(kbGetUnitBaseTypeID(id) == CommanderToProtounit(y)){</Command>
<Command>									setDeckCommander(y);</Command>
<Command>									trQuestVarSet("class1", -1);</Command>
<Command>									trQuestVarSet("class2", -1);</Command>
<Command>									break;</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>							trVectorSetUnitPos("temp","currentCommander");</Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("currentCommander"), true);</Command>
<Command>							trUnitTeleport(trVectorQuestVarGetX("temp"),trVectorQuestVarGetY("temp"),trVectorQuestVarGetZ("temp") - 44);</Command>
<Command>							trQuestVarSet("currentCommander", trQuestVarGet("allUnits"));</Command>
<Command>							ChatLog(1, "Commander chosen");</Command>
<Command>						} else {</Command>
<Command>							ChatLog(1, "Deck must have a Commander");</Command>
<Command>						}</Command>
<Command>					} else {</Command>
<Command>						int card = 0;</Command>
<Command>						string name = "";</Command>
<Command>						if(1*yGetVar("allUnits", "spell") == 0){</Command>
<Command>							card = ProtoToCard(kbGetUnitBaseTypeID(id));</Command>
<Command>							name = trStringQuestVarGet("card_"+kbGetUnitBaseTypeID(id)+"_Name");</Command>
<Command>						} else {</Command>
<Command>							card = SpellToCard(1*yGetVar("allUnits", "spell"));</Command>
<Command>							name = trStringQuestVarGet("spell_"+1*yGetVar("allUnits", "spell")+"_Name");</Command>
<Command>						}</Command>

<Command><![CDATA[						if(trVectorQuestVarGetZ("temp") < 44){]]></Command>
<Command>							trUnitTeleport(trVectorQuestVarGetX("temp"),trVectorQuestVarGetY("temp"),trVectorQuestVarGetZ("temp") + 44);</Command>
<Command>							setCardCountDeck(card, getCardCountDeck(card) + 1);</Command>
<Command>							ChatLog(1, name + " added to deck");</Command>
<Command>						} else {</Command>
<Command>							trUnitTeleport(trVectorQuestVarGetX("temp"),trVectorQuestVarGetY("temp"),trVectorQuestVarGetZ("temp") - 44);</Command>
<Command>							setCardCountDeck(card, getCardCountDeck(card) - 1);</Command>
<Command>							ChatLog(1, name + " removed from deck");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(ValidateCollection()){</Command>
<Command>						xsEnableRule("CollectionSpace");</Command>
<Command>						trQuestVarSet("canPressSpace", 1);</Command>
<Command>					} else {</Command>
<Command>						xsDisableRule("CollectionSpace");</Command>
<Command>						trQuestVarSet("canPressSpace", 0);</Command>
<Command>					}</Command>
<Command>					CollectionGodPowers();</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CollectionSelect</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTimeMS()-(cActivationTime*1000)) > 470){</Command>
<Command>		bool nothing = true;</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			int id = yDatabaseNext("allUnits", true);</Command>
<Command>			//trUnitHighlight(1.0, false);</Command>
<Command>			if (trUnitIsSelected()) {</Command>
<Command>				trVectorSetUnitPos("temp","allUnits");</Command>
<Command><![CDATA[				if(trVectorQuestVarGetZ("temp") < 90){]]></Command>
<Command>					displayCardDetails(kbGetUnitBaseTypeID(id), 1*yGetVar("allUnits", "spell"));</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("canPressEnter", 0);</Command>
<Command>					collectionMission = "";</Command>
<Command>					collectionReward = "";</Command>
<Command><![CDATA[					for(class=0;<6){]]></Command>
<Command><![CDATA[						for(i=1;<=xsMin(getClassProgress(class),6)){]]></Command>
<Command><![CDATA[							if(trDistanceToVector("class" + class + "Mission" + i,"temp") < 2){]]></Command>
<Command>								int cards = 2 + i;</Command>
<Command>								if(getClassProgress(class) == i){</Command>
<Command>									trQuestVarSet("missionHardmode", 0);</Command>
<Command>									collectionMission = GetMissionTitle(class,i);</Command>
<Command>									collectionReward = "Reward: " + cards + " Class Cards";</Command>
<Command>								} else {</Command>
<Command>									trQuestVarSet("missionHardmode", 1);</Command>
<Command>									collectionMission = GetMissionTitle(class,i) + " (HARDMODE)";</Command>
<Command>									collectionReward = "Reward: " + cards + " Random Cards";</Command>
<Command>								}</Command>
<Command>								trQuestVarSet("missionSelection", i);</Command>
<Command>								trQuestVarSet("missionClass", class);</Command>
<Command>								xsEnableRule("CollectionEnter");</Command>
<Command>								trQuestVarSet("canPressEnter", 1);</Command>
<Command>								CollectionGodPowers();</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				nothing = false;</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsDisableRule("CollectionSelect");</Command>
<Command><![CDATA[		if(nothing && trQuestVarGet("selectionTryAgain") < 3){]]></Command>
<Command>			trQuestVarSet("selectionTryAgain", trQuestVarGet("selectionTryAgain") + 1);</Command>
<Command>			trDelayedRuleActivation("CollectionSelect");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CollectionEnter</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trPlayerUnitCountSpecific(1, "Nidhogg") > 0) {</Command>
<Command>		if (yFindLatestReverse("nidhoggNext", "Nidhogg", 1) > 0) {</Command>
<Command>			if(true){</Command>
<Command>				trUnitDestroy();</Command>
<Command>				uiClearSelection();</Command>
<Command>				trPlayerKillAllGodPowers(1);</Command>
<Command>				trCounterAbort("tooltipEnter");</Command>
<Command>				xsDisableRule("CollectionEnter");</Command>
<Command>				trClearCounterDisplay();</Command>
<Command>				trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>				trCounterAbort("deckCount");</Command>
<Command>				trCounterAbort("mission");</Command>
<Command>				trCounterAbort("reward");</Command>
<Command>				xsDisableRule("CollectionClick");</Command>
<Command>				xsDisableRule("CollectionSpace");</Command>
<Command>				ChatLog(1, "Starting Mission: " + GetMissionTitle(trQuestVarGet("missionClass"),trQuestVarGet("missionSelection")));</Command>
<Command>				trCounterAbort("tooltipSpace");</Command>
<Command>				dataSave();</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					string protoname = kbGetProtoUnitName(yGetVar("allUnits", "proto"));</Command>
<Command>					if(protoname != "Cinematic Block"){</Command>
<Command>						trModifyProtounit(protoname, 1, 1, 9999999999999999999.0);</Command>
<Command>						trModifyProtounit(protoname, 1, 1, -9999999999999999999.0);</Command>
<Command>						trModifyProtounit(protoname, 1, 1, 10);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				yClearDatabase("allUnits");</Command>
<Command>				int next = trGetNextUnitScenarioNameNumber();</Command>
<Command><![CDATA[				for(i=trQuestVarGet("idsStart");<next){]]></Command>
<Command>					trUnitSelectClear();trUnitSelect(""+i);</Command>
<Command>					trUnitDestroy();</Command>
<Command>				}</Command>
<Command>				xsEnableRule("MissionBegin");</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			ThrowError();</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CollectionSpace</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trCheckGPActive("rain", 1)) {</Command>
<Command>		if (trQuestVarGet("p1rain") == 0) {</Command>
<Command>			trQuestVarSet("p1rain", 1);</Command>
<Command>			// trChatHistoryClear();</Command>
<Command>			dataSave();</Command>
<Command>			map("mouse1down", "game", "");</Command>
<Command>			map("mouse2up", "game", "");</Command>
<Command>			map("space", "game", "");</Command>
<Command>			map("enter", "game", "gadgetReal(\"chatInput\") uiIgnoreNextKey");</Command>
<Command>			trModeEnter("Pregame");</Command>
<Command>		}</Command>
<Command>	} else if (trQuestVarGet("p1rain") == 1) {</Command>
<Command>		trTechGodPower(1, "rain", 1);</Command>
<Command>		trQuestVarSet("p1rain", 0);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CollectionTutorial</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		trShowImageDialog("icons\improvement architects icon 64", "This is your Collection and Deck. Right Click a card to move it between the two.");</Command>
<Command>		trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule EjectButton</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 5){</Command>
<Command>		exit(false);</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void deathSummonQueue(int tile = 0, int p = 0, string proto = "") {</Command>
<Command>	int push = modularCounterNext("deathSummonPush");</Command>
<Command>	trQuestVarSet("deathSummon"+push+"proto", kbGetProtoUnitID(proto));</Command>
<Command>	trQuestVarSet("deathSummon"+push+"player", p);</Command>
<Command>	trQuestVarSet("deathSummon"+push+"tile", tile);</Command>
<Command>}</Command>

<Command>bool OnDeath(int event = -1, int unit = 0){</Command>
<Command>	int p = mGetVar(unit, "player");</Command>
<Command>	int count = 0;</Command>
<Command>	int target = 0;</Command>
<Command>	int tile = 0;</Command>
<Command>	int proto = 0;</Command>
<Command>	bool checkAgain = false;</Command>
<Command>	switch(event)</Command>
<Command>	{</Command>
<Command>		case DEATH_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case DEATH_OPPONENT_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(3-p);</Command>
<Command>		}</Command>
<Command>		case DEATH_EGG:</Command>
<Command>		{</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, "Phoenix Egg");</Command>
<Command>		}</Command>
<Command>		case DEATH_GET_ARCANE:</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("spellChosen", SPELL_SPARK, SPELL_APOCALYPSE, true);</Command>
<Command>			generateCard(p, 0, 1*trQuestVarGet("spellChosen"));</Command>
<Command>		}</Command>
<Command>		case DEATH_SUMMON_ZOMBIE:</Command>
<Command>		{</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, "Minion");</Command>
<Command>		}</Command>
<Command>		case DEATH_SUMMON_SHADOW:</Command>
<Command>		{</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, "Shade of Hades");</Command>
<Command>		}</Command>
<Command>		case DEATH_GET_SCRAP:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>				addCardToHand(p, 0, SPELL_SCRAP_METAL);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case DEATH_POISON_MIST:</Command>
<Command>		{</Command>
<Command><![CDATA[			for(x=0; < zGetVarByIndex("tiles", "neighborCount", 1*mGetVar(unit, "tile"))) {]]></Command>
<Command>				tile = zGetVarByIndex("tiles", "neighbor"+x, 1*mGetVar(unit, "tile"));</Command>
<Command>				target = zGetVarByIndex("tiles", "occupant", tile);</Command>
<Command>				if (target > 0) {</Command>
<Command>					if (mGetVar(target, "spell") == SPELL_NONE) {</Command>
<Command>						mSetVar(target, "keywords", SetBit(1*mGetVar(target, "keywords"), DECAY));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+target);</Command>
<Command>						spyEffect("Poison SFX");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			deployAtTile(0, "Lampades Blood", 1*mGetVar(unit, "tile"));</Command>
<Command>			trSoundPlayFN("lampadesblood.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("carnivorabirth.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case DEATH_DARKNESS_RETURNS:</Command>
<Command>		{</Command>
<Command>			addCardToDeck(p, "Guardian");</Command>
<Command>			trSoundPlayFN("cinematics\32_out\kronosbehinddorrshort.mp3","1",-1,"","");</Command>
<Command>			deployAtTile(0, "Kronny Birth SFX", 1*mGetVar(unit, "tile"));</Command>
<Command>		}</Command>
<Command>		case DEATH_GET_ATTACK:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"yeebBonus", 1 + trQuestVarGet("p"+p+"yeebBonus"));</Command>
<Command>			mSetVarByQV("p"+p+"commander", "attack", 1 + mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>			deployAtTile(0, "Hero Birth", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>		}</Command>
<Command>		case DEATH_BOOM_SMALL:</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Meteor Impact Ground", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+unit));</Command>
<Command>			for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (trQuestVarGet("allUnits") == unit) {</Command>
<Command>					continue;</Command>
<Command><![CDATA[				} else if (trDistanceToVectorSquared("allUnits", "pos") < 40) {]]></Command>
<Command>					startAttack(unit, 1*trQuestVarGet("allUnits"), false, false);</Command>
<Command>					checkAgain = true;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("meteorsmallhit.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case DEATH_SUMMON_RANDOM:</Command>
<Command>		{</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>				proto = yDatabaseNext("p"+p+"deck");</Command>
<Command>				if (yGetVar("p"+p+"deck", "spell") == SPELL_NONE) {</Command>
<Command>					yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, kbGetProtoUnitName(proto));</Command>
<Command>		}</Command>
<Command>		case DEATH_SUMMON_BEETLE:</Command>
<Command>		{</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, "Scarab");</Command>
<Command>			trQuestVarSetFromRand("sound", 1, 2, true);</Command>
<Command>			trSoundPlayFN("spiders"+1*trQuestVarGet("sound")+".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case DEATH_DAMAGE_ENEMY:</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("p"+(3-p)+"commander", "tile"));</Command>
<Command>			damageUnit(1*trQuestVarGet("p"+(3-p)+"commander"), 2);</Command>
<Command>		}</Command>
<Command>		case DEATH_REDUCE_COST:</Command>
<Command>		{</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand");</Command>
<Command>				mSetVarByQV("p"+p+"hand", "cost", mGetVarByQV("p"+p+"hand", "cost") - 1);</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("flamingweapons.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return (checkAgain);</Command>
<Command>}</Command>

<Command>void removeDeadUnits() {</Command>
<Command>	bool checkAgain = false;</Command>
<Command>	int pointer = 0;</Command>
<Command>	int p = 0;</Command>
<Command>	checkAgain = false;</Command>
<Command>	for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command><![CDATA[		if (mGetVarByQV("allUnits", "health") <= 0 && mGetVarByQV("allUnits", "OnDeath") > 0) {]]></Command>
<Command>			pointer = yGetPointer("allUnits");</Command>
<Command>			int events = 1*mGetVarByQV("allUnits", "OnDeath");</Command>
<Command>			mSetVarByQV("allUnits", "OnDeath", 0);</Command>
<Command>			int n = 1*xsPow(2, DEATH_EVENT_COUNT - 1);</Command>
<Command>			for(x=DEATH_EVENT_COUNT - 1; >=0) {</Command>
<Command>				if (events >= n) {</Command>
<Command><![CDATA[					checkAgain = OnDeath(x, 1*trQuestVarGet("allUnits")) || checkAgain;]]></Command>
<Command>					events = events - n;</Command>
<Command>				}</Command>
<Command>				n = n / 2;</Command>
<Command>			}</Command>
<Command>			ySetPointer("allUnits", pointer);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if (checkAgain) {</Command>
<Command>		xsEnableRule("chain_reaction_death");</Command>
<Command>		trQuestVarSet("chainReactionDeath", 1);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("chainReactionDeath", 0);</Command>
<Command>	}</Command>

<Command>	trQuestVarSet("p1deathCount", 0);</Command>
<Command>	trQuestVarSet("p2deathCount", 0);</Command>
<Command>	int proto = 0;</Command>
<Command>	for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command>		if (trQuestVarGet("allUnits") >= 128) {</Command>
<Command>			ThrowError("removeDeadUnits() - Invalid unit! " + 1*trQuestVarGet("allUnits"));</Command>
<Command>		}</Command>
<Command><![CDATA[		if (mGetVarByQV("allUnits", "health") <= 0) {]]></Command>
<Command>			proto = mGetVarByQV("allUnits", "proto");</Command>
<Command><![CDATA[			if ((kbProtoUnitIsUnitType(proto, 937)) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Lampades")) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Carcinos")) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Scarab")) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Arkantos God")) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Eitri")) ||]]></Command>
<Command><![CDATA[				(proto == kbGetProtoUnitID("Ape of Set")) ||]]></Command>
<Command>				(proto == kbGetProtoUnitID("Spider Egg"))) {</Command>
<Command>				trDamageUnitPercent(-100);</Command>
<Command>				trUnitChangeProtoUnit("Spy Eye");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>				trMutateSelected(1*mGetVarByQV("allUnits", "proto"));</Command>
<Command>				trUnitOverrideAnimation(6, 0, false, true, -1);</Command>
<Command>			} else {</Command>
<Command>				trUnitDelete(false);</Command>
<Command>			}</Command>

<Command>			int tile = mGetVarByQV("allUnits", "tile");</Command>
<Command>			zSetVarByIndex("tiles", "occupant", tile, 0);</Command>
<Command>			if (HasKeyword(GUARD, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>				tileGuard(tile, false);</Command>
<Command>			}</Command>
<Command>			p = mGetVarByQV("allUnits", "player");</Command>
<Command>			trQuestVarSet("p"+p+"deathCount", 1 + trQuestVarGet("p"+p+"deathCount"));</Command>
<Command>			mSetVarByQV("allUnits", "stunSFX", 0);</Command>
<Command>			yRemoveFromDatabase("allUnits");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	for (x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		switch(1*mGetVarByQV("allUnits", "proto"))</Command>
<Command>		{</Command>
<Command>			case kbGetProtoUnitID("Einheriar"):</Command>
<Command>			{</Command>
<Command>				p = mGetVarByQV("allUnits","player");</Command>
<Command>				if (trQuestVarGet("p"+p+"deathCount") > 0) {</Command>
<Command>					mSetVarByQV("allUnits", "attack", trQuestVarGet("p"+p+"deathCount") + mGetVarByQV("allUnits", "attack"));</Command>
<Command>					mSetVarByQV("allUnits", "health", trQuestVarGet("p"+p+"deathCount") + mGetVarByQV("allUnits", "health"));</Command>
<Command>					mSetVarByQV("allUnits", "scale", 0.25*trQuestVarGet("p"+p+"deathCount") + mGetVarByQV("allUnits", "scale"));</Command>
<Command>					scaleUnit(1*trQuestVarGet("allUnits"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	for(p=2; >0) {</Command>
<Command>		if (trQuestVarGet("p"+p+"commanderType") == COMMANDER_ANRAHEIR) {</Command>
<Command>			trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") + trQuestVarGet("p"+p+"deathCount"));</Command>
<Command>			updateHandPlayable(p);</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	int pop = 0;</Command>
<Command>	int unit = 0;</Command>
<Command>	while ((trQuestVarGet("deathSummonPush") == trQuestVarGet("deathSummonPop")) == false) {</Command>
<Command>		pop = modularCounterNext("deathSummonPop");</Command>
<Command>		if (zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("deathSummon"+pop+"tile")) == 0) {</Command>
<Command>			unit = summonAtTile(1*trQuestVarGet("deathSummon"+pop+"tile"),</Command>
<Command>				1*trQuestVarGet("deathSummon"+pop+"player"),</Command>
<Command>				1*trQuestVarGet("deathSummon"+pop+"proto"));</Command>
<Command>			if (HasKeyword(CHARGE, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>				mSetVar(unit, "action", ACTION_READY);</Command>
<Command>			} else {</Command>
<Command>				mSetVar(unit, "action", ACTION_SLEEPING);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	updateAuras();</Command>

<Command><![CDATA[	if (mGetVarByQV("p1commander", "health") <= 0) {]]></Command>
<Command>		trQuestVarSet("p1defeated", 1);</Command>
<Command>		xsEnableRule("match_end");</Command>
<Command>	}</Command>
<Command><![CDATA[	if (mGetVarByQV("p2commander", "health") <= 0) {]]></Command>
<Command>		trQuestVarSet("p2defeated", 1);</Command>
<Command>		xsEnableRule("match_end");</Command>
<Command>	}</Command>
<Command>}</Command>



<Command>void returnToHand(int unit = 0) {</Command>
<Command>	int p = mGetVar(unit, "player");</Command>
<Command>	int proto = mGetVar(unit, "proto");</Command>
<Command>	zSetVarByIndex("tiles", "occupant", 1*mGetVar(unit, "tile"), 0);</Command>
<Command>	if (HasKeyword(GUARD, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		tileGuard(1*mGetVar(unit, "tile"), false);</Command>
<Command>	}</Command>
<Command>	deployAtTile(0, "Vortex Start linked", 1*mGetVar(unit, "tile"));</Command>
<Command><![CDATA[	if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>		ChatLog(p, trStringQuestVarGet("card_" + proto + "_Name") + " returned to hand.");</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			if (yDatabaseNext("allUnits") == unit) {</Command>
<Command>				yRemoveFromDatabase("allUnits");</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trSoundPlayFN("hitpointsmax.wav","1",-1,"","");</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+unit);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>		mSetVar(unit, "played", 0);</Command>
<Command>		addCardToHand(p, proto, 0, false);</Command>
<Command>		updateAuras();</Command>
<Command>		updateHandPlayable();</Command>
<Command>	} else {</Command>
<Command>		trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>		ChatLog(p, "Hand full! Burned " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		mSetVar(unit, "health", 0);</Command>
<Command>		damageUnit(unit, 999);</Command>
<Command>		removeDeadUnits();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule chain_reaction_death</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if ((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + yGetDatabaseCount("pushes") == 0) && (trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop"))) {]]></Command>
<Command>		xsDisableSelf();</Command>
<Command>		removeDeadUnits();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>const int CAST_UNIT = 0;</Command>
<Command>const int CAST_TARGET = 1;</Command>
<Command>const int CAST_SING = 2;</Command>
<Command>const int CAST_BACKSTAB = 3;</Command>
<Command>const int CAST_CONVERT = 4;</Command>
<Command>const int CAST_MAGNETIZE = 5;</Command>
<Command>const int CAST_ADJACENT_UNIT = 6;</Command>
<Command>const int CAST_MIRROR_REFLECTION = 7;</Command>

<Command>const int CAST_TILE = 10;</Command>
<Command>const int CAST_ADJACENT_TILE = 11;</Command>
<Command>const int CAST_DIRECTION = 12;</Command>
<Command>const int CAST_SUMMON_LOCATIONS = 13;</Command>

<Command>const int CASTING_NOTHING = 0;</Command>
<Command>const int CASTING_IN_PROGRESS = 1;</Command>
<Command>const int CASTING_DONE = 2;</Command>
<Command>const int CASTING_CANCEL = 3;</Command>


<Command>void castReset() {</Command>
<Command>	trQuestVarSet("castPush", 0);</Command>
<Command>	trQuestVarSet("castPop", 0);</Command>
<Command>	trQuestVarSet("castDone", CASTING_NOTHING);</Command>
<Command>}</Command>


<Command>void castAddUnit(string qv = "", int p = 0, bool commander = true) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	if (commander) {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_COMMANDER);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_NONE);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("cast"+x+"type", CAST_UNIT);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddBackstabUnit(string qv = "", int p = 0) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>


<Command>	trQuestVarSet("cast"+x+"type", CAST_BACKSTAB);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddSing(string qv = "", int p = 0) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_SING);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddConvertUnit(string qv = "", int p = 0) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>


<Command>	trQuestVarSet("cast"+x+"type", CAST_CONVERT);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddAdjacentUnit(string qv = "", int p = 0, string src = "", bool commander = true) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	if (commander) {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_COMMANDER);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_NONE);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("cast"+x+"type", CAST_ADJACENT_UNIT);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trQuestVarSet("cast"+x+"unit", 1*trQuestVarGet(src));</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddMirrorReflectionUnit(string qv = "", int p = 0) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>
<Command>	trQuestVarSet("cast"+x+"commander", SPELL_NONE);</Command>
<Command>	trQuestVarSet("cast"+x+"type", CAST_MIRROR_REFLECTION);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddTile(string qv = "", bool ghost = false) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_TILE);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>	if (ghost) {</Command>
<Command>		trQuestVarSet("cast"+x+"terrain", 0);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"terrain", 1);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void castAddSummonLocations(string qv = "") {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_SUMMON_LOCATIONS);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddAdjacentTile(string qv = "", string src = "") {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_ADJACENT_TILE);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>	trQuestVarSet("cast"+x+"unit", 1*trQuestVarGet(src));</Command>

<Command>}</Command>

<Command>void castAddTarget(string qv = "", string attacker = "") {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_TARGET);</Command>
<Command>	trStringQuestVarSet("cast"+x+"start", attacker);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddDirection(string qv = "", string start = "", bool unit = false) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_DIRECTION);</Command>
<Command>	if (unit) {</Command>
<Command>		trQuestVarSet("cast"+x+"unit", 1);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"unit", 0);</Command>
<Command>	}</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>	trStringQuestVarSet("cast"+x+"start", start);</Command>
<Command>}</Command>

<Command>void castAddMagnetize(string qv = "", string unit = "") {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_MAGNETIZE);</Command>
<Command>	trStringQuestVarSet("cast"+x+"start", unit);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castInstructions(string inst = "") {</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>
<Command>	trStringQuestVarSet("cast"+x+"instructions", inst);</Command>
<Command>}</Command>

<Command>void castStart() {</Command>
<Command>	trQuestVarSet("castDone", CASTING_IN_PROGRESS);</Command>
<Command>	xsEnableRule("spellcast_00_process");</Command>
<Command>}</Command>

<Command>void castRestoreWard() {</Command>
<Command>	for(x=yGetDatabaseCount("wardUnits"); >0) {</Command>
<Command>		yDatabaseNext("wardUnits");</Command>
<Command>		yAddToDatabase("allUnits", "wardUnits");</Command>
<Command>	}</Command>
<Command>	yClearDatabase("wardUnits");</Command>
<Command>}</Command>

<Command>void castEnd() {</Command>
<Command>	castRestoreWard();</Command>
<Command>	removeDeadUnits();</Command>
<Command>	updateAuras();</Command>
<Command>	xsEnableRule("gameplay_01_select");</Command>
<Command>	highlightReady(999999);</Command>
<Command>	int cost = 0;</Command>

<Command>	if (trQuestVarGet("selectedCard") >= 0) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int unit = yGetUnitAtIndex("p"+p+"hand", 1*trQuestVarGet("selectedCard"));</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+unit);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>		mSetVar(unit, "played", 0);</Command>
<Command>		cost = mGetVar(unit, "cost") - trQuestVarGet("p"+p+"spellDiscount");</Command>
<Command>		if (HasKeyword(OVERFLOW, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>			cost = cost - trQuestVarGet("p"+p+"manaflow");</Command>
<Command>		}</Command>
<Command><![CDATA[		if (1*mGetVar(unit, "echo") <= 0 && (HasKeyword(REPEATABLE, 1*mGetVar(unit, "keywords")) || trCountUnitsInArea("128",p,"Hero Greek Heracles",45) > 0)) {]]></Command>
<Command>			generateCard(p, 0, 1*mGetVar(unit, "spell"), true);</Command>
<Command>			if(HasKeyword(FLEETING, 1*mGetVarByQV("next", "keywords"))){</Command>
<Command>				mSetVarByQV("next", "echo", 1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		if (trQuestVarGet("p"+p+"commanderType") == COMMANDER_REACH) {</Command>
<Command>			trQuestVarSet("p"+p+"extraManaflow", cost + trQuestVarGet("p"+p+"extraManaflow"));</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") - xsMax(0, cost));</Command>
<Command>		updateMana();</Command>
<Command>		ySetPointer("p"+p+"hand", 1*trQuestVarGet("selectedCard"));</Command>
<Command>		zSetVarByIndex("p"+p+"handPos", "occupied", 1*yGetVar("p"+p+"hand", "pos"), 0);</Command>
<Command>		yRemoveFromDatabase("p"+p+"hand");</Command>

<Command>		updateHandPlayable(p);</Command>

<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits", true);</Command>
<Command>			if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>				switch(1*mGetVarByQV("allUnits", "proto"))</Command>
<Command>				{</Command>
<Command>					case kbGetProtoUnitID("Swordsman Hero"):</Command>
<Command>					{</Command>
<Command>						spyEffect("Einheriar Boost SFX");</Command>
<Command>						mSetVarByQV("allUnits", "attack", 1 + mGetVarByQV("allUnits", "attack"));</Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>					case kbGetProtoUnitID("Petsuchos"):</Command>
<Command>					{</Command>
<Command>						spyEffect("Einheriar Boost SFX");</Command>
<Command>						mSetVarByQV("allUnits", "attack", 2 + mGetVarByQV("allUnits", "attack"));</Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>					case kbGetProtoUnitID("Hero Greek Bellerophon"):</Command>
<Command>					{</Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "action") < ACTION_SLEEPING) {]]></Command>
<Command>							mSetVarByQV("allUnits", "action", ACTION_READY);</Command>
<Command>							deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					case kbGetProtoUnitID("Pharaoh of Osiris"):</Command>
<Command>					{</Command>
<Command>						mSetVarByQV("allUnits", "attack", 1 + mGetVarByQV("allUnits", "attack"));</Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						trQuestVarSet("p"+p+"yeebbonus", 1 + trQuestVarGet("p"+p+"yeebbonus"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("castDone", CASTING_NOTHING);</Command>
<Command>}</Command>


<Command>rule spellcast_00_process</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("castPop") < trQuestVarGet("castPush")) {]]></Command>
<Command>		trQuestVarSet("castPop", trQuestVarGet("castPop") + 1);</Command>
<Command>		int x = trQuestVarGet("castPop");</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int tile = 0;</Command>
<Command>		yClearDatabase("castTargets");</Command>
<Command>		yClearDatabase("castTiles");</Command>
<Command><![CDATA[		if (trQuestVarGet("cast"+x+"type") < CAST_TILE) {]]></Command>
<Command>			trQuestVarSet("gameplayPhase", GAMEPLAY_SPELL_UNIT);</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("gameplayPhase", GAMEPLAY_SPELL_TILE);</Command>
<Command>		}</Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			trMessageSetText(trStringQuestVarGet("cast"+x+"instructions"), -1);</Command>
<Command>		}</Command>
<Command>		switch(1*trQuestVarGet("cast"+x+"type"))</Command>
<Command>		{</Command>
<Command>			case CAST_UNIT:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "spell") <= trQuestVarGet("cast"+x+"commander")) {]]></Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnits");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_SING:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if ((mGetVarByQV("allUnits", "action") >= ACTION_DONE) && (mGetVarByQV("allUnits", "action") < ACTION_SLEEPING)) {]]></Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnits");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_CONVERT:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER && mGetVarByQV("allUnits", "cost") <= trQuestVarGet("p"+1*trQuestVarGet("activePlayer")+"manaflow")) {]]></Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnits");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_BACKSTAB:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command>					} else if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						if (trCountUnitsInArea(""+1*trQuestVarGet("allUnits"), p, "Unit", 8) > 1) {</Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnits");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_TILE:</Command>
<Command>			{</Command>
<Command>				for (z=zGetBankCount("tiles"); >0) {</Command>
<Command>					zBankNext("tiles");</Command>
<Command>					if (zGetVar("tiles", "terrain") * trQuestVarGet("cast"+x+"terrain") == 0) {</Command>
<Command>						if (zGetVar("tiles", "ward") == 0) {</Command>
<Command>							yAddToDatabase("castTiles", "tiles");</Command>
<Command>							if (trCurrentPlayer() == p) {</Command>
<Command>								highlightTile(1*trQuestVarGet("tiles"), 999999);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_SUMMON_LOCATIONS:</Command>
<Command>			{</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if (mGetVarByQV("allUnits", "player") == p && HasKeyword(BEACON, 1*mGetVarByQV("allUnits", "keywords"))) {]]></Command>
<Command>						tile = mGetVarByQV("allUnits", "tile");</Command>
<Command>						findAvailableTiles(tile, 1, "castTiles");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				for(x=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>					yDatabaseNext("castTiles");</Command>
<Command>					if (zGetVarByIndex("tiles", "ward", 1*trQuestVarGet("castTiles")) == 1) {</Command>
<Command>						yRemoveFromDatabase("castTiles");</Command>
<Command>					} else {</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("casttiles"), 999999);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_ADJACENT_TILE:</Command>
<Command>			{</Command>
<Command>				tile = mGetVarByQV("cast"+x+"unit", "tile");</Command>
<Command>				findAvailableTiles(tile, 1, "castTiles", false);</Command>
<Command>				for(z=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>					yDatabaseNext("castTiles");</Command>
<Command>					if (zGetVarByIndex("tiles", "ward", 1*trQuestVarGet("castTiles")) == 1) {</Command>
<Command>						yRemoveFromDatabase("castTiles");</Command>
<Command>					} else {</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("casttiles"), 999999);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_MAGNETIZE:</Command>
<Command>			{</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*trQuestVarGet(trStringQuestVarGet("cast"+x+"start"))));</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((trQuestVarGet("allUnits") == trQuestVarGet(trStringQuestVarGet("cast"+x+"start"))) || (mGetVarByQV("allUnits", "player") == 3 - p)) {]]></Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if (HasKeyword(MAGNETIC, 1*mGetVarByQV("allUnits", "keywords")) &&]]></Command>
<Command><![CDATA[						trDistanceToVectorSquared("allUnits", "pos") < 40) {]]></Command>
<Command>						yAddToDatabase("castTargets", "allUnits");</Command>
<Command>						if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>							trUnitHighlight(999999, false);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_TARGET:</Command>
<Command>			{</Command>
<Command>				findTargets(1*trQuestVarGet(trStringQuestVarGet("cast"+x+"start")), "castTargets");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				yDatabaseSelectAll("castTargets");</Command>
<Command>				if (trCurrentPlayer() == p) {</Command>
<Command>					trUnitHighlight(999999, false);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_DIRECTION:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("cast"+x+"unit") == 1) {</Command>
<Command>					trQuestVarSet("start", mGetVarByQV(trStringQuestVarGet("cast"+x+"start"), "tile"));</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("start", trQuestVarGet(trStringQuestVarGet("cast"+x+"start")));</Command>
<Command>				}</Command>
<Command>				bool found = true;</Command>
<Command>				tile = 0;</Command>
<Command>				// For each direction...</Command>
<Command><![CDATA[				for(d=0; < zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("start"))) {]]></Command>
<Command>					trVectorSetUnitPos("pos", "start");</Command>
<Command>					trVectorQuestVarSet("target", kbGetBlockPosition(""+1*zGetVarByIndex("tiles", "neighbor"+d, 1*trQuestVarGet("start"))));</Command>
<Command>					trVectorQuestVarSet("step", trGetUnitVector("pos", "target", 6.0));</Command>
<Command>					trVectorQuestVarSet("pos", trVectorQuestVarGet("pos") + trVectorQuestVarGet("step"));</Command>
<Command>					tile = trQuestVarGet("start");</Command>
<Command>					found = true;</Command>
<Command>					while(found) {</Command>
<Command>						found = false;</Command>
<Command>						// Travel down the line and highlight tiles</Command>
<Command><![CDATA[						for(z=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>							trVectorQuestVarSet("current", kbGetBlockPosition(""+1*zGetVarByIndex("tiles", "neighbor"+z, tile)));</Command>
<Command><![CDATA[							if (trDistanceBetweenVectorsSquared("current", "pos") < 1) {]]></Command>
<Command>								tile = zGetVarByIndex("tiles", "neighbor"+z, tile);</Command>
<Command>								trQuestVarSet("currentTile", tile);</Command>
<Command>								yAddToDatabase("castTiles", "currentTile");</Command>
<Command>								trQuestVarSet("posx", trQuestVarGet("currentx") + trQuestVarGet("stepx"));</Command>
<Command>								trQuestVarSet("posz", trQuestVarGet("currentz") + trQuestVarGet("stepz"));</Command>
<Command>								if (trCurrentPlayer() == p) {</Command>
<Command>									highlightTile(tile, 999999);</Command>
<Command>								}</Command>
<Command>								found = true;</Command>
<Command>								break;</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						if (tile >= trQuestVarGet("ztilesend")) {</Command>
<Command>							found = false;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_ADJACENT_UNIT:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "spell") <= trQuestVarGet("cast"+x+"commander")) {]]></Command>
<Command>							trVectorSetUnitPos("d1pos", "allUnits");</Command>
<Command>							trVectorSetUnitPos("d2pos", "cast"+x+"unit");</Command>
<Command><![CDATA[							if (trDistanceBetweenVectorsSquared("d1pos", "d2pos") < 64){]]></Command>
<Command>								trUnitSelectClear();</Command>
<Command>								trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>								yAddToDatabase("castTargets", "allUnits");</Command>
<Command>								if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>									trUnitHighlight(999999, false);</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_MIRROR_REFLECTION:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (HasKeyword(STEALTH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "spell") <= trQuestVarGet("cast"+x+"commander")) {]]></Command>
<Command>							trVectorSetUnitPos("spellProjectileStart", "allUnits");</Command>
<Command>							trVectorQuestVarSet("temp", kbGetBlockPosition("128"));</Command>
<Command>							trVectorQuestVarSet("temp", xsVectorSet(trVectorQuestVarGetX("temp") - trVectorQuestVarGetX("spellProjectileStart"), 0, trVectorQuestVarGetZ("temp")  - trVectorQuestVarGetZ("spellProjectileStart")));</Command>
<Command>							trVectorQuestVarSet("spellProjectileEnd", kbGetBlockPosition("128"));</Command>
<Command>							trVectorQuestVarSet("spellProjectileEnd", xsVectorSet(trVectorQuestVarGetX("spellProjectileEnd") + trVectorQuestVarGetX("temp"), 0, trVectorQuestVarGetZ("spellProjectileEnd")  + trVectorQuestVarGetZ("temp")));</Command>
<Command>							zBankNext("tiles");</Command>
<Command>							trQuestVarSet("temp", trQuestVarGet("tiles"));</Command>
<Command>							for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>								zBankNext("tiles");</Command>
<Command><![CDATA[								if (trDistanceToVectorSquared("tiles", "spellProjectileEnd") < trDistanceToVectorSquared("temp", "spellProjectileEnd")) {]]></Command>
<Command>									trQuestVarSet("temp", trQuestVarGet("tiles"));</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>							if(zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("temp")) + zGetVarByIndex("tiles", "terrain", 1*trQuestVarGet("temp")) == 0){</Command>
<Command>								trUnitSelectClear();</Command>
<Command>								trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>								yAddToDatabase("castTargets", "allUnits");</Command>
<Command>								if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>									trUnitHighlight(999999, false);</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("spellcast_01_select");</Command>
<Command>		if (yGetDatabaseCount("castTargets") + yGetDatabaseCount("castTiles") == 0) {</Command>
<Command>			if (trCurrentPlayer() == 1*trQuestVarGet("activePlayer")) {</Command>
<Command>				trMessageSetText("No valid targets.", -1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("castDone", CASTING_DONE);</Command>
<Command>	}</Command>


<Command>	xsDisableRule("spellcast_00_process");</Command>
<Command>}</Command>

<Command>void spellcastClearHighlights(int x = 0) {</Command>
<Command>	if (trCurrentPlayer() == 1*trQuestVarGet("activePlayer")) {</Command>
<Command>		if (trQuestVarGet("cast"+x+"type") >= CAST_TILE) {</Command>
<Command>			for(z=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>				yDatabaseNext("castTiles");</Command>
<Command>				highlightTile(1*trQuestVarGet("castTiles"), 0.1);</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			for (z=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>				yDatabaseNext("castTargets", true);</Command>
<Command>				trUnitHighlight(0.1, false);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	yClearDatabase("castTargets");</Command>
<Command>}</Command>


<Command>rule spellcast_01_select</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	int x = trQuestVarGet("castPop");</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		spellcastClearHighlights(x);</Command>
<Command>		castReset();</Command>
<Command>		trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>	} else {</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				bool selected = false;</Command>
<Command><![CDATA[				if (trQuestVarGet("cast"+x+"type") < CAST_TILE) {]]></Command>
<Command>					for(z=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>						yDatabaseNext("castTargets");</Command>

<Command><![CDATA[						if (trDistanceToVectorSquared("castTargets", "p"+p+"clickPos") < 8) {]]></Command>
<Command>							trQuestVarCopy(trStringQuestVarGet("cast"+x+"qv"), "castTargets");</Command>
<Command>							selected = true;</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					for(z=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>						yDatabaseNext("castTiles");</Command>

<Command><![CDATA[						if (trDistanceToVectorSquared("castTiles", "p"+p+"clickPos") < 8) {]]></Command>
<Command>							trQuestVarCopy(trStringQuestVarGet("cast"+x+"qv"), "castTiles");</Command>
<Command>							selected = true;</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (selected) {</Command>
<Command>					spellcastClearHighlights(x);</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>					xsEnableRule("spellcast_00_process");</Command>
<Command>					xsDisableRule("spellcast_01_select");</Command>
<Command>				} else {</Command>
<Command>					for(z=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>						yDatabaseNext("p"+p+"hand");</Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos") < 2) {]]></Command>
<Command>							spellcastClearHighlights(x);</Command>
<Command>							castReset();</Command>
<Command>							trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>							castRestoreWard();</Command>
<Command>							xsEnableRule("gameplay_01_select");</Command>
<Command>							highlightReady(999999);</Command>
<Command>							xsDisableRule("spellcast_01_select");</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (z == 0) {</Command>
<Command>						trQuestVarSet("p"+p+"click", 0);</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				spellcastClearHighlights(x);</Command>
<Command>				castRestoreWard();</Command>
<Command>				castReset();</Command>
<Command>				trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(999999);</Command>
<Command>				xsDisableRule("spellcast_01_select");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void chooseSpell(int spell = 0, int card = -1) {</Command>
<Command>	trQuestVarSet("currentSpell", spell);</Command>
<Command>	trQuestVarSet("selectedCard", card);</Command>
<Command>	// If the card is a spell</Command>
<Command>	if (card > -1) {</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (HasKeyword(WARD, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>				yAddToDatabase("wardUnits", "allUnits");</Command>
<Command>				yRemoveFromDatabase("allUnits");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	castReset();</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	switch(spell)</Command>
<Command>	{</Command>
<Command>		case SPELL_INTIMIDATE:</Command>
<Command>		{</Command>
<Command>			castAddAdjacentUnit("spellTarget", 3 - trQuestVarGet("activePlayer"), "p"+1*trQuestVarGet("activePlayer")+"commander", true);</Command>
<Command>			castInstructions("Choose an enemy adjacent to your commander. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_GROUND_STOMP:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_BOOTS_TREASURE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WEAPONS_TREASURE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SHIELDS_TREASURE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PISTOL_SHOT:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_RELOAD:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_POISON_CLOUD:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_NATURE_ANGRY:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ELVEN_APOCALYPSE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_MIRROR_REFLECTION:</Command>
<Command>		{</Command>
<Command>			castAddMirrorReflectionUnit("spellTarget", 0);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PYROBALL:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, trQuestVarGet("p"+1*trQuestVarGet("activePlayer")+"spellDamage") > 0);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_KRAKEN_HUG:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WATER_PRESSURE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion.");</Command>
<Command>		}</Command>
<Command>		case SPELL_OXYGEN_TANK:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SPARK:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0);</Command>
<Command>			castInstructions("Choose any unit. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FOOD:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion to give +1 attack and health to.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SING:</Command>
<Command>		{</Command>
<Command>			castAddSing("spellTarget", p);</Command>
<Command>			castInstructions("Choose an ally that has already acted. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_MAP:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion to give +1 speed and Pathfinder to.");</Command>
<Command>		}</Command>
<Command>		case SPELL_BACKSTAB:</Command>
<Command>		{</Command>
<Command>			castAddBackstabUnit("spellTarget", 3 - p);</Command>
<Command>			castInstructions("Choose an enemy that is adjacent to another enemy. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DUEL:</Command>
<Command>		{</Command>
<Command>			castAddUnit("allyTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddUnit("enemyTarget", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PARTY_UP:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_TEAMWORK:</Command>
<Command>		{</Command>
<Command>			castAddUnit("cheerTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DEFENDER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_VICTORY:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right clickto cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WHIRLWIND:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SUMMON_ONE:</Command>
<Command>		{</Command>
<Command>			castAddAdjacentTile("spellTarget", "summonedUnit");</Command>
<Command>			castInstructions("Choose a tile to summon a random 1-cost minion from your deck.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WOLF:</Command>
<Command>		{</Command>
<Command>			castAddAdjacentTile("spellTarget", "summonedUnit");</Command>
<Command><![CDATA[			castInstructions("Choose a tile to summon a 1|1 Loyal Wolf with Guard.");]]></Command>
<Command>		}</Command>
<Command>		case SPELL_PING:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0);</Command>
<Command>			castInstructions("Choose a unit to deal 1 damage to.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FIRST_AID:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddAdjacentTile("tileTarget", "p"+p+"commander");</Command>
<Command>			castInstructions("Choose a tile to teleport it to. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SONG_OF_REST:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTile", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CLASS_TIME:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTile", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SNIPE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellShooter", p, true);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddTarget("spellTarget", "spellShooter");</Command>
<Command>			castInstructions("Choose an enemy within range to attack. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_EXPLOSION:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DOUBLEBLAST:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget1", 3 - p, true);</Command>
<Command>			castInstructions("Choose the first target. Right click to cancel.");</Command>
<Command>			castAddUnit("spellTarget2", 3 - p, true);</Command>
<Command>			castInstructions("Choose the second target. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ELECTROSURGE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 3 - p, true);</Command>
<Command>			castInstructions("Choose an enemy. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_RUNE_OF_FLAME:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTarget");</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_RUNE_OF_ICE:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTarget");</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FIRE_AND_ICE:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTargetFire");</Command>
<Command>			castInstructions("Choose a tile to summon the Blaze Elemental. Right click to cancel.");</Command>
<Command>			castAddSummonLocations("spellTargetIce");</Command>
<Command>			castInstructions("Choose a tile to summon the Frost Elemental. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_VALKYRIE_HEAL:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p);</Command>
<Command>			castInstructions("Choose an ally to restore 3 health to.");</Command>
<Command>		}</Command>
<Command>		case SPELL_COPY_HOMEWORK:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_METEOR:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FINAL_EXAM:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SHAPESHIFT:</Command>
<Command>		{</Command>
<Command>			castAddUnit("transformTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion to transform.");</Command>
<Command>			castAddUnit("copyTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion to copy.");</Command>
<Command>		}</Command>
<Command>		case SPELL_APOCALYPSE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_MIRROR_IMAGE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_MEDUSA_STUN:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy to stun.");</Command>
<Command>		}</Command>
<Command>		case SPELL_LAMPADES_CONVERT:</Command>
<Command>		{</Command>
<Command>			castAddConvertUnit("spellTarget", 3 - p);</Command>
<Command>			castInstructions("Choose an enemy minion that costs {Manaflow} or less to convert.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WATER_CANNON:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>			castAddDirection("spellDirection", "spellTarget", true);</Command>
<Command>			castInstructions("Choose a direction. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_RUNE_OF_WATER:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTarget");</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_TIDAL_WAVE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FLUSH:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DEEP_DIVE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SEA_EMBRACE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_TELETIDE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddTile("spellDestination", false);</Command>
<Command>			castInstructions("Choose a tile to teleport it to. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_GUARDIAN_OF_SEA:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WRATH_OF_SEA:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CLEANSING_WATERS:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DROWN:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DEMON_EAT:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose a minion to devour.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SCORPION_STING:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion to give to teleport.");</Command>
<Command>			castAddAdjacentTile("spellTile", "spellCaster");</Command>
<Command>			castInstructions("Choose a tile to teleport it to.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WORLD_SPLITTER:</Command>
<Command>		{</Command>
<Command>			if (trQuestVarGet("p"+p+"commanderType") == COMMANDER_ZENOPHOBIA) {</Command>
<Command>				castAddUnit("spellTarget", p, true);</Command>
<Command>				castInstructions("Choose an ally. Right click to cancel.");</Command>
<Command>			} else {</Command>
<Command>				castAddUnit("spellTarget", p, false);</Command>
<Command>				castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			}</Command>
<Command>			castAddDirection("spellDirection", "spellTarget", true);</Command>
<Command>			castInstructions("Choose a direction. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SOUL_SIPHON:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_BLOOD_PRICE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("allyTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddUnit("enemyTarget", 3-p, true);</Command>
<Command>			castInstructions("Choose an enemy. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DEATH_APPROACHES:</Command>
<Command>		{</Command>
<Command>			castAddAdjacentTile("spellTarget", "p"+(3-p)+"commander");</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DOOM:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, true);</Command>
<Command>			castInstructions("Choose a unit. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SHADOWSTEP:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FINAL_FRENZY:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CORPSE_PARTY:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTarget1");</Command>
<Command>			castInstructions("Choose a tile (1/3). Right click to cancel.");</Command>
<Command>			castAddSummonLocations("spellTarget2");</Command>
<Command>			castInstructions("Choose a tile (2/3). Right click to cancel.");</Command>
<Command>			castAddSummonLocations("spellTarget3");</Command>
<Command>			castInstructions("Choose a tile (3/3). Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_UNDEATH:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_RUNE_OF_DARKNESS:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddSummonLocations("spellTarget1");</Command>
<Command>			castInstructions("Choose a tile (1/2). Right click to cancel.");</Command>
<Command>			castAddSummonLocations("spellTarget2");</Command>
<Command>			castInstructions("Choose a tile (2/2). Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ZENOS_PARADOX:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget1", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>			castAddUnit("spellTarget2", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SCRAP_METAL:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_MAGNETIZE:</Command>
<Command>		{</Command>
<Command>			castAddMagnetize("spellTarget", "spellCaster");</Command>
<Command>			castInstructions("Choose a minion to Magnetize to. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ELECTRIC_GRID:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ZAP_GUN:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_COMPRESS:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_UPGRADE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PROFITEERING:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_WARNING_SHOT:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, true);</Command>
<Command>			castInstructions("Choose a unit. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PORTABLE_SPELL_SHIELD:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", p, false);</Command>
<Command>			castInstructions("Choose an allied minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_REWIND:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_TIME_POCKET:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_BANHAMMER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_POWER_SUIT:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_GEAR_FACTORY:</Command>
<Command>		{</Command>
<Command>			castAddSummonLocations("spellTarget");</Command>
<Command>			castInstructions("Choose a tile. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ASSEMBLY_LINE:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_BORROWED_TIME:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_FORTIFY:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CHOOSE_DIRECTION:</Command>
<Command>		{</Command>
<Command>			castAddDirection("spellDirection", "spellCaster", true);</Command>
<Command>			castInstructions("Choose a direction to aim the Directional Cannon");</Command>
<Command>		}</Command>
<Command>		case SPELL_SPIDER_LAIR:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_TAVERN_BRAWL:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on a tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_DOMINANCE:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 3 - p, false);</Command>
<Command>			castInstructions("Choose an enemy minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_NICKS_PORTAL:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_PETTY_LASER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_THICK_LASER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_GRAND_LASER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_OMEGA_LASER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_GODLY_LASER:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_SPACE_VENT:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_REFRESH_MANA:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to cast. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ELDRITCH_WHISPERS:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_ELDRITCH_RITUAL:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command>			castInstructions("Choose a minion. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CONS_LIBRA:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to restore " + (1+1*trQuestVarGet("constellations")) + " Health to your Commander. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CONS_GEMINI:</Command>
<Command>		{</Command>
<Command>			castAddUnit("spellTarget", 0, false);</Command>
<Command><![CDATA[			castInstructions("Choose a minion to summon a " + (1+1*trQuestVarGet("constellations")) + "|" + (1+1*trQuestVarGet("constellations")) + " copy. Right click to cancel.");]]></Command>
<Command>			castAddSummonLocations("spellDestination");</Command>
<Command><![CDATA[			castInstructions("Choose a tile to summon a " + (1+1*trQuestVarGet("constellations")) + "|" + (1+1*trQuestVarGet("constellations")) + " copy. Right click to cancel.");]]></Command>
<Command>		}</Command>
<Command>		case SPELL_CONS_TAURUS:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command>			castInstructions("Click on any tile to draw " + (1+1*trQuestVarGet("constellations")) + " cards. Right click to cancel.");</Command>
<Command>		}</Command>
<Command>		case SPELL_CONS_ORION:</Command>
<Command>		{</Command>
<Command>			castAddTile("spellTarget", true);</Command>
<Command><![CDATA[			castInstructions("Click on any tile to give your minions +" + (1+1*trQuestVarGet("constellations")) + "|+" + (1+1*trQuestVarGet("constellations")) + ". Right click to cancel.");]]></Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	castStart();</Command>
<Command>	xsEnableRule("spell_cast");</Command>
<Command>}</Command>

<Command>rule spell_cast</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("spell_cast");</Command>
<Command>	} else if (trQuestVarGet("castDone") == CASTING_DONE) {</Command>
<Command>		xsDisableRule("spell_cast");</Command>
<Command>		castRestoreWard();</Command>
<Command>		int spell = trQuestVarGet("currentspell");</Command>
<Command>		bool done = true;</Command>
<Command>		int activeUnit = 0;</Command>
<Command>		int target = 0;</Command>
<Command>		int tile = 0;</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int proto = 0;</Command>
<Command>		float dist = 0;</Command>
<Command>		int neighbor = 0;</Command>
<Command>		trSoundPlayFN("godpower.wav","1",-1,"","");</Command>
<Command>		bool battlecry = false;</Command>
<Command>		trQuestVarSet("p"+p+"spellDamage", trCountUnitsInArea("128",p,"Oracle Scout",45) + trQuestVarGet("p"+p+"spellDamageNonOracle"));</Command>
<Command>		switch(spell)</Command>
<Command>		{</Command>
<Command>			case SPELL_INTIMIDATE:</Command>
<Command>			{</Command>
<Command>				trCameraShake(1.0, 0.1);</Command>
<Command>				trSoundPlayFN("gaiaattack.wav","1",-1,"","");</Command>
<Command>				stunUnit(1*trQuestVarGet("spellTarget"));</Command>
<Command>			}</Command>
<Command>			case SPELL_GROUND_STOMP:</Command>
<Command>			{</Command>
<Command>				trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>				trSoundPlayFN("woodcrush" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (trQuestVarGet("allUnits") != trQuestVarGet("p" + p + "commander")) {</Command>
<Command>						trVectorSetUnitPos("d1pos", "allUnits");</Command>
<Command>						trVectorSetUnitPos("d2pos", "p" + p + "commander");</Command>
<Command><![CDATA[						if (trDistanceBetweenVectorsSquared("d1pos", "d2pos") < 64){]]></Command>
<Command>							damageUnit(1*trQuestVarGet("allUnits"), 1 + trQuestVarGet("p" + p + "spellDamage"));</Command>
<Command>							deployAtTile(0, "Dust Small", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_BOOTS_TREASURE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("plentybirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("longhouse.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (1*mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						if (1*mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER) {</Command>
<Command>							mSetVarByQV("allUnits", "keywords", SetBit(1*mGetVarByQV("allUnits", "keywords"), ETHEREAL));</Command>
<Command>							deployAtTile(0, "Fireball Launch Damage Effect", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_WEAPONS_TREASURE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("plentybirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("barracks.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (1*mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						if (1*mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER) {</Command>
<Command>							mSetVarByQV("allUnits", "attack", mGetVarByQV("allUnits", "attack") + 2);</Command>
<Command>							deployAtTile(0, "Fireball Launch Damage Effect", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_SHIELDS_TREASURE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("plentybirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("bronzebirth.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (1*mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						if (1*mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER) {</Command>
<Command>							mSetVarByQV("allUnits", "health", mGetVarByQV("allUnits", "health") + 3);</Command>
<Command>							deployAtTile(0, "Fireball Launch Damage Effect", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case SPELL_PISTOL_SHOT:</Command>
<Command>			{</Command>
<Command>				addCardToDeck(p, "", SPELL_RELOAD);</Command>
<Command>				ySetPointer("p"+p+"deck", yGetDatabaseCount("p"+p+"deck"));</Command>
<Command>				trSoundPlayFN("shockwave.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("spellProjectile", deployAtTile(0, "Dwarf", 1*mGetVarByQV("p" + p + "commander", "tile")));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellProjectile"), true);</Command>
<Command>				trUnitChangeProtoUnit("Petrobolos Shot");</Command>
<Command>				trVectorSetUnitPos("spellProjectileStart", "p" + p + "commander");</Command>
<Command>				trVectorSetUnitPos("spellProjectileEnd", "spellTarget");</Command>
<Command>				trUnitMoveToVector("spellProjectileEnd");</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_projectile_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_RELOAD:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("siegecamp.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 1);</Command>
<Command>			}</Command>
<Command>			case SPELL_POISON_CLOUD:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("carnivorabirth.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (1*mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command>						if (1*mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER) {</Command>
<Command>							deployAtTile(0, "Lampades Blood", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>							if (HasKeyword(DECAY, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>								damageUnit(1*trQuestVarGet("allUnits"), 5 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>							} else {</Command>
<Command>								mSetVarByQV("allUnits", "keywords", SetBit(1*mGetVarByQV("allUnits", "keywords"), DECAY));</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_FROST_BREATH:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("frostgiantattack.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (1*mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command>						if (1*mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER) {</Command>
<Command>							deployAtTile(0, "Icy Footprint", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>							if (mGetVarByQV("allUnits", "stunTime") > 0) {</Command>
<Command>								damageUnit(1*trQuestVarGet("allUnits"), 3 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>							} else {</Command>
<Command>								stunUnit(1*trQuestVarGet("allUnits"));</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_NATURE_ANGRY:</Command>
<Command>			{</Command>
<Command>				trCameraShake(3.0, 0.3);</Command>
<Command>				trSoundPlayFN("gaiaforestambient2.wav","1",-1,"","");</Command>
<Command>				trQuestVarSetFromRand("soundRandom", 1, 2, true);</Command>
<Command>				trSoundPlayFN("gaiaattack" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						healUnit(1*trQuestVarGet("allUnits"), 1*mGetVarByQV("allUnits", "health"));</Command>
<Command>						deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					} else {</Command>
<Command>						mSetVarByQV("allUnits", "keywords", SetBit(1*mGetVarByQV("allUnits", "keywords"), DECAY));</Command>
<Command>						deployAtTile(0, "Lampades Blood", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_ELVEN_APOCALYPSE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("temple.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("battlecry4.wav","1",-1,"","");</Command>

<Command>				trQuestVarSet("apocalypse", 2);</Command>
<Command>				musicToggleBattleMode();</Command>
<Command>				xsEnableRule("spell_elven_apocalypse_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_MIRROR_REFLECTION:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("lapadesconvert.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("spellProjectile", deployAtTile(0, "Dwarf", 1*mGetVarByQV("spellTarget", "tile")));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellProjectile"), true);</Command>
<Command>				trUnitChangeProtoUnit("Lampades Bolt");</Command>
<Command>				trVectorSetUnitPos("spellProjectileStart", "spellTarget");</Command>
<Command>				trVectorQuestVarSet("temp", kbGetBlockPosition("128"));</Command>
<Command>				trVectorQuestVarSet("temp", xsVectorSet(trVectorQuestVarGetX("temp") - trVectorQuestVarGetX("spellProjectileStart"), 0, trVectorQuestVarGetZ("temp")  - trVectorQuestVarGetZ("spellProjectileStart")));</Command>
<Command>				trVectorQuestVarSet("spellProjectileEnd", kbGetBlockPosition("128"));</Command>
<Command>				trVectorQuestVarSet("spellProjectileEnd", xsVectorSet(trVectorQuestVarGetX("spellProjectileEnd") + trVectorQuestVarGetX("temp"), 0, trVectorQuestVarGetZ("spellProjectileEnd")  + trVectorQuestVarGetZ("temp")));</Command>
<Command>				trUnitMoveToVector("spellProjectileEnd");</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_projectile_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_PYROBALL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("fireball launch.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("spellProjectile", deployAtTile(0, "Dwarf", 1*mGetVarByQV("p" + p + "commander", "tile")));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellProjectile"), true);</Command>
<Command>				trUnitChangeProtoUnit("Ball of Fire");</Command>
<Command>				trVectorSetUnitPos("spellProjectileStart", "p" + p + "commander");</Command>
<Command>				trVectorSetUnitPos("spellProjectileEnd", "spellTarget");</Command>
<Command>				trUnitMoveToVector("spellProjectileEnd");</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_projectile_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_KRAKEN_HUG:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("krakendeath.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("shipdeathsplash.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+(3-p)+"drawCards", 8*trCountUnitsInArea("128",(3-p),"Unit",45));</Command>
<Command>			}</Command>
<Command>			case SPELL_WATER_PRESSURE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shipdeathsplash.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("underminebirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("underminebirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("underminebirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("underminebirth.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Meteor Impact Water", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "attack", 1);</Command>
<Command>				mSetVarByQV("spellTarget", "health", 1);</Command>
<Command>			}</Command>
<Command>			case SPELL_OXYGEN_TANK:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("garrison.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("gaiatreesprout2.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("villagercreate.wav","1",-1,"","");</Command>
<Command>				addCardToDeck(p, "", SPELL_OXYGEN_TANK);</Command>
<Command>				shuffleDeck(p);</Command>
<Command>			}</Command>
<Command>			case SPELL_SPARK:</Command>
<Command>			{</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_BACKSTAB:</Command>
<Command>			{</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				trSoundPlayFN("tributereceived.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case SPELL_FOOD:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				mSetVar(target, "attack", 1 + mGetVar(target, "attack"));</Command>
<Command>				mSetVar(target, "health", 1 + mGetVar(target, "health"));</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVar(target, "tile"));</Command>
<Command>				trSoundPlayFN("colossuseat.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("researchcomplete.wav","1",-1,"","");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+target);</Command>
<Command>				spyEffect("Einheriar Boost SFX");</Command>
<Command>			}</Command>
<Command>			case SPELL_SING:</Command>
<Command>			{</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				mSetVar(target, "action", ACTION_READY);</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVar(target, "tile"));</Command>
<Command>				trSoundPlayFN("restorationbirth.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case SPELL_MAP:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("researchcomplete.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				mSetVar(target, "speed", 1 + mGetVar(target, "speed"));</Command>
<Command>				mSetVar(target, "keywords", SetBit(1*mGetVar(target, "keywords"), ETHEREAL));</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVar(target, "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_DUEL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("specialist.wav","1",-1,"","");</Command>
<Command>				activeUnit = trQuestVarGet("allyTarget");</Command>
<Command>				target = trQuestVarGet("enemyTarget");</Command>
<Command>				target = checkGuard(target);</Command>

<Command>				startAttack(activeUnit, target, HasKeyword(AMBUSH, 1*mGetVar(activeUnit, "keywords")), true);</Command>
<Command>				startAttack(target, activeUnit, false, true);</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_PARTY_UP:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("barracks.wav","1",-1,"","");</Command>
<Command>				xsEnableRule("spell_party_up_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_TEAMWORK:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("battlecry2.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("cheerTarget", "attack", 1 + mGetVarByQV("cheerTarget", "attack"));</Command>
<Command>				xsEnableRule("cheer_activate"); // this trigger is placed in OnPlay lol</Command>
<Command>			}</Command>
<Command>			case SPELL_DEFENDER:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("fortress.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("researchcomplete.wav","1",-1,"","");</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				mSetVar(target, "health", 2 + mGetVar(target, "health"));</Command>
<Command>				mSetVar(target, "keywords", SetBit(1*mGetVar(target, "keywords"), GUARD));</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVar(target, "tile"));</Command>
<Command>				refreshGuardAll();</Command>
<Command>			}</Command>
<Command>			case SPELL_WOLF:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				activeUnit = summonAtTile(1*trQuestVarGet("spellTarget"),p,kbGetProtoUnitID("Wolf"));</Command>
<Command>				mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>			}</Command>
<Command>			case SPELL_VICTORY:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("battlecry1.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((mGetVarByQV("allUnits", "spell") == SPELL_NONE) &&]]></Command>
<Command>						(mGetVarByQV("allUnits", "player") == p)) {</Command>
<Command>						mSetVarByQV("allUnits", "victory", 1 + mGetVarByQV("allUnits", "victory"));</Command>
<Command>						mSetVarByQV("allUnits", "attack", 1 + mGetVarByQV("allUnits", "attack"));</Command>
<Command><![CDATA[						if ((mGetVarByQV("allUnits", "victory") == 1) &&]]></Command>
<Command>							HasKeyword(AMBUSH, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>							mSetVarByQV("allUnits", "victoryAmbush", 1);</Command>
<Command>						}</Command>
<Command>						mSetVarByQV("allUnits", "keywords", SetBit(1*mGetVarByQV("allUnits", "keywords"), AMBUSH));</Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_SUMMON_ONE:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				done = false;</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>					proto = yDatabaseNext("p"+p+"deck");</Command>
<Command><![CDATA[					if ((trQuestVarGet("card_"+proto+"_cost") == 1) && (yGetVar("p"+p+"deck", "spell") == SPELL_NONE)) {]]></Command>
<Command>						yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>						done = true;</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (done) {</Command>
<Command>					activeUnit = summonAtTile(1*trQuestVarGet("spellTarget"),p,proto);</Command>
<Command>					if (HasKeyword(CHARGE, 1*mGetVar(activeUnit, "keywords"))) {</Command>
<Command>						mSetVar(activeUnit, "action", ACTION_READY);</Command>
<Command>					} else {</Command>
<Command>						mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				done = true;</Command>
<Command>			}</Command>
<Command>			case SPELL_SONG_OF_REST:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("restorationbirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("heal.wav","1",-1,"","");</Command>
<Command>				healUnit(1*trQuestVarGet("p"+p+"commander"), 6);</Command>
<Command>				deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 1 + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>			}</Command>
<Command>			case SPELL_WHIRLWIND:</Command>
<Command>			{</Command>
<Command>				done = false;</Command>
<Command>				deployAtTile(0, "Tremor", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				trQuestVarSet("spellNext", trTimeMS());</Command>
<Command>				trQuestVarSet("spellEnd", trTimeMS() + 1000);</Command>
<Command>				trSoundPlayFN("sphinxspecialattack.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("ui\thunder1.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("spellAngle", 0);</Command>
<Command>				for(x=3; >0) {</Command>
<Command>					trQuestVarSet("proj"+x, deployAtTile(0, "Petosuchus Projectile", 1*mGetVarByQV("spellTarget", "tile")));</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("proj"+x), true);</Command>
<Command>					trSetSelectedScale(8.0, 0, 10.0);</Command>
<Command>					trUnitHighlight(2.0, false);</Command>
<Command>				}</Command>
<Command>				xsEnableRule("spell_whirlwind_sfx");</Command>
<Command>			}</Command>
<Command>			case SPELL_PING:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("cinematics\23_in\arrow1.mp3","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 1);</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				battlecry = true;</Command>
<Command>			}</Command>
<Command>			case SPELL_FIRST_AID:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("villagercreate.wav","1",-1,"","");</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("spellTarget", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("tileTarget"));</Command>
<Command>				healUnit(1*trQuestVarGet("spellTarget"), 2);</Command>
<Command>			}</Command>
<Command>			case SPELL_CLASS_TIME:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("townbell.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("temple.wav","1",-1,"","");</Command>
<Command>				xsEnableRule("spell_class_time_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_SNIPE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("petsuchosattack.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("spellshooter", "attack", mGetVarByQV("spellshooter", "attack") + mGetVarByQV("spellshooter", "range"));</Command>
<Command>				trQuestVarSet("spelltarget", checkGuard(1*trQuestVarGet("spellTarget")));</Command>
<Command>				startAttack(1*trQuestVarGet("spellshooter"), 1*trQuestVarGet("spelltarget"), false, true);</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_snipe_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_EXPLOSION:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("ui\thunder5.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("meteordustcloud.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Olympus Temple SFX", 1*trQuestVarGet("spelltarget"));</Command>
<Command>				trVectorSetUnitPos("pos", "spellTarget");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>							damageUnit(1*trQuestVarGet("allUnits"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_DOUBLEBLAST:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("fireball fall 2.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget1"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget2"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+deployAtTile(0, "Meteorite", 1*mGetVarByQV("spelltarget1", "tile")), true);</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+deployAtTile(0, "Meteorite", 1*mGetVarByQV("spelltarget2", "tile")), true);</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 1+trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>			}</Command>
<Command>			case SPELL_ELECTROSURGE:</Command>
<Command>			{</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				trTechInvokeGodPower(0, "bolt", xsVectorSet(0,0,0), xsVectorSet(0,0,0));</Command>
<Command>				lightning(1*trQuestVarGet("spellTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"), false);</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_RUNE_OF_FLAME:</Command>
<Command>			{</Command>
<Command>				activeUnit = summonAtTile(1*trQuestVarGet("spellTarget"), p, kbGetProtoUnitID("Fire Giant"));</Command>
<Command>				mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("fireball fall 1.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("p"+p+"commander"),6 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+deployAtTile(0, "Meteorite", 1*mGetVarByQV("p"+p+"commander", "tile")), true);</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>			}</Command>
<Command>			case SPELL_RUNE_OF_ICE:</Command>
<Command>			{</Command>
<Command>				activeUnit = summonAtTile(1*trQuestVarGet("spellTarget"), p, kbGetProtoUnitID("Frost Giant"));</Command>
<Command>				mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("frostgiantattack.wav","1",-1,"","");</Command>
<Command>				stunUnit(1*trQuestVarGet("p"+p+"commander"));</Command>
<Command>			}</Command>
<Command>			case SPELL_FIRE_AND_ICE:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("spellTargetFire") == trQuestVarGet("spellTargetIce")) {</Command>
<Command>					if (trCurrentPlayer() == p) {</Command>
<Command>						trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>					}</Command>
<Command>					done = false;</Command>
<Command>					chooseSpell(SPELL_FIRE_AND_ICE, 1*trQuestVarGet("selectedCard"));</Command>
<Command>					trQuestVarSet("selectedCard", 0); // setting to zero to disable the message for the other player</Command>
<Command>				} else {</Command>
<Command>					trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>					activeUnit = summonAtTile(1*trQuestVarGet("spellTargetIce"), p, kbGetProtoUnitID("Frost Giant"));</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>					activeUnit = summonAtTile(1*trQuestVarGet("spellTargetFire"), p, kbGetProtoUnitID("Fire Giant"));</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_VALKYRIE_HEAL:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trVectorSetUnitPos("healerPos", "spellCaster");</Command>
<Command>				trVectorSetUnitPos("targetPos", "spellTarget");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trSetUnitOrientation(trGetUnitVector("healerPos", "targetPos"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitOverrideAnimation(50, 0, false, true, -1);</Command>
<Command>				deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				healUnit(1*trQuestVarGet("spellTarget"), 3);</Command>
<Command>			}</Command>
<Command>			case SPELL_COPY_HOMEWORK:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("spybirth.wav","1",-1,"","");</Command>
<Command>				xsEnableRule("spell_copy_homework_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_METEOR:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("townattacked.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("next", deployAtTile(0, "Relic", 1*trQuestVarGet("spellTarget")));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Hero Birth"));</Command>
<Command>				yAddToDatabase("meteors", "next");</Command>
<Command>				yAddUpdateVar("meteors", "time", 2);</Command>
<Command>				yAddUpdateVar("meteors", "tile", trQuestVarGet("spellTarget"));</Command>
<Command>			}</Command>
<Command>			case SPELL_FINAL_EXAM:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("cinematics\15_in\gong.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("pestilencebirth.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p1drawCards", 2);</Command>
<Command>				trQuestVarSet("p2drawCards", 2);</Command>
<Command>			}</Command>
<Command>			case SPELL_SHAPESHIFT:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trSoundPlayFN("changeunit.wav","1",-1,"","");</Command>
<Command>				target = trQuestVarGet("copyTarget");</Command>
<Command>				activeUnit = trQuestVarGet("transformTarget");</Command>
<Command>				mSetVar(activeUnit, "proto", mGetVar(target, "proto"));</Command>
<Command>				mSetVar(activeUnit, "spell", mGetVar(target, "spell"));</Command>
<Command>				mSetVar(activeUnit, "cost", mGetVar(target, "cost"));</Command>
<Command>				mSetVar(activeUnit, "attack", mGetVar(target, "attack"));</Command>
<Command>				mSetVar(activeUnit, "health", mGetVar(target, "health"));</Command>
<Command>				mSetVar(activeUnit, "speed", mGetVar(target, "speed"));</Command>
<Command>				mSetVar(activeUnit, "range", mGetVar(target, "range"));</Command>
<Command>				mSetVar(activeUnit, "laserDirx", mGetVar(target, "laserDirx"));</Command>
<Command>				mSetVar(activeUnit, "laserDirz", mGetVar(target, "laserDirz"));</Command>
<Command>				mSetVar(activeUnit, "keywords", mGetVar(target, "keywords"));</Command>
<Command>				mSetVar(activeUnit, "onAttack", mGetVar(target, "onAttack"));</Command>
<Command>				mSetVar(activeUnit, "onDeath", mGetVar(target, "onDeath"));</Command>
<Command>				mSetString(activeUnit, "ability", mGetString(target, "ability"));</Command>
<Command>				deployAtTile(0, "Kronny Birth SFX", 1*mGetVar(activeUnit, "tile"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trUnitOverrideAnimation(39,0,false,true,-1);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+activeUnit);</Command>
<Command>				trUnitChangeProtoUnit(kbGetProtoUnitName(1*mGetVar(activeUnit, "proto")));</Command>
<Command>				damageUnit(activeUnit, 0);</Command>
<Command>			}</Command>
<Command>			case SPELL_APOCALYPSE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("meteorapproach.wav","1",-1,"","");</Command>

<Command>				trQuestVarSet("apocalypse", 2);</Command>
<Command>				musicToggleBattleMode();</Command>
<Command>				xsEnableRule("spell_apocalypse_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_MIRROR_IMAGE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("recreation.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Vortex start linked", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				addCardToDeck(p, kbGetProtoUnitName(1*mGetVarByQV("spellTarget", "proto")));</Command>
<Command>				// if commander is nottud</Command>
<Command>				if (trQuestVarGet("p"+p+"commanderType") == COMMANDER_NOTTUD) {</Command>
<Command>					addCardToDeck(p, kbGetProtoUnitName(1*mGetVarByQV("spellTarget", "proto")));</Command>
<Command>				}</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				xsEnableRule("spell_mirror_image_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_MEDUSA_STUN:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trVectorSetUnitPos("casterPos", "spellCaster");</Command>
<Command>				trVectorSetUnitPos("targetPos", "spellTarget");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trSetUnitOrientation(trGetUnitVector("casterPos", "targetPos"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitOverrideAnimation(40, 0, false, true, -1);</Command>
<Command>				stunUnit(1*trQuestVarGet("spellTarget"));</Command>
<Command>			}</Command>
<Command>			case SPELL_LAMPADES_CONVERT:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trVectorSetUnitPos("casterPos", "spellCaster");</Command>
<Command>				trVectorSetUnitPos("targetPos", "spellTarget");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trSetUnitOrientation(trGetUnitVector("casterPos", "targetPos"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitOverrideAnimation(37, 0, false, true, -1);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				trUnitConvert(p);</Command>
<Command>				mSetVarByQV("spellTarget", "player", p);</Command>
<Command>				if (mGetVarByQV("spellTarget", "stunTime") == 0) {</Command>
<Command>					if (HasKeyword(CHARGE, 1*mGetVarByQV("spellTarget", "keywords"))) {</Command>
<Command>						mSetVarByQV("spellTarget", "action", ACTION_READY);</Command>
<Command>					} else {</Command>
<Command>						mSetVarByQV("spellTarget", "action", ACTION_SLEEPING);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_RUNE_OF_WATER:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("healingspringbirth.wav","1",-1,"","");</Command>
<Command>				activeUnit = summonAtTile(1*trQuestVarGet("spellTarget"), p, kbGetProtoUnitID("Servant"));</Command>
<Command>				mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				healUnit(1*trQuestVarGet("p"+(3-p)+"commander"), 6);</Command>
<Command>				deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+(3-p)+"commander", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_WATER_CANNON:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shipdeathsplash.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("shockwave.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Meteor Impact Water", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				done = false;</Command>
<Command>				trVectorSetUnitPos("start", "spellTarget");</Command>
<Command>				trVectorSetUnitPos("end", "spellDirection");</Command>
<Command>				trVectorQuestVarSet("dir", trGetUnitVector("start", "end"));</Command>
<Command>				pushUnit(1*trQuestVarGet("spellTarget"), "dir");</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_TIDAL_WAVE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("meteorsplash.wav","1",-1,"","");</Command>
<Command>				for (x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if (mGetVarByQV("allUnits", "cost") < trQuestVarGet("p"+p+"manaflow") && mGetVarByQV("allUnits", "spell") == 0) {]]></Command>
<Command>						stunUnit(1*trQuestVarGet("allUnits"));</Command>
<Command>						deployAtTile(0, "Meteor Impact Water", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_FLUSH:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shipmove1.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("shockwave.wav","1",-1,"","");</Command>
<Command>				tile = mGetVarByQV("p"+p+"commander", "tile");</Command>
<Command>				deployAtTile(0, "Meteor Impact Water", tile);</Command>
<Command>				trVectorSetUnitPos("center", "p"+p+"commander");</Command>
<Command><![CDATA[				for(x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>					target = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>					activeUnit = zGetVarByIndex("tiles", "occupant", target);</Command>
<Command><![CDATA[					if ((activeUnit > 0) && (mGetVar(activeUnit, "spell") == SPELL_NONE)) {]]></Command>
<Command>						trVectorQuestVarSet("pos", kbGetBlockPosition(""+activeUnit));</Command>
<Command>						trVectorQuestVarSet("dir", trGetUnitVector("center", "pos"));</Command>
<Command>						pushUnit(activeUnit, "dir");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_DEEP_DIVE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("meteorsplash.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") + xsFloor(0.5*trQuestVarGet("p"+p+"manaflow")));</Command>
<Command>			}</Command>
<Command>			case SPELL_SEA_EMBRACE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("healingspringbirth.wav","1",-1,"","");</Command>
<Command>				tile = mGetVarByQV("spellTarget", "tile");</Command>
<Command>				deployAtTile(0, "Regeneration SFX", tile);</Command>
<Command>				healUnit(1*trQuestVarGet("spellTarget"), 3);</Command>
<Command>				tile = mGetVarByQV("p"+p+"commander", "tile");</Command>
<Command>				deployAtTile(0, "Regeneration SFX", tile);</Command>
<Command>				healUnit(1*trQuestVarGet("p"+p+"commander"), 3);</Command>
<Command>			}</Command>
<Command>			case SPELL_TELETIDE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shipmove2.wav","1",-1,"","");</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("spellTarget", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("spellDestination"));</Command>
<Command>			}</Command>
<Command>			case SPELL_GUARDIAN_OF_SEA:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("ageadvance.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("bronzebirth.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("p"+p+"commander", "keywords", SetBit(1*mGetVarByQV("p"+p+"commander", "keywords"), GUARD));</Command>
<Command>				mSetVarByQV("p"+p+"commander", "keywords", SetBit(1*mGetVarByQV("p"+p+"commander", "keywords"), ARMORED));</Command>
<Command>				trQuestVarSet("p"+p+"guardianOfTheSea", 1);</Command>
<Command>			}</Command>
<Command>			case SPELL_WRATH_OF_SEA:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("herobirth2.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("arkantosspecial2.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"yeebbonus", 2*mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>				mSetVarByQV("p"+p+"commander", "attack", 2*mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>			}</Command>
<Command>			case SPELL_DROWN:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shipdeathsplash.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Meteor Impact Water", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				addCardToDeck(p, kbGetProtoUnitName(1*mGetVarByQV("spellTarget", "proto")));</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("spellTarget", "tile"), 0);</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					if (yDatabaseNext("allUnits") == trQuestVarGet("spellTarget")) {</Command>
<Command>						yRemoveFromDatabase("allUnits");</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				tileGuard(1*mGetVarByQV("spellTarget", "tile"), false);</Command>
<Command>			}</Command>
<Command>			case SPELL_CLEANSING_WATERS:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("healingspringbirth.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("next", deployAtTile(0, "UI Range Indicator Norse SFX", 1*trQuestVarGet("spelltarget")));</Command>
<Command>				zSetVarByIndex("tiles", "ward", 1*trQuestVarGet("spellTarget"), 1);</Command>
<Command>				yAddToDatabase("tileWardSFX", "next");</Command>
<Command><![CDATA[				for(x=0; < zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("spellTarget"))) {]]></Command>
<Command>					target = zGetVarByIndex("tiles", "neighbor"+x, 1*trQuestVarGet("spellTarget"));</Command>
<Command>					zSetVarByIndex("tiles", "ward", target, 1);</Command>
<Command>					trQuestVarSet("next", deployAtTile(0, "UI Range Indicator Norse SFX", target));</Command>
<Command>					yAddToDatabase("tileWardSFX", "next");</Command>
<Command>				}</Command>
<Command>				// remove ignite</Command>
<Command>				trVectorSetUnitPos("center", "spellTarget");</Command>
<Command>				for(x=yGetDatabaseCount("ignite"); >0) {</Command>
<Command>					yDatabaseNext("ignite", true);</Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("ignite", "center") < 40) {]]></Command>
<Command>						trUnitChangeProtoUnit("Lightning sparks");</Command>
<Command>						yRemoveFromDatabase("ignite");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_DEMON_EAT:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("tartarianspawnbirth1.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("spellCaster", "health", mGetVarByQV("spellCaster", "health") + mGetVarByQV("spellTarget", "health"));</Command>
<Command>				mSetVarByQV("spellCaster", "attack", mGetVarByQV("spellCaster", "attack") + mGetVarByQV("spellTarget", "attack"));</Command>
<Command>				mSetVarByQV("spellCaster", "scale", 1 + 0.25*mGetVarByQV("spellCaster", "health"));</Command>
<Command>				scaleUnit(1*trQuestVarGet("spellCaster"));</Command>
<Command>				mSetVarByQV("spellTarget", "health", 0);</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"),10);</Command>
<Command>			}</Command>
<Command>			case SPELL_SCORPION_STING:</Command>
<Command>			{</Command>
<Command>				battlecry = true;</Command>
<Command>				trVectorSetUnitPos("casterPos", "spellCaster");</Command>
<Command>				trVectorSetUnitPos("targetPos", "spellTile");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trSetUnitOrientation(trGetUnitVector("casterPos", "targetPos"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitOverrideAnimation(39, 0, false, true, -1);</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("spellTarget", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("spellTile"));</Command>
<Command>				trSoundPlayFN("relicselect.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("dialog\genr122f.mp3","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case SPELL_WORLD_SPLITTER:</Command>
<Command>			{</Command>
<Command>				trVectorSetUnitPos("laserstart", "spellTarget");</Command>
<Command>				trVectorSetUnitPos("laserend", "spellDirection");</Command>
<Command>				trVectorQuestVarSet("dir", trGetUnitVector("laserstart", "laserend"));</Command>
<Command>				trVectorQuestVarSet("laserStart", trVectorQuestVarGet("laserStart") + (trVectorQuestVarGet("dir") * 6.0));</Command>
<Command>				tile = mGetVarByQV("spellTarget", "tile");</Command>

<Command>				while(done) {</Command>
<Command>					done = false;</Command>
<Command>					// Travel down the line and find stopping tile</Command>
<Command><![CDATA[					for(z=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>						neighbor = zGetVarByIndex("tiles", "neighbor"+z, tile);</Command>
<Command><![CDATA[						if (neighbor < trQuestVarGet("ztilesend")) {]]></Command>
<Command>							trVectorQuestVarSet("current", kbGetBlockPosition(""+neighbor));</Command>
<Command><![CDATA[							if (trDistanceBetweenVectorsSquared("current", "pos") < 1) {]]></Command>
<Command>								trQuestVarSet("occupant", zGetVarByIndex("tiles", "occupant", neighbor));</Command>
<Command>								if (trQuestVarGet("occupant") > 0) {</Command>
<Command>									yAddToDatabase("worldSplitterHit", "occupant");</Command>
<Command>								}</Command>
<Command>								tile = neighbor;</Command>
<Command>								trVectorQuestVarSet("pos", trVectorQuestVarGet("current") + (trVectorQuestVarGet("dir") * 6.0));</Command>
<Command>								done = true;</Command>
<Command>								break;</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				trVectorQuestVarSet("laserEnd", kbGetBlockPosition(""+tile));</Command>

<Command>				tile = mGetVarByQV("spellTarget", "tile");</Command>

<Command>				trQuestVarSet("laserProj", deployAtTile(p, "Dwarf", tile));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Relic"));</Command>

<Command>				trQuestVarSet("laserAimer", deployAtTile(p, "Dwarf", tile));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserAimer"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Hero Greek Achilles"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>				trImmediateUnitGarrison(""+1*trQuestVarGet("laserAimer"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Petosuchus Projectile"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserAimer"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Wadjet Spit"));</Command>

<Command>				trQuestVarSet("laserPhoenix", deployAtTile(p, "Phoenix", tile));</Command>
<Command>				trVectorSetUnitPos("phoenixPos", "laserPhoenix");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserPhoenix"), true);</Command>
<Command>				trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitOverrideAnimation(15,0,true,true,-1);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Hero Greek Ajax"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Relic"));</Command>
<Command>				trImmediateUnitGarrison(""+1*trQuestVarGet("laserPhoenix"));</Command>
<Command>				trMutateSelected(1*mGetVarByQV("spellTarget", "proto"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserPhoenix"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Phoenix"));</Command>

<Command>				trQuestVarSet("laserMeteorite", deployAtTile(p, "Dwarf", tile));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserMeteorite"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Meteorite"));</Command>
<Command>				trUnitOverrideAnimation(6,0,true,true,-1);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Relic"));</Command>

<Command>				trQuestVarSet("laserGround", deployAtTile(p, "Dwarf", tile));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserGround"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Hero Greek Achilles"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserMeteorite"), true);</Command>
<Command>				trImmediateUnitGarrison(""+1*trQuestVarGet("laserGround"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Meteorite"));</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserGround"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Rocket"));</Command>
<Command>				trSoundPlayFN("attackwarning.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("phoenixselect2.wav","1",-1,"","");</Command>
<Command>				// laser stuff</Command>

<Command>				trQuestVarSet("laserStartY", 10.0);</Command>

<Command>				trVectorQuestVarSet("laserStep", trVectorQuestVarGet("dir") * 2.0);</Command>
<Command>				trVectorQuestVarSet("laserNormal", xsVectorSet(trVectorQuestVarGetZ("dir"), 0, trVectorQuestVarGetX("dir")));</Command>

<Command>				trQuestVarSet("laserStepDist", 0);</Command>
<Command>				trVectorQuestVarSet("laserSFX", trVectorQuestVarGet("laserStart"));</Command>

<Command>				trQuestVarSet("laserheading", 57.295779 * trAngleBetweenVectors("dir", "laserStep"));</Command>


<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserAimer"), true);</Command>
<Command>				trUnitTeleport(trVectorQuestVarGetX("laserStart"), 10.0, trVectorQuestVarGetZ("laserStart"));</Command>
<Command>				trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>

<Command>				trQuestVarSet("laserAngle", 1.550796);</Command>

<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>				trSetSelectedScale(1,1,1);</Command>

<Command>				trQuestVarSet("bossSpell", 2);</Command>
<Command>				trQuestVarSet("bossNext", trTimeMS() + 1000);</Command>

<Command>				zSetProtoUnitStat("Wadjet Spit", p, 1, 8);</Command>
<Command>				xsEnableRule("spell_world_splitter_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_SOUL_SIPHON:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shadeofhadesdeath.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 2 + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>				mSetVarByQV("spellTarget", "health", 0);</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 100);</Command>
<Command>				deployAtTile(0, "Hero Death", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_BLOOD_PRICE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shadeofhadesselect2.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("allyTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				damageUnit(1*trQuestVarGet("enemyTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("allyTarget", "tile"));</Command>
<Command>				deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("enemyTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_DEATH_APPROACHES:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shadeofhadesbirth.wav","1",-1,"","");</Command>
<Command>				target = summonAtTile(1*trQuestVarGet("spellTarget"),p,kbGetProtoUnitID("Shade of Hades"));</Command>
<Command>				mSetVar(target, "action", ACTION_SLEEPING);</Command>
<Command>			}</Command>
<Command>			case SPELL_DOOM:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("shadeofhadesacknowledge2.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				if (HasKeyword(DECAY, 1*mGetVarByQV("spellTarget", "keywords"))) {</Command>
<Command><![CDATA[					if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>						addCardToHand(p, 0, SPELL_DOOM);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_SHADOWSTEP:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("spybirth.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("tile1", mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				trQuestVarSet("tile2", mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*trQuestVarGet("tile1"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*trQuestVarGet("tile2"));</Command>
<Command>				teleportToTile(1*trQuestVarGet("p"+p+"commander"), 1*trQuestVarGet("tile1"));</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("tile2"));</Command>
<Command>			}</Command>
<Command>			case SPELL_FINAL_FRENZY:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("mummyconvert.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "keywords", SetBit(SetBit(1*mGetVarByQV("spellTarget", "keywords"), DECAY), DEADLY));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				spyEffect("Poison SFX");</Command>
<Command>				spyEffect("Chaos effect");</Command>
<Command>			}</Command>
<Command>			case SPELL_CORPSE_PARTY:</Command>
<Command>			{</Command>
<Command>				// If two of the tiles are the same, restart</Command>
<Command>				if ((trQuestVarGet("spellTarget1") - trQuestVarGet("spellTarget2")) * (trQuestVarGet("spellTarget2") - trQuestVarGet("spellTarget3")) * (trQuestVarGet("spellTarget1") - trQuestVarGet("spellTarget3")) == 0) {</Command>
<Command>					if (trCurrentPlayer() == p) {</Command>
<Command>						trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>					}</Command>
<Command>					done = false;</Command>
<Command>					chooseSpell(SPELL_CORPSE_PARTY, 1*trQuestVarGet("selectedCard"));</Command>
<Command>					trQuestVarSet("selectedCard", 0); // setting to zero to disable the message for the other player</Command>
<Command>				} else {</Command>
<Command>					trSoundPlayFN("ancestorsbirth.wav","1",-1,"","");</Command>
<Command>					for(x=3; >0) {</Command>
<Command>						summonAtTile(1*trQuestVarGet("spellTarget"+x), p, kbGetProtoUnitID("Minion"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_UNDEATH:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("ui\thunder1.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("mummyflies.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((mGetVarByQV("allUnits", "player") == p) && (mGetVarByQV("allUnits", "spell") == SPELL_NONE)) {]]></Command>
<Command>						mSetVarByQV("allUnits", "OnDeath", SetBit(1*mGetVarByQV("allUnits", "OnDeath"), DEATH_SUMMON_ZOMBIE));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_RUNE_OF_DARKNESS:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("spellTarget1") == trQuestVarGet("spellTarget2")) {</Command>
<Command>					if (trCurrentPlayer() == p) {</Command>
<Command>						trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>					}</Command>
<Command>					done = false;</Command>
<Command>					chooseSpell(SPELL_RUNE_OF_DARKNESS, 1*trQuestVarGet("selectedCard"));</Command>
<Command>					trQuestVarSet("selectedCard", 0); // setting to zero to disable the message for the other player</Command>
<Command>				} else {</Command>
<Command>					trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>					mSetVarByQV("spellTarget", "health", 0);</Command>
<Command>					damageUnit(1*trQuestVarGet("spellTarget"), 100);</Command>
<Command>					activeUnit = summonAtTile(1*trQuestVarGet("spellTarget1"), p, kbGetProtoUnitID("Shade of Hades"));</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>					activeUnit = summonAtTile(1*trQuestVarGet("spellTarget2"), p, kbGetProtoUnitID("Shade of Hades"));</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_ZENOS_PARADOX:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("spybirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("timeshift.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("tile1", mGetVarByQV("spellTarget1", "tile"));</Command>
<Command>				trQuestVarSet("tile2", mGetVarByQV("spellTarget2", "tile"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*trQuestVarGet("tile1"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*trQuestVarGet("tile2"));</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget2"), 1*trQuestVarGet("tile1"));</Command>
<Command>				teleportToTile(1*trQuestVarGet("spellTarget1"), 1*trQuestVarGet("tile2"));</Command>
<Command>			}</Command>
<Command>			case SPELL_SCRAP_METAL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("tributereceived.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"mana", 1 + trQuestVarGet("p"+p+"mana"));</Command>
<Command>			}</Command>
<Command>			case SPELL_MAGNETIZE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("armory.wav","1",-1,"","");</Command>
<Command>				magnetize(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("spellCaster"));</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					if (yDatabaseNext("allUnits") == trQuestVarGet("spellCaster")) {</Command>
<Command>						yRemoveFromDatabase("allUnits");</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_ELECTRIC_GRID:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("tower.wav","1",-1,"","");</Command>
<Command>				xsEnableRule("spell_electric_grid_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_ZAP_GUN:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("sonofosirisbolt.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "keywords", SetBit(1*mGetVarByQV("spellTarget", "keywords"), LIGHTNING));</Command>
<Command>			}</Command>
<Command>			case SPELL_COMPRESS:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("changeunit.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Osiris Box Glow", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				p = mGetVarByQV("spellTarget", "player");</Command>
<Command>				trVectorSetUnitPos("pos", "spellTarget");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (trQuestVarGet("allUnits") == trQuestVarGet("spellTarget")) {</Command>
<Command>						continue;</Command>
<Command><![CDATA[					} else if ((mGetVarByQV("allUnits", "player") == p) && (mGetVarByQV("allUnits", "spell") == SPELL_NONE)) {]]></Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("allUnits", "pos") < 40) {]]></Command>
<Command>							magnetize(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("allUnits"));</Command>
<Command>							yRemoveFromDatabase("allUnits");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_UPGRADE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("armory.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "keywords", SetBit(1*mGetVarByQV("spellTarget", "keywords"), MAGNETIC));</Command>
<Command>				mSetVarByQV("spellTarget", "health", 2 + mGetVarByQV("spellTarget", "health"));</Command>
<Command>				mSetVarByQV("spellTarget", "attack", 2 + mGetVarByQV("spellTarget", "attack"));</Command>
<Command>			}</Command>
<Command>			case SPELL_PROFITEERING:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("plentybirth.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "OnAttack", SetBit(1*mGetVarByQV("spellTarget", "OnAttack"), ATTACK_DRAW_CARD));</Command>
<Command>			}</Command>
<Command>			case SPELL_WARNING_SHOT:</Command>
<Command>			{</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+deployAtTile(0, "Meteorite", 1*mGetVarByQV("spellTarget", "tile")));</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>				trSoundPlayFN("implode start.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("titanfall.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 1 + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>			}</Command>
<Command>			case SPELL_PORTABLE_SPELL_SHIELD:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("petsuchosattack.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>				spyEffect("UI Range Indicator Norse SFX");</Command>
<Command>				mSetVarByQV("spellTarget", "keywords", SetBit(SetBit(1*mGetVarByQV("spellTarget", "keywords"), WARD), ARMORED));</Command>
<Command>			}</Command>
<Command>			case SPELL_REWIND:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("suckup3.wav","1",-1,"","");</Command>
<Command>				returnToHand(1*trQuestVarGet("spellTarget"));</Command>
<Command>			}</Command>
<Command>			case SPELL_TIME_POCKET:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("timeshift.wav","1",-1,"","");</Command>
<Command>				tile = trQuestVarGet("spellTarget");</Command>
<Command>				deployAtTile(0, "Tremor", tile);</Command>
<Command><![CDATA[				for(x=0; < zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("spellTarget"))) {]]></Command>
<Command>					neighbor = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>					deployAtTile(0, "Osiris SFX", neighbor);</Command>
<Command>					target = zGetVarByIndex("tiles", "occupant", neighbor);</Command>
<Command>					if (target > 0) {</Command>
<Command>						stunUnit(target);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				target = zGetVarByIndex("tiles", "occupant", tile);</Command>
<Command><![CDATA[				if ((target > 0) && (mGetVar(target, "spell") == SPELL_NONE)) {]]></Command>
<Command>					stunUnit(target);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_BANHAMMER:</Command>
<Command>			{</Command>
<Command>				done = false;</Command>
<Command>				trSoundPlayFN("attackwarning.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				trVectorSetUnitPos("pos", "spellTarget");</Command>
<Command>				for(x=25; >=0) {</Command>
<Command>					trQuestVarSet("next", deployAtTile(1, "Dwarf", 1*mGetVarByQV("spellTarget", "tile")));</Command>
<Command>					trQuestVarSet("posY", 50.0 - 0.08*xsPow(x - 25, 2));</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>					trSetUnitOrientation(xsVectorSet(1,0,0), xsVectorSet(0,-1,0), true);</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Wadjet Spit"));</Command>
<Command>					trUnitTeleport(trVectorQuestVarGetX("pos"), trQuestVarGet("posy"), trVectorQuestVarGetZ("pos"));</Command>
<Command>					trQuestVarSet("hammerPos"+x, trQuestVarGet("next"));</Command>
<Command>				}</Command>
<Command>				trQuestVarSet("hammerNext", trTimeMS() + 1000);</Command>
<Command>				trQuestVarSet("hammerStep", 0);</Command>
<Command>				trQuestVarSet("hammerPosPrev", trQuestVarGet("hammerPos25"));</Command>
<Command>				trQuestVarSet("banhammer", trGetNextUnitScenarioNameNumber());</Command>
<Command>				trArmyDispatch("1,10", "Dwarf",1, 119,0,1,0,true);</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Thor hammer"));</Command>
<Command>				trUnitSetAnimationPath("0,0,0,0,0,0,0");</Command>
<Command>				xsEnableRule("spell_banhammer_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_POWER_SUIT:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("ageadvance.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("herobirth2.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Traitors effect", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>				mSetVarByQV("p"+p+"commander", "keywords", SetBit(1*mGetVarByQV("p"+p+"commander", "keywords"), MAGNETIC));</Command>
<Command>			}</Command>
<Command>			case SPELL_GEAR_FACTORY:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("armory.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("siegecamp.wav","1",-1,"");</Command>
<Command>				summonAtTile(1*trQuestVarGet("spellTarget"), p, kbGetProtoUnitID("Guild"));</Command>
<Command>			}</Command>
<Command>			case SPELL_ASSEMBLY_LINE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("siegecamp.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>					yDatabaseNext("p"+p+"hand");</Command>
<Command>					addCardToDeck(p, kbGetProtoUnitName(1*mGetVarByQV("p"+p+"hand", "proto")), 1*mGetVarByQV("p"+p+"hand","spell"));</Command>
<Command>				}</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", 1 + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>			}</Command>
<Command>			case SPELL_BORROWED_TIME:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("sentinelbirth.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("vortexstart.wav","1",-1,"","");</Command>
<Command>				trQuestVarSet("p"+p+"borrowedTime", 1 + trQuestVarGet("p"+p+"borrowedTime"));</Command>
<Command>			}</Command>
<Command>			case SPELL_FORTIFY:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("wall.wav","1",-1,"","");</Command>
<Command>				xsEnableRule("spell_fortify_activate");</Command>
<Command>			}</Command>
<Command>			case SPELL_CHOOSE_DIRECTION:</Command>
<Command>			{</Command>
<Command>				trVectorSetUnitPos("start", "spellCaster");</Command>
<Command>				trVectorSetUnitPos("end", "spellDirection");</Command>
<Command>				trVectorQuestVarSet("dir", trGetUnitVector("start", "end"));</Command>
<Command>				mSetVarByQV("spellCaster", "laserDirx", trVectorQuestVarGetX("dir") * 100000);</Command>
<Command>				mSetVarByQV("spellCaster", "laserDirz", trVectorQuestVarGetZ("dir") * 100000);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("spellCaster"));</Command>
<Command>				trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>
<Command>				trUnitHighlight(0.5, false);</Command>
<Command>				trSoundPlayFN("storehouse.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case SPELL_DOMINANCE:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("tartariangateselect.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("p"+p+"commander", "attack", 1 + mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>				startAttack(1*trQuestVarGet("p"+p+"commander"), 1*trQuestVarGet("spellTarget"));</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_SPIDER_LAIR:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("spiderscast.wav","1",-1,"","");</Command>
<Command>				for (x=3; >0) {</Command>
<Command>					target = yGetDatabaseCount("p"+p+"hand");</Command>
<Command>					generateCard(p, kbGetProtoUnitID("Spider Egg"), 0, false);</Command>
<Command><![CDATA[					if (target < 10) {]]></Command>
<Command>						mSetVarByQV("next", "cost", 0);</Command>
<Command>						mSetVarByQV("next", "keywords", Keyword(DECAY) + Keyword(AIRDROP));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_TAVERN_BRAWL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("specialist.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("chaos.wav","1",-1,"","");</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					activeUnit = yDatabaseNext("allUnits");</Command>
<Command>					trQuestVarSet("pointer", yGetPointer("allUnits"));</Command>
<Command>					trQuestVarSetFromRand("temp", 1, yGetDatabaseCount("allUnits") - 1, true);</Command>
<Command>					for(y=trQuestVarGet("temp"); > 1) {</Command>
<Command>						yDatabaseNext("allUnits");</Command>
<Command>					}</Command>
<Command>					target = yDatabaseNext("allUnits");</Command>
<Command>					startAttack(activeUnit, target, HasKeyword(AMBUSH, 1*mGetVar(activeUnit, "keywords")), true);</Command>
<Command>					ySetPointer("allUnits", trQuestVarGet("pointer"));</Command>
<Command>				}</Command>
<Command>				done = false;</Command>
<Command>				xsEnableRule("spell_attack_complete");</Command>
<Command>			}</Command>
<Command>			case SPELL_NICKS_PORTAL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("vortexstart.wav","1",-1,"","");</Command>
<Command>				yClearDatabase("nickTiles");</Command>
<Command>				for (z=zGetBankCount("tiles"); >0) {</Command>
<Command>					zBankNext("tiles");</Command>
<Command><![CDATA[					if (zGetVar("tiles", "terrain") == 0 && zGetVar("tiles", "occupant") == 0) {]]></Command>
<Command>						if (zGetVar("tiles", "ward") == 0) {</Command>
<Command>							yAddToDatabase("nickTiles", "tiles");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				trQuestVarSetFromRand("nickRandom", 1, yGetDatabaseCount("nickTiles"), true);</Command>
<Command>				for(x=trQuestVarGet("nickRandom"); >0) {</Command>
<Command>					yDatabaseNext("nickTiles");</Command>
<Command>				}</Command>
<Command>				deployAtTile(0, "Olympus Temple SFX", 1*trQuestVarGet("nickTiles"));</Command>
<Command>				bool go = true;</Command>
<Command>				while(go){</Command>
<Command>					trQuestVarSetFromRand("nickClass", 0, 4, true);</Command>
<Command>					trQuestVarSetFromRand("nickCard", 7, 29, true);</Command>
<Command>					ChatLog(0,""+1*trQuestVarGet("nickCard")+" card class "+1*trQuestVarGet("nickClass"));</Command>
<Command>					trQuestVarSet("nickProto", CardToProto(1*(trQuestVarGet("nickCard") + 30 * trQuestVarGet("nickClass"))));</Command>
<Command>					if(trQuestVarGet("nickProto") != kbGetProtoUnitID("Statue of Lightning")){</Command>
<Command>						go = false;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				target = summonAtTile(1*trQuestVarGet("nickTiles"),p,1*trQuestVarGet("nickProto"));</Command>
<Command>				if(HasKeyword(CHARGE, 1*mGetVar(target, "keywords")) == false){</Command>
<Command>					mSetVar(target, "action", ACTION_SLEEPING);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_PETTY_LASER:</Command>
<Command>			{</Command>
<Command>				for (x = 2 + trQuestVarGet("p"+p+"spellDamage"); >0) {</Command>
<Command>					trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 2 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				addCardToDeck(p, "", SPELL_THICK_LASER);</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_THICK_LASER:</Command>
<Command>			{</Command>
<Command>				for (x = 4 + trQuestVarGet("p"+p+"spellDamage"); >0) {</Command>
<Command>					trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 4 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				addCardToDeck(p, "", SPELL_GRAND_LASER);</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_GRAND_LASER:</Command>
<Command>			{</Command>
<Command>				for (x = 6 + trQuestVarGet("p"+p+"spellDamage"); >0) {</Command>
<Command>					trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 6 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				addCardToDeck(p, "", SPELL_OMEGA_LASER);</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_OMEGA_LASER:</Command>
<Command>			{</Command>
<Command>				for (x = 8 + trQuestVarGet("p"+p+"spellDamage"); >0) {</Command>
<Command>					trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 8 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				addCardToDeck(p, "", SPELL_GODLY_LASER);</Command>
<Command>				shuffleDeck(p);</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_GODLY_LASER:</Command>
<Command>			{</Command>
<Command>				for (x = 10 + trQuestVarGet("p"+p+"spellDamage"); >0) {</Command>
<Command>					trSoundPlayFN("cranegrunt1.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 10 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_SPACE_VENT:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("pigout.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("pigout.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("pigout.wav","1",-1,"","");</Command>

<Command>				//for(ventPlayer=2; >0) {</Command>
<Command>					int ventPlayer = p;</Command>
<Command>					string disText = "";</Command>
<Command>					int disCount = 0;</Command>
<Command>					for(x=yGetDatabaseCount("p"+ventPlayer+"hand"); >0) {</Command>
<Command>						disCount = disCount + 1;</Command>
<Command>						yDatabaseNext("p"+ventPlayer+"hand", true);</Command>
<Command>						trSoundPlayFN("pigout.wav","1",-1,"","");</Command>
<Command>						trVectorSetUnitPos("pos", "p"+ventPlayer+"hand");</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelectByID(1*yGetVar("p"+ventPlayer+"hand", "pos"));</Command>
<Command>						trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*trQuestVarGet("p"+ventPlayer+"hand"), true);</Command>
<Command>						trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>						trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),0, true);</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trArmySelect("1,10");</Command>
<Command>						trUnitChangeProtoUnit("Hero Death");</Command>
<Command>						if (mGetVarByQV("p"+ventPlayer+"hand", "spell") == SPELL_NONE) {</Command>
<Command>							yClearDatabase("ventTiles");</Command>
<Command>							findAvailableTiles(1*mGetVarByQV("p"+ventPlayer+"commander", "tile"), 1, "ventTiles", false);</Command>
<Command>							if(yGetDatabaseCount("ventTiles") > 0){</Command>
<Command>								int ventUnit = summonAtTile(1*yDatabaseNext("ventTiles"),ventPlayer,1*mGetVarByQV("p"+ventPlayer+"hand", "proto"));</Command>
<Command>								if(HasKeyword(CHARGE, 1*mGetVar(ventUnit, "keywords")) == true){</Command>
<Command>									mSetVar(ventUnit, "action", ACTION_READY);</Command>
<Command>								} else {</Command>
<Command>									mSetVar(ventUnit, "action", ACTION_SLEEPING);</Command>
<Command>								}</Command>
<Command>								stunUnit(ventUnit);</Command>
<Command>							} else {</Command>
<Command><![CDATA[								if(disCount < 4){]]></Command>
<Command>									disText = disText + trStringQuestVarGet("card_" + 1*mGetVarByQV("p"+ventPlayer+"hand", "proto") + "_name") + " ";</Command>
<Command>								} else {</Command>
<Command>									disText = "" + disCount + " cards";</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						} else {</Command>
<Command><![CDATA[							if(disCount < 4){]]></Command>
<Command>								disText = disText + trStringQuestVarGet("spell_" + 1*mGetVarByQV("p"+ventPlayer+"hand", "spell") + "_name") + " ";</Command>
<Command>							} else {</Command>
<Command>								disText = "" + disCount + " cards";</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						zSetVarByIndex("p"+ventPlayer+"handPos", "occupied", 1*yGetVar("p"+ventPlayer+"hand", "pos"), 0);</Command>
<Command>						yRemoveFromDatabase("p"+ventPlayer+"hand");</Command>
<Command>					}</Command>
<Command>					ChatLog(ventPlayer, "Discarded " + disText);</Command>
<Command>					ChatLog((3-ventPlayer), "Opponent discarded " + disText);</Command>
<Command>				//}</Command>

<Command>			}</Command>
<Command>			case SPELL_REFRESH_MANA:</Command>
<Command>			{</Command>
<Command>				int refreshCount = xsMax(0, trQuestVarGet("maxMana") - trQuestVarGet("p"+p+"mana"));</Command>
<Command>				if(refreshCount > 5){</Command>
<Command>					refreshCount = 5;</Command>
<Command>				}</Command>
<Command>				for(x=refreshCount; >0) {</Command>
<Command>					if (yGetDatabaseCount("p"+p+"deck") > 0) {</Command>
<Command>						int refreshProto = yDatabaseNext("p"+p+"deck");</Command>
<Command>						if(refreshCount == 1){</Command>
<Command>							if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>								ChatLog(p, "Discarded " + trStringQuestVarGet("card_" + refreshProto + "_Name") + " from your deck.");</Command>
<Command>							} else {</Command>
<Command>								ChatLog(p, "Discarded " + trStringQuestVarGet("spell_" + 1*yGetVar("p"+p+"deck", "spell") + "_Name") + " from your deck.");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if(refreshCount > 1){</Command>
<Command>					ChatLog(p, "Discarded " + refreshCount + " cards from your deck.");</Command>
<Command>				}</Command>
<Command>				trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") + refreshCount);</Command>
<Command>				updateRoxasHealth(p);</Command>
<Command>				updateHandPlayable(p);</Command>
<Command>				updateMana();</Command>
<Command>				trSoundPlayFN("skypassagein.wav", "1", -1, "","");</Command>
<Command>				deployAtTile(0, "Osiris Box Glow", 1*mGetVarByQV("p" + p + "commander", "tile"));</Command>
<Command>			}</Command>
<Command>			case SPELL_ELDRITCH_WHISPERS:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "health", 5 + mGetVarByQV("spellTarget", "health"));</Command>
<Command>				if(1*mGetVarByQV("spellTarget", "player") != p){</Command>
<Command>					addCardToDeck(p, "", SPELL_ELDRITCH_RITUAL);</Command>
<Command>					shuffleDeck(p);</Command>
<Command>					trSoundPlayFN("spybirth.wav","1",-1,"","");</Command>
<Command>					deployAtTile(0, "Curse SFX", 1*mGetVarByQV("p" + p + "commander", "tile"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_ELDRITCH_RITUAL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>				mSetVarByQV("spellTarget", "attack", 5 + mGetVarByQV("spellTarget", "attack"));</Command>
<Command>				if(1*mGetVarByQV("spellTarget", "player") != p){</Command>
<Command>					addCardToDeck(p, "Flying Purple Hippo");</Command>
<Command>					shuffleDeck(p);</Command>
<Command>					trSoundPlayFN("changeunit.wav","1",-1,"","");</Command>
<Command>					deployAtTile(0, "Kronny Birth SFX", 1*mGetVarByQV("p" + p + "commander", "tile"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case SPELL_CONS_LIBRA:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("constellations", trQuestVarGet("constellations") + 1);</Command>
<Command>				healUnit(1*trQuestVarGet("p"+p+"commander"), 1*trQuestVarGet("constellations"));</Command>
<Command>				deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>				for(x=trQuestVarGet("constellations"); >0) {</Command>
<Command>					trSoundPlayFN("heal.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				ChatLog(0, "Constellations played: " + 1*trQuestVarGet("constellations"));</Command>
<Command>			}</Command>
<Command>			case SPELL_CONS_GEMINI:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("constellations", trQuestVarGet("constellations") + 1);</Command>
<Command>				activeUnit = summonAtTile(1*trQuestVarGet("spellDestination"),p,1*mGetVarByQV("spellTarget", "proto"));</Command>
<Command>				mSetVar(activeUnit, "health", 1*trQuestVarGet("constellations"));</Command>
<Command>				mSetVar(activeUnit, "attack", 1*trQuestVarGet("constellations"));</Command>
<Command>				if (HasKeyword(CHARGE, 1*mGetVar(activeUnit, "keywords"))) {</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_READY);</Command>
<Command>				} else {</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				}</Command>
<Command>				for(x=trQuestVarGet("constellations"); >0) {</Command>
<Command>					trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				ChatLog(0, "Constellations played: " + 1*trQuestVarGet("constellations"));</Command>
<Command>			}</Command>
<Command>			case SPELL_CONS_TAURUS:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("constellations", trQuestVarGet("constellations") + 1);</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", trQuestVarGet("constellations") + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>				deployAtTile(0, "Curse SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>				for(x=trQuestVarGet("constellations"); >0) {</Command>
<Command>					trSoundPlayFN("temple.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				ChatLog(0, "Constellations played: " + 1*trQuestVarGet("constellations"));</Command>
<Command>			}</Command>
<Command>			case SPELL_CONS_ORION:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("constellations", trQuestVarGet("constellations") + 1);</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((mGetVarByQV("allUnits", "spell") == SPELL_NONE) &&]]></Command>
<Command>						(mGetVarByQV("allUnits", "player") == p)) {</Command>
<Command>						mSetVarByQV("allUnits", "health", 1*trQuestVarGet("constellations") + mGetVarByQV("allUnits", "health"));</Command>
<Command>						mSetVarByQV("allUnits", "attack", 1*trQuestVarGet("constellations") + mGetVarByQV("allUnits", "attack"));</Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				for(x=trQuestVarGet("constellations"); >0) {</Command>
<Command>					trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>				ChatLog(0, "Constellations played: " + 1*trQuestVarGet("constellations"));</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if (trQuestVarGet("selectedCard") >= 0) {</Command>
<Command>			if (trCurrentPlayer() == 3 - trQuestVarGet("activePlayer")) {</Command>
<Command>				trMessageSetText("("+1*trQuestVarGet("spell_"+spell+"_cost")+")"+trStringQuestVarGet("spell_"+spell+"_name")+": "+trStringQuestVarGet("spell_"+spell+"_description"), -1);</Command>
<Command>			}</Command>
<Command><![CDATA[			ChatLog(0, "<color={Playercolor("+p+")}>{Playername("+p+")}</color> cast " + trStringQuestVarGet("spell_"+1*trQuestVarGet("currentSpell")+"_name"));]]></Command>
<Command>		}</Command>

<Command>		if (done) {</Command>
<Command>			castEnd();</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("gameplayPhase", GAMEPLAY_ATTACKING);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_party_up_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int proto = 0;</Command>
<Command>		int target = 3;</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>			proto = yDatabaseNext("p"+p+"deck");</Command>
<Command>			if (yGetVar("p"+p+"deck", "spell") > 0) {</Command>
<Command>				proto = yGetVar("p"+p+"deck", "spell");</Command>
<Command>				if (trQuestVarGet("spell_"+proto+"_cost") == 1) {</Command>
<Command>					ySetPointer("p"+p+"deck", 1 + yGetPointer("p"+p+"deck"));</Command>
<Command>					drawCard(p);</Command>
<Command>					target = target - 1;</Command>
<Command>					if (target == 0) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			} else if (trQuestVarGet("card_"+proto+"_cost") == 1) {</Command>
<Command>				yDatabaseNext("p"+p+"deck", false, true);</Command>
<Command>				drawCard(p);</Command>
<Command>				target = target - 1;</Command>
<Command>				if (target == 0) {</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		xsDisableRule("spell_party_up_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_copy_homework_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	int card = 0;</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		for(x=3; >0) {</Command>
<Command><![CDATA[			if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>				trQuestVarSetFromRand("chooseClass", 1, 2, true);</Command>
<Command>				trQuestVarSetFromRand("chooseCard", 0, 29, true);</Command>
<Command>				card = 30*trQuestVarGet("p"+(3-p)+"class"+1*trQuestVarGet("chooseClass")) + trQuestVarGet("chooseCard");</Command>
<Command>				generateCard(p, CardToProto(card), CardToSpell(card));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spell_copy_homework_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_apocalypse_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command><![CDATA[		for(x=yGetDatabaseCount("p"+p+"hand"); < 10) {]]></Command>
<Command>			addCardToHand(p, 0, SPELL_METEOR, true);</Command>
<Command>			mSetVarByQV("next", "cost", 0);</Command>
<Command>		}</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		xsDisableRule("spell_apocalypse_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_fortify_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command><![CDATA[		for(x=yGetDatabaseCount("p"+p+"hand"); < 10) {]]></Command>
<Command>			addCardToHand(p, kbGetProtoUnitID("Wall Connector"));</Command>
<Command>		}</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		xsDisableRule("spell_fortify_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_mirror_image_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int proto = mGetVarByQV("spellTarget", "proto");</Command>
<Command><![CDATA[		if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>			addCardToHand(p, proto);</Command>
<Command>			updateHandPlayable(p);</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spell_mirror_image_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_class_time_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"deck");</Command>
<Command>			if (yGetVar("p"+p+"deck", "spell") > 0) {</Command>
<Command>				yDatabaseNext("p"+p+"deck", false, true);</Command>
<Command>				drawCard(p);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"deck");</Command>
<Command>			if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>				yDatabaseNext("p"+p+"deck", false, true);</Command>
<Command>				drawCard(p);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		xsDisableRule("spell_class_time_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_attack_complete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + yGetDatabaseCount("pushes") == 0) && (trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop"))) ||]]></Command>
<Command>		(trTime() > cActivationTime + 3)) {</Command>
<Command>		castEnd();</Command>
<Command>		xsDisableRule("spell_attack_complete");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_snipe_complete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if ((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + trQuestVarGet("lightningActivate") - trQuestVarGet("lightningPop") == 0) ||]]></Command>
<Command>		(trTime() > cActivationTime + 3)) {</Command>
<Command>		int tile = mGetVarByQV("spelltarget", "tile");</Command>
<Command>		deployAtTile(0, "Arkantos God Out", tile);</Command>
<Command>		mSetVarByQV("spellshooter", "attack", mGetVarByQV("spellshooter", "attack") - mGetVarByQV("spellshooter", "range"));</Command>
<Command>		castEnd();</Command>
<Command>		xsDisableRule("spell_snipe_complete");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_whirlwind_sfx</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = mGetVarByQV("spellTarget", "player");</Command>
<Command>	if (trTimeMS() > trQuestVarGet("spellEnd")) {</Command>
<Command>		for(x=3; >0) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("proj"+x), true);</Command>
<Command>			trUnitChangeProtoUnit("Rocket");</Command>
<Command>		}</Command>
<Command>		trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*mGetVarByQV("spellTarget", "tile")));</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command><![CDATA[				if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>					startAttack(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("allUnits"), false, false);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("spell_attack_complete");</Command>
<Command>		xsDisableRule("spell_whirlwind_sfx");</Command>
<Command>	} else {</Command>
<Command>		float diff = trTimeMS() - trQuestVarGet("spellNext");</Command>
<Command>		trQuestVarSet("spellNext", trTimeMS());</Command>
<Command>		trQuestVarSet("spellAngle", fModulo(6.283185, trQuestVarGet("spellAngle") + 0.02 * diff));</Command>
<Command>		for(x=3; >0) {</Command>
<Command>			trQuestVarSet("spellAngle", fModulo(6.283185, trQuestVarGet("spellAngle") + 2.094395));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("proj"+x), true);</Command>
<Command>			trVectorSetFromAngle("dir", trQuestVarGet("spellAngle"));</Command>
<Command>			trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_projectile_complete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trVectorSetUnitPos("spellProjectileStart", "spellProjectile");</Command>
<Command>	if ((trTime()-cActivationTime) >= 4){</Command>
<Command>		trVectorQuestVarSet("spellProjectileStart", trVectorQuestVarGet("spellProjectileEnd"));</Command>
<Command>	}</Command>
<Command><![CDATA[	if (trDistanceBetweenVectorsSquared("spellProjectileStart", "spellProjectileEnd") < 8) {]]></Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("spellProjectile"), true);</Command>
<Command>		trUnitDestroy();</Command>
<Command>		switch(1*trQuestVarGet("currentSpell"))</Command>
<Command>		{</Command>
<Command>			case SPELL_PISTOL_SHOT:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("arrowonwood1.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("arrowonwood2.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("arrowonflesh3.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("arrowonflesh4.wav","1",-1,"","");</Command>
<Command>				mSetVarByQV("spellTarget", "health", 0);</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 6900);</Command>
<Command>			}</Command>
<Command>			case SPELL_MIRROR_REFLECTION:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("restorationbirth.wav","1",-1,"","");</Command>

<Command>				zBankNext("tiles");</Command>
<Command>				trQuestVarSet("temp", trQuestVarGet("tiles"));</Command>
<Command>				for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>					zBankNext("tiles");</Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("tiles", "spellProjectileEnd") < trDistanceToVectorSquared("temp", "spellProjectileEnd")) {]]></Command>
<Command>						trQuestVarSet("temp", trQuestVarGet("tiles"));</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				deployAtTile(0, "Osiris Box Glow", 1*trQuestVarGet("temp"));</Command>
<Command>				int activeUnit = summonAtTile(1*trQuestVarGet("temp"), 1*mGetVarByQV("spellTarget", "player"), 1*mGetVarByQV("spellTarget", "proto"));</Command>
<Command>				if(HasKeyword(CHARGE, 1*mGetVar(activeUnit, "keywords")) == false){</Command>
<Command>					mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>				}</Command>
<Command>				mSetVar(activeUnit, "attack", mGetVarByQV("spellTarget", "attack"));</Command>
<Command>				mSetVar(activeUnit, "health", mGetVarByQV("spellTarget", "health"));</Command>
<Command>				mSetVar(activeUnit, "speed", mGetVarByQV("spellTarget", "speed"));</Command>
<Command>				mSetVar(activeUnit, "range", mGetVarByQV("spellTarget", "range"));</Command>
<Command>				mSetVar(activeUnit, "keywords", mGetVarByQV("spellTarget", "keywords"));</Command>
<Command>				mSetVar(activeUnit, "onAttack", mGetVarByQV("spellTarget", "onAttack"));</Command>
<Command>				mSetVar(activeUnit, "onDeath", mGetVarByQV("spellTarget", "onDeath"));</Command>
<Command>			}</Command>
<Command>			case SPELL_PYROBALL:</Command>
<Command>			{</Command>
<Command>				trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>				damageUnit(1*trQuestVarGet("spellTarget"), 6 + trQuestVarGet("p"+1*trQuestVarGet("activePlayer")+"spellDamage"));</Command>
<Command>				deployAtTile(0, "Meteor Impact Ground", 1*mGetVarByQV("spellTarget", "tile"));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		castEnd();</Command>
<Command>		xsDisableRule("spell_projectile_complete");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_elven_apocalypse_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command><![CDATA[		for(x=yGetDatabaseCount("p"+p+"hand"); < 10) {]]></Command>
<Command>			trQuestVarSetFromRand("temp", 1, 4, true);</Command>
<Command>			if(trQuestVarGet("temp") == 1){</Command>
<Command>				addCardToHand(p, kbGetProtoUnitID("Hetairoi"), 0, true);</Command>
<Command>			} else if(trQuestVarGet("temp") == 2){</Command>
<Command>				addCardToHand(p, kbGetProtoUnitID("Hero Greek Theseus"), 0, true);</Command>
<Command>			} else if(trQuestVarGet("temp") == 3){</Command>
<Command>				addCardToHand(p, kbGetProtoUnitID("Hero Greek Hippolyta"), 0, true);</Command>
<Command>			} else {</Command>
<Command>				addCardToHand(p, kbGetProtoUnitID("Hero Chinese Immortal"), 0, true);</Command>
<Command>			}</Command>
<Command>			mSetVarByQV("next", "cost", 0);</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spell_elven_apocalypse_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_electric_grid_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		for(x=2; >0) {</Command>
<Command><![CDATA[			if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>				addCardToHand(p, kbGetProtoUnitID("Outpost"));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spell_electric_grid_activate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void laserEnd(int eventId = -1) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("laserGround"), true);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Rocket"));</Command>
<Command>	trQuestVarSet("bossSpell", 4);</Command>
<Command>	trQuestVarSet("laserEndTime", trTimeMS() + 500);</Command>
<Command>}</Command>

<Command>rule spell_world_splitter_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	if (trQuestVarGet("bossSpell") == 2) {</Command>
<Command>		if (trTimeMS() > trQuestVarGet("bossNext")) {</Command>
<Command>			trQuestVarSet("laserCurDist", 0);</Command>
<Command>			trQuestVarSet("laserNextDist", 10.0 * xsCos(trQuestVarGet("laserAngle")) / xsSin(trQuestVarGet("laserAngle")));</Command>
<Command>			trQuestVarSet("laserNextDistSquared", xsPow(trQuestVarGet("laserNextDist"), 2));</Command>
<Command>			trQuestVarSet("speed", 60.0 * (trQuestVarGet("laserNextDist") - trQuestVarGet("laserCurDist")));</Command>

<Command>			zSetProtoUnitStat("Wadjet Spit", p, 1, trQuestVarGet("speed"));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserGround"), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Wadjet Spit"));</Command>
<Command>			trUnitMoveToPoint(trVectorQuestVarGetX("laserEnd"),0,trVectorQuestVarGetZ("laserEnd"), -1);</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>			trUnitHighlight(3.0, false);</Command>
<Command>			trSetSelectedScale(12.0,12.0,50.0);</Command>
<Command>			trSoundPlayFN("sonofosirisbolt.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("nidhoggflame2.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("phoenixattack.wav","1",-1,"","");</Command>
<Command>			trQuestVarSet("bossSpell", 3);</Command>
<Command>			trQuestVarSet("laserEndTime", trTimeMS() + 2000);</Command>
<Command>		}</Command>
<Command>	} else if (trQuestVarGet("bossSpell") == 3) {</Command>
<Command>		trVectorQuestVarSet("laserPos", kbGetBlockPosition(""+1*trQuestVarGet("laserGround"), true));</Command>

<Command>		// adjust speed;</Command>
<Command>		trQuestVarSet("laserCurDistSquared", trDistanceBetweenVectorsSquared("laserPos", "laserStart"));</Command>
<Command>		if (trQuestVarGet("laserCurDistSquared") > trQuestVarGet("laserNextDistSquared")) {</Command>
<Command>			trQuestVarSet("laserCurDist", xsSqrt(trQuestVarGet("laserCurDistSquared")));</Command>
<Command>			trQuestVarSet("laserAngle", xsAtan(10.0 / trQuestVarGet("laserCurDist")) - 0.02);</Command>

<Command>			trQuestVarSet("laserNextDist", 10.0 * xsCos(trQuestVarGet("laserAngle")) / xsSin(trQuestVarGet("laserAngle")));</Command>
<Command>			trQuestVarSet("laserNextDistSquared", xsPow(trQuestVarGet("laserNextDist"), 2));</Command>
<Command>			trQuestVarSet("speed", 60.0 * (trQuestVarGet("laserNextDist") - trQuestVarGet("laserCurDist")));</Command>
<Command>			zSetProtoUnitStat("Wadjet Spit", p, 1, trQuestVarGet("speed"));</Command>
<Command>		}</Command>

<Command>		if (trQuestVarGet("laserCurDist") > trQuestVarGet("laserStepDist") + 2.0) {</Command>
<Command>			bool f = true;</Command>
<Command><![CDATA[			while(trQuestVarGet("laserStepDist") < trQuestVarGet("laserCurDist")) {]]></Command>
<Command>				trQuestVarSet("next", trGetNextUnitScenarioNameNumber());</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("laserSFX"),0,trVectorQuestVarGetZ("laserSFX"),trQuestVarGet("laserheading"),f);</Command>
<Command>				f = false;</Command>
<Command>				trQuestVarSet("laserStepDist", trQuestVarGet("laserStepDist") + 2.0);</Command>
<Command>				trVectorQuestVarSet("laserSFX", trVectorQuestVarGet("laserSFX") + trVectorQuestVarGet("laserStep"));</Command>
<Command>			}</Command>
<Command>			trArmySelect("1,10");</Command>
<Command>			trUnitChangeProtoUnit("Tartarian Gate flame");</Command>
<Command>		}</Command>

<Command>		// adjust aim;</Command>
<Command>		trVectorQuestVarSet("laserAim", trGetUnitVector3d("laserStart", "laserPos", -1.0));</Command>
<Command>		trVectorQuestVarSet("laserAim2", trCrossProduct("laserAim", "laserNormal"));</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("laserAimer"), true);</Command>
<Command>		trSetUnitOrientation(trVectorQuestVarGet("laserAim"), trVectorQuestVarGet("laserAim2"), true);</Command>

<Command>		if (trTimeMS() > trQuestVarGet("laserEndTime")) {</Command>
<Command>			laserEnd();</Command>
<Command>		}</Command>
<Command>	} else if (trQuestVarGet("bossSpell") == 4) {</Command>
<Command>		trQuestVarSet("scale", 0.024 * (trQuestVarGet("laserEndTime") - trTimeMS()));</Command>
<Command><![CDATA[		if (trQuestVarGet("scale") < 0) {]]></Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("spellTarget"));</Command>
<Command>			trUnitChangeProtoUnit(kbGetProtoUnitName(1*mGetVarByQV("spellTarget", "proto")));</Command>
<Command>			scaleUnit(1*trQuestVarGet("spellTarget"));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserPhoenix"), true);</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserAimer"), true);</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserGround"), true);</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserMeteorite"), true);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			zSetProtoUnitStat("Wadjet Spit", p, 1, 20);</Command>
<Command>			xsDisableRule("spell_world_splitter_activate");</Command>
<Command>			for(x=yGetDatabaseCount("worldSplitterHit"); >0) {</Command>
<Command>				yDatabaseNext("worldSplitterHit");</Command>
<Command>				startAttack(1*trQuestVarGet("spellTarget"), 1*trQuestVarGet("worldSplitterHit"), false, false);</Command>
<Command>			}</Command>
<Command>			yClearDatabase("worldSplitterHit");</Command>
<Command>			trQuestVarSet("bossSpell", 0);</Command>
<Command>			xsEnableRule("spell_attack_complete");</Command>
<Command>		} else {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("laserProj"), true);</Command>
<Command>			trSetSelectedScale(trQuestVarGet("scale"), trQuestVarGet("scale"), 50.0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spell_banhammer_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int x = 0;</Command>
<Command>	switch(1*trQuestVarGet("hammerStep"))</Command>
<Command>	{</Command>
<Command>		case 0:</Command>
<Command>		{</Command>
<Command>			if (trTimeMS() > trQuestVarGet("hammerNext")) {</Command>
<Command>				trQuestVarSet("hammerStep", 1);</Command>
<Command>				trQuestVarSet("hammerNext", trTimeMS() + 1000);</Command>
<Command>				trSoundPlayFN("implode reverse.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case 1:</Command>
<Command>		{</Command>
<Command>			if (trTimeMS() >= trQuestVarGet("hammerNext")) {</Command>
<Command>				trQuestVarSet("hammerStep", 2);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("banhammer"), true);</Command>
<Command>				trUnitChangeProtoUnit("Meteor Impact Ground");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				for(x=25; >0) {</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("hammerPos"+x), true);</Command>
<Command>				}</Command>
<Command>				trUnitDestroy();</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("hammerPos0"), true);</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>				trUnitChangeProtoUnit("Implode Sphere Effect");</Command>
<Command>				trSoundPlayFN("cinematics\35_out\strike.mp3","1",-1,"","");</Command>
<Command>				trCameraShake(2.5, 0.25);</Command>
<Command>			} else {</Command>
<Command>				x = xsMax(0, (trQuestVarGet("hammerNext") - trTimeMS()) / 40);</Command>
<Command><![CDATA[				if (x < trQuestVarGet("hammerPosPrev")) {]]></Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("banhammer"), true);</Command>
<Command>					trUnitChangeProtoUnit("Dwarf");</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("hammerPos"+x), true);</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Hero Greek Achilles"));</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("banhammer"), true);</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Thor hammer"));</Command>
<Command>					trUnitSetAnimationPath("0,0,0,0,0,0,0");</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Relic"));</Command>
<Command>					trImmediateUnitGarrison(""+1*trQuestVarGet("hammerPos"+x));</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Thor hammer"));</Command>

<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("hammerPos"+x), true);</Command>
<Command>					trMutateSelected(kbGetProtoUnitID("Wadjet Spit"));</Command>
<Command>					trQuestVarSet("hammerPosPrev", trQuestVarGet("hammerPos"+x));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case 2:</Command>
<Command>		{</Command>
<Command>			mSetVarByQV("spellTarget", "health", 0);</Command>
<Command>			damageUnit(1*trQuestVarGet("spellTarget"), 100);</Command>
<Command>			if (trQuestVarGet("p"+1*trQuestVarGet("activePlayer")+"commanderType") == COMMANDER_YEEBAAGOOON) {</Command>
<Command>				int p = mGetVarByQV("spellTarget", "player");</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>					yDatabaseNext("p"+p+"hand");</Command>
<Command>					if (mGetVarByQV("p"+p+"hand", "proto") == mGetVarByQV("spellTarget", "proto")) {</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*trQuestVarGet("p"+p+"hand"), true);</Command>
<Command>						trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>						zSetVarByIndex("p"+p+"handPos", "occupied", 1*yGetVar("p"+p+"hand", "pos"), 0);</Command>
<Command>						yRemoveFromDatabase("p"+p+"hand");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>					if (yDatabaseNext("p"+p+"deck") == mGetVarByQV("spellTarget", "proto")) {</Command>
<Command>						yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits", true);</Command>
<Command>					if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>						if (mGetVarByQV("allUnits", "proto") == mGetVarByQV("spellTarget", "proto")) {</Command>
<Command>							damageUnit(1*trQuestVarGet("allUnits"), 100);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			castEnd();</Command>
<Command>			xsDisableRule("spell_banhammer_activate");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void OnAttack(int attacker = 0, int target = 0, int event = 0) {</Command>
<Command>	int p = mGetVar(attacker, "player");</Command>
<Command>	int spell = 0;</Command>
<Command>	int count = 0;</Command>
<Command>	switch(event)</Command>
<Command>	{</Command>
<Command>		case ATTACK_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case ATTACK_STUN_TARGET:</Command>
<Command>		{</Command>
<Command>			stunUnit(target);</Command>
<Command>			trQuestVarSetFromRand("sound", 1, 3, true);</Command>
<Command>			trSoundPlayFN("woodcrush"+1*trQuestVarGet("sound")+".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_WINDSONG:</Command>
<Command>		{</Command>
<Command>			generateCard(p, 0, SPELL_SING, true);</Command>
<Command>		}</Command>
<Command>		case ATTACK_BLOCK_DEATH:</Command>
<Command>		{</Command>
<Command><![CDATA[			if(mGetVar(target, "health")<=0 && mGetVar(target, "OnDeath")>0){]]></Command>
<Command>				mSetVar(target, "OnDeath", 0);</Command>
<Command>				deployAtTile(0, "Olympus Temple SFX", 1*mGetVar(target, "tile"));</Command>
<Command>				trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_DISCOUNT:</Command>
<Command>		{</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+attacker);</Command>
<Command>			trUnitOverrideAnimation(52,0,false,true,-1);</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand", true);</Command>
<Command>				if (mGetVarByQV("p"+p+"hand", "spell") > 0) {</Command>
<Command>					spell = mGetVarByQV("p"+p+"hand", "spell");</Command>
<Command>					mSetVarByQV("p"+p+"hand", "cost", xsMax(0, mGetVarByQV("p"+p+"hand", "cost") - 1));</Command>
<Command>					trUnitChangeName("("+1*mGetVarByQV("p"+p+"hand","cost")+") " + trStringQuestVarGet("spell_"+spell+"_name"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			updateHandPlayable(p);</Command>
<Command>		}</Command>
<Command>		case ATTACK_OVERKILL_HEALS:</Command>
<Command>		{</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+attacker);</Command>
<Command><![CDATA[			if(mGetVar(attacker, "health") > 0 && mGetVar(target, "health") <= 0){]]></Command>
<Command>				mSetVar(attacker, "health", mGetVar(attacker, "health") + 2);</Command>
<Command>				deployAtTile(0, "Regeneration SFX", 1*mGetVar(attacker, "tile"));</Command>
<Command>				trSoundPlayFN("colossuseat.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("meatgather1.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_RALLY:</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("activePlayer") == p){</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+attacker);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("General Melagius"));</Command>
<Command>				trUnitOverrideAnimation(39, 0, false, true, -1);</Command>
<Command>				for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[					if (mGetVarByQV("allUnits", "player") == p && mGetVarByQV("allUnits", "spell") == 0) {]]></Command>
<Command>						trUnitHighlight(0.1, false);</Command>
<Command>						mSetVarByQV("allUnits", "attack", mGetVarByQV("allUnits", "attack") + 1);</Command>
<Command>						deployAtTile(0, "Arkantos Boost SFX", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if(trQuestVarGet("chats_GeneralStore_0") == 0){</Command>
<Command>					trQuestVarSet("chats_GeneralStore_0", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>General Store</color>: To battle!");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_SPELL_DAMAGE:</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("activePlayer") == (3-p)){</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+attacker);</Command>
<Command>				trUnitOverrideAnimation(50, 0, false, true, -1);</Command>
<Command>				trQuestVarSet("p"+p+"spellDamage", trQuestVarGet("p"+p+"spellDamage") + 1);</Command>
<Command>				trQuestVarSet("p"+p+"spellDamageNonOracle", trQuestVarGet("p"+p+"spellDamageNonOracle") + 1);</Command>
<Command>				if(trQuestVarGet("chats_FireMage_0") == 0){</Command>
<Command>					trQuestVarSet("chats_FireMage_0", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Fire Mage</color>: You are only making me stronger!");]]></Command>
<Command>					trSoundPlayFN("pha2.wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_ARCANE_MISSLE:</Command>
<Command>		{</Command>
<Command>			yClearDatabase("randomEnemy");</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (mGetVarByQV("allUnits", "player") == (3-p)) {</Command>
<Command>					yAddToDatabase("randomEnemy", "allUnits");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trQuestVarSetFromRand("temp", 1, yGetDatabaseCount("randomEnemy"), true);</Command>
<Command>			for(x=trQuestVarGet("temp"); >0) {</Command>
<Command>				yDatabaseNext("randomEnemy");</Command>
<Command>			}</Command>
<Command>			if (HasKeyword(LIGHTNING, 1*mGetVar(attacker, "keywords"))) {</Command>
<Command>				// too lazy to test this</Command>
<Command>				//lightning(1*trQuestVarGet("randomEnemy"), 1 + trQuestVarGet("p"+p+"spellDamage"), false);</Command>
<Command>				damageUnit(1*trQuestVarGet("randomEnemy"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>			} else {</Command>
<Command>				damageUnit(1*trQuestVarGet("randomEnemy"), 1 + trQuestVarGet("p"+p+"spellDamage"));</Command>
<Command>			}</Command>
<Command>			deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("randomEnemy", "tile"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_DRAW_CARD_ENEMY_COST:</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>			mSetVarByQV("next", "cost", xsMax(0, mGetVarByQV("next", "cost") - trCountUnitsInArea("128",(3-p),"Unit",45)));</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_ARCANE:</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("spellChosen", SPELL_SPARK, SPELL_APOCALYPSE, true);</Command>
<Command>			generateCard(p, 0, 1*trQuestVarGet("spellChosen"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_YEET:</Command>
<Command>		{</Command>
<Command>			if ((trQuestVarGet("activePlayer") == p) == false) {</Command>
<Command><![CDATA[				if ((mGetVar(target, "health") > 0) && (mGetVar(target, "spell") == 0)) {]]></Command>
<Command>					trSoundPlayFN("shockwave.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("suckup2.wav","1",-1,"","");</Command>
<Command>					deployAtTile(0, "Tremor", 1*mGetVar(target, "tile"));</Command>
<Command>					deployAtTile(0, "Dust Large", 1*mGetVar(target, "tile"));</Command>
<Command>					returnToHand(target);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_MANAFLOW:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"manaflow", 1 + trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_RETURN:</Command>
<Command>		{</Command>
<Command><![CDATA[			if ((mGetVar(target, "health") > 0) && (mGetVar(target, "spell") == SPELL_NONE)) {]]></Command>
<Command>				deployAtTile(0, "Meteor Impact Water", 1*mGetVar(target, "tile"));</Command>
<Command>				trSoundPlayFN("shipdeathsplash.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("suckup1.wav","1",-1,"","");</Command>
<Command>				returnToHand(target);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_PUSH:</Command>
<Command>		{</Command>
<Command>			if (mGetVar(target, "health") > 0) {</Command>
<Command>				deployAtTile(0, "Meteor Impact Water", 1*mGetVar(target, "tile"));</Command>
<Command>				trSoundPlayFN("shockwave.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("meteorsplash.wav","1",-1,"","");</Command>
<Command>				trVectorQuestVarSet("end", kbGetBlockPosition(""+target));</Command>
<Command>				trVectorQuestVarSet("start", kbGetBlockPosition(""+attacker));</Command>
<Command>				trVectorQuestVarSet("dir", trGetUnitVector("start", "end"));</Command>
<Command>				pushUnit(target, "dir");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_ZOMBIE:</Command>
<Command>		{</Command>
<Command>			generateCard(p, 1*kbGetProtoUnitID("Minion"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_SUMMON_ZOMBIE:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (mGetVar(target, "health") <= 0) {]]></Command>
<Command>				deathSummonQueue(1*mGetVar(target, "tile"), p, "Minion");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_SUMMON_TREE:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (mGetVar(target, "health") <= 0) {]]></Command>
<Command>				deathSummonQueue(1*mGetVar(target, "tile"), p, "Walking Woods Marsh");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_POISON:</Command>
<Command>		{</Command>
<Command><![CDATA[			if ((mGetVar(target, "spell") == SPELL_NONE) && (mGetVar(target, "health") > 0)) {]]></Command>
<Command>				mSetVar(target, "keywords", SetBit(1*mGetVar(target, "keywords"), DECAY));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+target);</Command>
<Command>				spyEffect("Poison SFX");</Command>
<Command>				trSoundPlayFN("lampadesblood.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("carnivorabirth.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_MINION:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (mGetVar(target, "health") <= 0) {]]></Command>
<Command><![CDATA[				if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>					addCardToHand(p, 1*mGetVar(target, "proto"));</Command>
<Command>					updateHandPlayable(p);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_FENRIS:</Command>
<Command>		{</Command>
<Command>			generateCard(p, 1*kbGetProtoUnitID("Ornlu"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_ANIMATE_TOWER:</Command>
<Command>		{</Command>
<Command>			trCameraShake(1.0, 0.5);</Command>
<Command>			trQuestVarSetFromRand("sound", 1, 5, true);</Command>
<Command>			trSoundPlayFN("ui\thunder"+1*trQuestVarGet("sound")+".wav","1",-1,"","");</Command>
<Command>			deployAtTile(0, "Meteor Impact Ground", 1*mGetVar(target, "tile"));</Command>
<Command>			trQuestVarSet("next", deployAtTile(1, "Dwarf", 1*mGetVar(target, "tile")));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Petosuchus Projectile"));</Command>
<Command>			trVectorSetUnitPos("end", "next");</Command>
<Command>			trVectorQuestVarSet("start", kbGetBlockPosition(""+attacker));</Command>
<Command>			trQuestVarSet("starty", 8);</Command>
<Command>			trVectorQuestVarSet("dir1", trGetUnitVector3d("start", "end"));</Command>
<Command>			trVectorQuestVarSet("dir2", trGetUnitVector("start", "end"));</Command>
<Command>			// rotating the vector dir2 by 90 degrees</Command>
<Command>			trQuestVarSet("temp", trQuestVarGet("dir2x"));</Command>
<Command>			trQuestVarSet("dir2x", 0.0 - trQuestVarGet("dir2z"));</Command>
<Command>			trQuestVarSet("dir2z", trQuestVarGet("temp"));</Command>

<Command>			trSetUnitOrientation(trVectorQuestVarGet("dir1"), trVectorQuestVarGet("dir2"), true);</Command>
<Command>			trUnitHighlight(3.0, false);</Command>
<Command>			yAddToDatabase("mirrorTowerLasers", "next");</Command>
<Command>			yAddUpdateVar("mirrorTowerLasers", "length", trDistanceBetweenVectors3d("start", "end") * 1.25);</Command>
<Command>			yAddUpdateVar("mirrorTowerLasers", "timeout", trTimeMS() + 1500);</Command>
<Command>			xsEnableRule("attack_animate_mirror_laser");</Command>
<Command>		}</Command>
<Command>		case ATTACK_TEAMWORK:</Command>
<Command>		{</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+attacker));</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (HasKeyword(ATTACK_TEAMWORK, 1*mGetVarByQV("allUnits", "OnAttack")) == false) { // no infinite loops for you</Command>
<Command><![CDATA[					if ((mGetVarByQV("allUnits", "player") == p) && (trDistanceToVectorSquared("allUnits", "pos") < 64)) {]]></Command>
<Command>						startAttack(1*trQuestVarGet("allUnits"), target);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			deployAtTile(0, "Dust Large", 1*mGetVar(target, "tile"));</Command>
<Command>		}</Command>
<Command>		case ATTACK_SING:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (mGetVarByQV("p"+p+"commander", "action") < ACTION_SLEEPING) {]]></Command>
<Command>				mSetVarByQV("p"+p+"commander", "action", ACTION_READY);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_NICKONHAWK:</Command>
<Command>		{</Command>
<Command>			int proto = 0;</Command>
<Command>			int manaCost = trQuestVarGet("p"+p+"mana");</Command>

<Command>			while(manaCost >= 0){</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>					proto = yDatabaseNext("p"+p+"deck");</Command>
<Command><![CDATA[					if (yGetVar("p"+p+"deck", "spell") == SPELL_NONE && trQuestVarGet("card_"+proto+"_cost") == manaCost) {]]></Command>
<Command>						yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>					proto = 0;</Command>
<Command>				}</Command>
<Command>				if(proto > 0){</Command>
<Command>					trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") - trQuestVarGet("card_"+proto+"_cost"));</Command>
<Command>					updateMana();</Command>
<Command>					updateHandPlayable(p);</Command>
<Command>					manaCost = -1;</Command>
<Command>				} else {</Command>
<Command>					manaCost = manaCost - 1;</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			if(proto > 0){</Command>
<Command>				trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>
<Command>				yClearDatabase("odyTiles");</Command>
<Command>				findAvailableTiles(1*mGetVar(attacker, "tile"), 1, "odyTiles", false);</Command>
<Command>				if(yGetDatabaseCount("odyTiles") > 0){</Command>
<Command>					int activeUnit = summonAtTile(1*yDatabaseNext("odyTiles"),p,proto);</Command>
<Command>					if(HasKeyword(CHARGE, 1*mGetVar(activeUnit, "keywords")) == true){</Command>
<Command>						mSetVar(activeUnit, "action", ACTION_READY);</Command>
<Command><![CDATA[						if((proto == kbGetProtoUnitID("Hero Greek Argo")) && (trQuestVarGet("chats_Argo_0") == 0)){]]></Command>
<Command>							trFadeOutAllSounds(0.0);</Command>
<Command>							trQuestVarSet("chats_Argo_0", 1);</Command>
<Command>							trSoundPlayFN("dialog\en\ajax097.mp3","1",-1,"","");</Command>
<Command><![CDATA[							ChatLog(0, "<color={Playercolor("+p+")}>Hawk's Captain</color>: Do I always have to watch your back?");]]></Command>
<Command>							MusicHigh();</Command>
<Command>						}</Command>
<Command>					} else {</Command>
<Command>						mSetVar(activeUnit, "action", ACTION_SLEEPING);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					ChatLog(1, "No space to summon!");</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				ChatLog(1, "Nothing to summon!");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule attack_animate_mirror_laser</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("mirrorTowerLasers") > 0) {</Command>
<Command>		yDatabaseNext("mirrorTowerLasers", true);</Command>
<Command>		float scale = yGetVar("mirrorTowerLasers", "timeout") - trTimeMS();</Command>
<Command><![CDATA[		if (scale < 0) {]]></Command>
<Command>			trUnitDestroy();</Command>
<Command>			yRemoveFromDatabase("mirrorTowerLasers");</Command>
<Command>		} else {</Command>
<Command>			scale = scale / 75;</Command>
<Command>			trSetSelectedScale(scale, scale, yGetVar("mirrorTowerLasers", "length"));</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		xsDisableRule("attack_animate_mirror_laser");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void OnPlay(int unit = 0) {</Command>
<Command>	int p = mGetVar(unit, "player");</Command>
<Command>	int proto = mGetVar(unit, "proto");</Command>
<Command>	int type = 0;</Command>
<Command>	bool done = true;</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+unit);</Command>
<Command>	if (HasKeyword(WARD, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		spyEffect("UI Range Indicator Norse SFX");</Command>
<Command>	}</Command>
<Command>	if (HasKeyword(DECAY, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		spyEffect("Poison SFX");</Command>
<Command>	}</Command>
<Command>	if (HasKeyword(DEADLY, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		spyEffect("Chaos effect");</Command>
<Command>	}</Command>
<Command>	if (HasKeyword(STEALTH, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		trQuestVarSet("stealthSFX" + unit, spyEffect("Sky Passage"));</Command>
<Command>	}</Command>
<Command><![CDATA[	if (1*mGetVar(unit, "echo") <= 0 && (HasKeyword(REPEATABLE, 1*mGetVar(unit, "keywords")) || trCountUnitsInArea("128",p,"Hero Greek Heracles",45) > 0)) {]]></Command>
<Command>		generateCard(p, proto, 0, true);</Command>
<Command>		if(HasKeyword(FLEETING, 1*mGetVarByQV("next", "keywords"))){</Command>
<Command>			mSetVarByQV("next", "echo", 1);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	switch(proto)</Command>
<Command>	{</Command>
<Command>		case kbGetProtoUnitID("Bear"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 2, true);</Command>
<Command>			trSoundPlayFN("beargrunt" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>			if(trQuestVarGet("chats_Bear_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Bear_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: Growl!!!");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Bondi"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("militarycreate.wav","1",-1,"","");</Command>
<Command>			trQuestVarSet("p"+p+"manaTax", trQuestVarGet("p"+p+"manaTax") + 2);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Pirate Ship"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("battlecry1.wav","1",-1,"","");</Command>
<Command>			trQuestVarSet("pirateShipTarget" + unit, -1);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Chinese Immortal"):</Command>
<Command>		{</Command>
<Command>			mSetVar(unit, "scale", 2);</Command>
<Command>			scaleUnit(unit);</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("archeryrange.wav","1",-1,"","");</Command>
<Command>			if(trQuestVarGet("chats_Immortal_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Immortal_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: *intense staring*");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Audrey Water"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("carnivoragrunt" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Griffon"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 2, true);</Command>
<Command>			trSoundPlayFN("griffongrunt" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("wingflaplarge" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Apep"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 2, true);</Command>
<Command>			trSoundPlayFN("crocodilegrunt" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Monument_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: Preparing to clean.");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 2"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Monument2_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument2_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: Preparing to help with outfit.");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 3"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Monument3_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument3_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: Preparing to assist guest with luggage.");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 4"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Monument4_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument4_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: Preparing Arcane buffet.");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 5"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Monument5_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument5_0", 1);</Command>
<Command>				trCameraShake(3.0, 0.3);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: PREPARING EVERYTHING.");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Slinger"):</Command>
<Command>		{</Command>
<Command>			generateCard(p, 0, SPELL_SPARK);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Skraeling"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("summonedUnit", unit);</Command>
<Command>			chooseSpell(SPELL_WOLF);</Command>
<Command>			done = false;</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Villager Atlantean"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			chooseSpell(SPELL_FOOD);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Avenger"):</Command>
<Command>		{</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+unit);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Avenger"));</Command>
<Command>			trUnitOverrideAnimation(39, 0, false, true, -1);</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*mGetVar(unit, "tile")));</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit(1*trQuestVarGet("allUnits"), 1);</Command>
<Command>						deployAtTile(0, "Lightning sparks", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("sphinxspecialattack.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Hippolyta"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("lightningbirth.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hetairoi"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			chooseSpell(SPELL_MAP);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Peltast"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			chooseSpell(SPELL_PING);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Huskarl"):</Command>
<Command>		{</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*mGetVar(unit, "tile")));</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (trQuestVarGet("allUnits") == unit) {</Command>
<Command>					continue;</Command>
<Command><![CDATA[				} else if ((mGetVarByQV("allUnits", "player") == p) && (mGetVarByQV("allUnits", "spell") == 0)) {]]></Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						deployAtTile(0, "Hero Birth", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>						mSetVarByQV("allUnits", "attack", 1 + mGetVarByQV("allUnits", "attack"));</Command>
<Command>						mSetVarByQV("allUnits", "health", 1 + mGetVarByQV("allUnits", "health"));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>						spyEffect("Einheriar Boost SFX");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("researchcomplete.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("battlecry3.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Nemean Lion"):</Command>
<Command>		{</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+unit);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Nemean Lion"));</Command>
<Command>			trUnitOverrideAnimation(39, 0, false, true, -1);</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (mGetVarByQV("allUnits", "player") == 3 - p) {</Command>
<Command><![CDATA[					if ((trQuestVarGet("p"+p+"manaflow") >= mGetVarByQV("allUnits", "cost")) &&]]></Command>
<Command>						(mGetVarByQV("allUnits", "spell") == 0)) {</Command>
<Command>						stunUnit(1*trQuestVarGet("allUnits"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Valkyrie"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_VALKYRIE_HEAL);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Centaur"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"drawCards", 1 + trQuestVarGet("p"+p+"drawCards"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Sphinx"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_SHAPESHIFT);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Chiron"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("sentinelbirth.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Heka Gigantes"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("ageadvance.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Polyphemus"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("cinematics\15_in\gong.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hypaspist"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"yeebBonus", 1 + trQuestVarGet("p"+p+"yeebBonus"));</Command>
<Command>			mSetVarByQV("p"+p+"commander", "attack", 1 + mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>			deployAtTile(0, "Hero Birth", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hippikon"):</Command>
<Command>		{</Command>
<Command><![CDATA[			if (mGetVarByQV("p"+p+"commander", "action") < ACTION_SLEEPING) {]]></Command>
<Command>				mSetVarByQV("p"+p+"commander", "action", ACTION_READY);</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("militarycreate.wav","1",-1,"","");</Command>
<Command>			deployAtTile(0, "Hero Birth", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Myrmidon"):</Command>
<Command>		{</Command>
<Command>			mSetVar(unit, "health", mGetVar(unit, "health") + trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Behemoth"):</Command>
<Command>		{</Command>
<Command>			mSetVar(unit, "health", mGetVar(unit, "health") + trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>			mSetVar(unit, "attack", mGetVar(unit, "attack") + trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>			mSetVar(unit, "scale", 1 + 0.25 * trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>			scaleUnit(unit);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hippocampus"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("highestCost", 0);</Command>
<Command>			trQuestVarSet("currentCost", 0);</Command>
<Command>			trQuestVarSet("highestPointer", 0);</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"deck"); >0) {</Command>
<Command>				type = yDatabaseNext("p"+p+"deck");</Command>
<Command>				if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>					trQuestVarCopy("currentCost", "card_"+type+"_cost");</Command>
<Command>					if (trQuestVarGet("currentCost") >= trQuestVarGet("highestCost")) {</Command>
<Command>						trQuestVarSet("highestPointer", yGetPointer("p"+p+"deck"));</Command>
<Command>						trQuestVarCopy("highestCost", "currentCost");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			ySetPointer("p"+p+"deck", 1*trQuestVarGet("highestPointer"));</Command>
<Command>			yDatabaseNext("p"+p+"deck", false, true);</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Medusa"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_MEDUSA_STUN);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Lampades"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_LAMPADES_CONVERT);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Tartarian Gate spawn"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_DEMON_EAT);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Axeman"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"yeebBonus", 1 + trQuestVarGet("p"+p+"yeebBonus"));</Command>
<Command>			mSetVarByQV("p"+p+"commander", "attack", 1 + mGetVarByQV("p"+p+"commander", "attack"));</Command>
<Command>			deployAtTile(0, "Hero Birth", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Guardian"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+(3-p)+"drawCards", 2 + trQuestVarGet("p"+(3-p)+"drawCards"));</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("cinematics\32_out\kronosbehinddorrshort.mp3","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Achilles"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("xpack\xdialog\xkri075.mp3","1",-1,"", "");</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("p"+(3-p)+"commander"));</Command>
<Command>			spyEffect("Poison SFX");</Command>
<Command>			deployAtTile(0, "Kronny Birth SFX", 1*mGetVarByQV("p"+(3-p)+"commander", "tile"));</Command>
<Command>			mSetVarByQV("p"+(3-p)+"commander", "keywords", SetBit(1*mGetVarByQV("p"+(3-p)+"commander", "keywords"), DECAY));</Command>
<Command>			stunUnit(1*trQuestVarGet("p"+(3-p)+"commander"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Scorpion Man"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			chooseSpell(SPELL_SCORPION_STING);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Anubite"):</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>			damageUnit(1*trQuestVarGet("p"+p+"commander"), 3);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Ajax"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("summonedUnit", unit);</Command>
<Command>			chooseSpell(SPELL_SUMMON_ONE);</Command>
<Command>			done = false;</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Tower Mirror"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("wonder.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fire Siphon"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("spellCaster", unit);</Command>
<Command>			mSetVar(unit, "laserDirx", -70710);</Command>
<Command>			mSetVar(unit, "laserDirz", -70710);</Command>
<Command>			trSetUnitOrientation(xsVectorSet(-0.707107,0,-0.707107), xsVectorSet(0,1,0), true);</Command>
<Command>			chooseSpell(SPELL_CHOOSE_DIRECTION);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Theris"):</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Female"):</Command>
<Command>		{</Command>
<Command>			mSetVarByQV("p"+p+"commander", "health", 2 + mGetVarByQV("p"+p+"commander", "health"));</Command>
<Command>			deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Flying Purple Hippo"):</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("gaiaattack.wav","1",-1,"","");</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 6, true);</Command>
<Command>			switch(1*trQuestVarGet("soundRandom"))</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("hippogrunt1.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoreselect1.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: ANJKLDNSMDKHALDMNBNA!!!");]]></Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("hippogrunt2.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoreselect2.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: OIUHDSNBAGNKDAKDAKDA!!!");]]></Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("hyenagrunt1.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoremove1.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: GDAGAKDGBAJKDGABJKDG!!!");]]></Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("hyenagrunt2.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoremove2.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: IAHDUIADHANILDHADNDA!!!");]]></Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("walrusgrunt1.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoregrunt1.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: UYADGAKDGAKDGGDASKJF!!!");]]></Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trSoundPlayFN("walrusgrunt2.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("manticoregrunt2.wav","1",-1,"","");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: TARIHDNADHADHDGNALAD!!!");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Villager Atlantean Hero"):</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			chooseSpell(SPELL_FOOD);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fishing Ship Egyptian"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 2);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fishing Ship Greek"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 2);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fishing Ship Norse"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 3);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fishing Ship Atlantean"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 3);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Kebenit"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 4);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Trireme"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 4);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Longboat"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 5);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fire Ship Atlantean"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 5);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Siege Ship Egyptian"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 6);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Siege Ship Greek"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 6);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Siege Ship Norse"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 8);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Siege Ship Atlantean"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 8);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Argo"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Argo_0") == 0){</Command>
<Command>				trFadeOutAllSounds(0.0);</Command>
<Command>				trQuestVarSet("chats_Argo_0", 1);</Command>
<Command>				trSoundPlayFN("dialog\en\ajax097.mp3","1",-1,"","");</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>Hawk's Captain</color>: Do I always have to watch your back?");]]></Command>
<Command>				MusicHigh();</Command>
<Command>			}</Command>
<Command>			damageUnit(unit, 10);</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("drop" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("lightningbirth.wav","1",-1,"","");</Command>

<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Heracles"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("chats_Heracles_0") == 0){</Command>
<Command>				trFadeOutAllSounds(0.0);</Command>
<Command>				trQuestVarSet("chats_Heracles_0", 1);</Command>
<Command>				trSoundPlayFN("xpack\xdialog\en\xfol535.mp3","1",-1,"","");</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>" + trStringQuestVarGet("card_" + proto + "_name") + "</color>: My brothers have arrived!");]]></Command>
<Command>				MusicHigh();</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("lightningbirth.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Catapult"):</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Meteor", 1*mGetVar(unit, "tile"));</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*mGetVar(unit, "tile")));</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command><![CDATA[				if ((1*mGetVarByQV("allUnits", "spell") == 0) && (1*trQuestVarGet("allUnits") != unit)) {]]></Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit(1*trQuestVarGet("allUnits"), 5);</Command>
<Command>						deployAtTile(0, "Tartarian Gate flame", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trCameraShake(1.0, 0.1);</Command>
<Command>			trSoundPlayFN("tartariangateselect.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("tartariangateselect.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("gateramloud.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("gateramloud.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("chaos.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("chaos.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+unit));</Command>
<Command>	if (HasKeyword(MAGNETIC, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command><![CDATA[			if ((trQuestVarGet("allUnits") == unit) || (mGetVarByQV("allUnits", "player") == 3 - p)) {]]></Command>
<Command>				continue;</Command>
<Command><![CDATA[			} else if (HasKeyword(MAGNETIC, 1*mGetVarByQV("allUnits", "keywords")) &&]]></Command>
<Command><![CDATA[				trDistanceToVectorSquared("allUnits", "pos") < 40) {]]></Command>
<Command>				done = false;</Command>
<Command>				trQuestVarSet("spellCaster", unit);</Command>
<Command>				chooseSpell(SPELL_MAGNETIZE);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if (done) {</Command>
<Command>		removeDeadUnits();</Command>
<Command>		xsEnableRule("gameplay_01_select");</Command>
<Command>		highlightReady(999999);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule cheer_activate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	xsDisableSelf();</Command>
<Command>	OnPlay(1*trQuestVarGet("cheerTarget"));</Command>
<Command>}</Command>
<Command>bool OnTurnStart(int unit = 0) {</Command>
<Command>	int p = mGetVar(unit, "player");</Command>
<Command>	int proto = mGetVar(unit, "proto");</Command>
<Command>	int tile = 0;</Command>
<Command>	int target = 0;</Command>
<Command>	switch(proto)</Command>
<Command>	{</Command>
<Command>		case kbGetProtoUnitID("Phoenix Egg"):</Command>
<Command>		{</Command>
<Command>			damageUnit(unit, 1*mGetVar(unit, "health"));</Command>
<Command>			deathSummonQueue(1*mGetVar(unit, "tile"), p, "Phoenix From Egg");</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Hero Greek Chiron"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p1drawCards", 1 + trQuestVarGet("p1drawCards"));</Command>
<Command>			trQuestVarSet("p2drawCards", 1 + trQuestVarGet("p2drawCards"));</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Theocrat"):</Command>
<Command>		{</Command>
<Command>			drawCard(p, true);</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Bireme"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p"+p+"manaTax", trQuestVarGet("p"+p+"manaTax") - 1);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Eitri"):</Command>
<Command>		{</Command>
<Command><![CDATA[			for(x=yGetDatabaseCount("p"+p+"hand"); <9) {]]></Command>
<Command>				addCardToHand(p, 0, SPELL_SCRAP_METAL, false);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Fire Siphon"):</Command>
<Command>		{</Command>
<Command>			trVectorQuestVarSet("dir", xsVectorSet(1.0*mGetVar(unit, "laserDirx")/100000.0, 0, 1.0*mGetVar(unit, "laserDirz")/100000.0));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+unit);</Command>
<Command>			trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true); // This makes the siphon dissapear</Command>
<Command>			trSoundPlayFN("sky passage.wav","1",-1,"","");</Command>
<Command>			trQuestVarSet("next", deployAtTile(0, "Dwarf", 1*mGetVar(unit, "tile")));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>			trUnitHighlight(1.0, false);</Command>
<Command>			trSetSelectedScale(10, 0, 60);</Command>
<Command>			trSetUnitOrientation(vector(0,0,0) - trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Petosuchus Projectile"));</Command>
<Command>			yAddToDatabase("directionalLasers", "next");</Command>
<Command>			yAddUpdateVar("directionalLasers", "timeout", trTimeMS() + 500);</Command>
<Command>			xsEnableRule("directional_lasers");</Command>

<Command>			bool found = true;</Command>
<Command>			tile = mGetVar(unit, "tile");</Command>
<Command>			while (found) {</Command>
<Command>				found = false;</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+tile) + (trVectorQuestVarGet("dir") * 6.0));</Command>
<Command><![CDATA[				for(x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>					trVectorQuestVarSet("current", kbGetBlockPosition(""+1*zGetVarByIndex("tiles", "neighbor"+x, tile)));</Command>
<Command><![CDATA[					if (trDistanceBetweenVectorsSquared("current", "pos") < 9) {]]></Command>
<Command>						found = true;</Command>
<Command>						tile = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (found) {</Command>
<Command>					target = zGetVarByIndex("tiles", "occupant", tile);</Command>
<Command>					startAttack(unit, target, false, false);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Tartarian Gate"):</Command>
<Command>		{</Command>
<Command>			mSetVar(unit, "action", ACTION_SLEEPING);</Command>
<Command>			target = yGetDatabaseCount("p"+p+"hand");</Command>
<Command>			drawCard(p);</Command>
<Command><![CDATA[			if (target < 10) {]]></Command>
<Command>				mSetVarByQV("next", "cost", 0);</Command>
<Command>			}</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Audrey"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("maxMana") == 5){</Command>
<Command>				mSetVar(unit, "keywords", SetBit(1*mGetVar(unit, "keywords"), REGENERATE));</Command>
<Command>				trSoundPlayFN("carnivorabirth.wav","1",-1,"","");</Command>
<Command>				if(trQuestVarGet("chats_Audrey_0") == 0){</Command>
<Command>					trQuestVarSet("chats_Audrey_0", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Vora</color>: *plant noises*");]]></Command>
<Command>				}</Command>
<Command>				return (true);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Shaba Ka"):</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("p1count", 0);</Command>
<Command>			trQuestVarSet("p2count", 0);</Command>
<Command>			if(trQuestVarGet("chats_Kemsyt_0") == 0){</Command>
<Command>				trQuestVarSet("chats_Kemsyt_0", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>Mister Pirate</color>: I like treasure!");]]></Command>
<Command>				trSoundPlayFN("kemsytattack2.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			for (x=yGetDatabaseCount("allUnits"); >0)  {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				p = mGetVarByQV("allUnits", "player");</Command>
<Command>				trQuestVarSet("p"+p+"count", 1 + trQuestVarGet("p"+p+"count"));</Command>
<Command>			}</Command>
<Command>			if (trQuestVarGet("p1count") > trQuestVarGet("p2count")) {</Command>
<Command>				p = 1;</Command>
<Command>			} else {</Command>
<Command>				p = 2;</Command>
<Command>			}</Command>
<Command>			trQuestVarSetFromRand("temp", 1, 3, true);</Command>
<Command>			if(trQuestVarGet("temp") == 1){</Command>
<Command>				generateCard(p, 0, SPELL_BOOTS_TREASURE);</Command>
<Command>			} else if(trQuestVarGet("temp") == 2){</Command>
<Command>				generateCard(p, 0, SPELL_WEAPONS_TREASURE);</Command>
<Command>			} else {</Command>
<Command>				generateCard(p, 0, SPELL_SHIELDS_TREASURE);</Command>
<Command>			}</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Pirate Ship"):</Command>
<Command>		{</Command>
<Command>			if(trQuestVarGet("pirateShipTarget" + unit) > -1){</Command>
<Command>				trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>				deployAtTile(0, "Meteor Impact Ground", 1*trQuestVarGet("pirateShipTarget" + unit));</Command>
<Command>				int occupant = zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("pirateShipTarget" + unit));</Command>
<Command>				damageUnit(occupant, 8);</Command>
<Command><![CDATA[				if(occupant < 1){]]></Command>
<Command>					if(trQuestVarGet("chats_PirateShip_1") == 0){</Command>
<Command>						trQuestVarSet("chats_PirateShip_1", 1);</Command>
<Command><![CDATA[						ChatLog(0, "<color={Playercolor("+p+")}>Pirate Crew</color>: Damn, we missed!");]]></Command>
<Command>					}</Command>
<Command>				} else if(1*mGetVar(occupant, "tile") == p){</Command>
<Command>					if(trQuestVarGet("chats_PirateShip_2") == 0){</Command>
<Command>						trQuestVarSet("chats_PirateShip_2", 1);</Command>
<Command><![CDATA[						ChatLog(0, "<color={Playercolor("+p+")}>Pirate Crew</color>: Oops! Sorry about that!");]]></Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					if(trQuestVarGet("chats_PirateShip_3") == 0){</Command>
<Command>						trQuestVarSet("chats_PirateShip_3", 1);</Command>
<Command><![CDATA[						ChatLog(0, "<color={Playercolor("+p+")}>Pirate Crew</color>: We got them good!");]]></Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				if(trQuestVarGet("chats_PirateShip_4") == 0){</Command>
<Command>					trQuestVarSet("chats_PirateShip_4", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Pirate Crew</color>: Cannons be ready to fire!");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			yClearDatabase("pirateShipTargets");</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits", true);</Command>
<Command>				if(mGetVarByQV("allUnits", "player") == 3 - p){</Command>
<Command>					trQuestVarSet("temp", mGetVarByQV("allUnits", "tile"));</Command>
<Command>					yAddToDatabase("pirateShipTargets", "temp");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trQuestVarSetFromRand("pirateShipRandom", 1, yGetDatabaseCount("pirateShipTargets"), true);</Command>
<Command>			for(x=trQuestVarGet("pirateShipRandom"); >0) {</Command>
<Command>				yDatabaseNext("pirateShipTargets");</Command>
<Command>			}</Command>
<Command>			trQuestVarSet("pirateShipTarget" + unit, trQuestVarGet("pirateShipTargets"));</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Invisible Target"):</Command>
<Command>		{</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+unit));</Command>
<Command>			mSetVar(unit, "action", ACTION_SLEEPING);</Command>
<Command><![CDATA[			if (trDistanceToVectorSquared("p1commander", "pos") < 64) {]]></Command>
<Command>				damageUnit(unit, 9999);</Command>
<Command>				trSoundPlayFN("favordump.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument"):</Command>
<Command>		{</Command>
<Command>			bool clean = false;</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[				if(trUnitPercentDamaged() > 0 && mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER){]]></Command>
<Command>					damageUnit(1*trQuestVarGet("allUnits"), 1);</Command>
<Command>					deployAtTile(0, "Dust Small", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					clean = true;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			if(clean){</Command>
<Command>				trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>				trSoundPlayFN("farming" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				if(trQuestVarGet("chats_Monument_1") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument_1", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Housekeeper</color>: Dirt detected. Cleaning.");]]></Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				if(trQuestVarGet("chats_Monument_2") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument_2", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Housekeeper</color>: Nothing to clean.");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 2"):</Command>
<Command>		{</Command>
<Command>			int h = mGetVarByQV("p"+p+"commander", "health");</Command>
<Command>			healUnit(1*trQuestVarGet("p"+p+"commander"), 5);</Command>
<Command>			deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>			trSoundPlayFN("heal.wav","1",-1,"","");</Command>
<Command>			if(1*mGetVarByQV("p"+p+"commander", "health") == h){</Command>
<Command>				if(trQuestVarGet("chats_Monument2_1") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument2_1", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Butler</color>: Exemplary outfit. Congratulations.");]]></Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				if(trQuestVarGet("chats_Monument2_2") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument2_2", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Butler</color>: Outfit issues detected. Addressing.");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 3"):</Command>
<Command>		{</Command>
<Command>			if(yGetDatabaseCount("p"+(3-p)+"hand") > 0){</Command>
<Command>				trQuestVarSetFromRand("temp", 1, yGetDatabaseCount("p"+(3-p)+"hand"), true);</Command>
<Command>				for(x=trQuestVarGet("temp"); >0) {</Command>
<Command>					yDatabaseNext("p"+(3-p)+"hand", true);</Command>
<Command>				}</Command>
<Command>				//addCardToDeck(3-p, kbGetProtoUnitName(1*mGetVarByQV("p"+(3-p)+"hand", "proto")), mGetVarByQV("p"+(3-p)+"hand", "spell"));</Command>
<Command>				trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>				trSoundPlayFN("swing" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				trVectorSetUnitPos("pos", "p"+(3-p)+"hand");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+(3-p)+"hand", "pos"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("p"+(3-p)+"hand"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),0, true);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				if (mGetVarByQV("p"+(3-p)+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					ChatLog((3-p), "Discarded " + trStringQuestVarGet("card_" + 1*mGetVarByQV("p"+(3-p)+"hand", "proto") + "_name"));</Command>
<Command>				} else {</Command>
<Command>					ChatLog((3-p), "Discarded " + trStringQuestVarGet("spell_" + 1*mGetVarByQV("p"+(3-p)+"hand", "spell") + "_name"));</Command>
<Command>				}</Command>
<Command>				zSetVarByIndex("p"+(3-p)+"handPos", "occupied", 1*yGetVar("p"+(3-p)+"hand", "pos"), 0);</Command>
<Command>				yRemoveFromDatabase("p"+(3-p)+"hand");</Command>
<Command>				if(trQuestVarGet("chats_Monument3_1") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument3_1", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Steward</color>: Assisting guest with luggage.");]]></Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				if(trQuestVarGet("chats_Monument3_2") == 0){</Command>
<Command>					trQuestVarSet("chats_Monument3_2", 1);</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>Floating Steward</color>: Guest is free of luggage.");]]></Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 4"):</Command>
<Command>		{</Command>
<Command><![CDATA[			if(yGetDatabaseCount("p"+p+"hand") < 10){]]></Command>
<Command>				trQuestVarSetFromRand("temp", 30, 59, true);</Command>
<Command>				generateCard(p, CardToProto(1*trQuestVarGet("temp")), CardToSpell(1*trQuestVarGet("temp")));</Command>
<Command>				mSetVarByQV("next", "cost", 0);</Command>
<Command>			}</Command>
<Command><![CDATA[			if(yGetDatabaseCount("p"+p+"hand") < 10){]]></Command>
<Command>				trQuestVarSetFromRand("temp", 30, 59, true);</Command>
<Command>				generateCard(p, CardToProto(1*trQuestVarGet("temp")), CardToSpell(1*trQuestVarGet("temp")));</Command>
<Command>				mSetVarByQV("next", "cost", 0);</Command>
<Command>			}</Command>
<Command>			if(trQuestVarGet("chats_Monument4_1") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument4_1", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>Floating Twins</color>: Providing Arcane delicacies.");]]></Command>
<Command>			}</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("gaiasparkle" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>		case kbGetProtoUnitID("Monument 5"):</Command>
<Command>		{</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[				if(trUnitPercentDamaged() > 0 && mGetVarByQV("allUnits", "spell") != SPELL_COMMANDER){]]></Command>
<Command>					damageUnit(1*trQuestVarGet("allUnits"), 1);</Command>
<Command>					deployAtTile(0, "Dust Small", 1*mGetVarByQV("allUnits", "tile"));</Command>
<Command>					trQuestVarSetFromRand("soundRandom", 1, 2, true);</Command>
<Command>					trSoundPlayFN("farming" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			healUnit(1*trQuestVarGet("p"+p+"commander"), 5);</Command>
<Command>			deployAtTile(0, "Regeneration SFX", 1*mGetVarByQV("p"+p+"commander", "tile"));</Command>
<Command>			trSoundPlayFN("heal.wav","1",-1,"","");</Command>

<Command>			if(yGetDatabaseCount("p"+(3-p)+"hand") > 0){</Command>
<Command>				trQuestVarSetFromRand("temp", 1, yGetDatabaseCount("p"+(3-p)+"hand"), true);</Command>
<Command>				for(x=trQuestVarGet("temp"); >0) {</Command>
<Command>					yDatabaseNext("p"+(3-p)+"hand", true);</Command>
<Command>				}</Command>
<Command>				trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>				trSoundPlayFN("swing" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>				trVectorSetUnitPos("pos", "p"+(3-p)+"hand");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+(3-p)+"hand", "pos"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("p"+(3-p)+"hand"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),0, true);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				if (mGetVarByQV("p"+(3-p)+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					ChatLog((3-p), "Discarded " + trStringQuestVarGet("card_" + 1*mGetVarByQV("p"+(3-p)+"hand", "proto") + "_name"));</Command>
<Command>				} else {</Command>
<Command>					ChatLog((3-p), "Discarded " + trStringQuestVarGet("spell_" + 1*mGetVarByQV("p"+(3-p)+"hand", "spell") + "_name"));</Command>
<Command>				}</Command>
<Command>				yRemoveFromDatabase("p"+(3-p)+"hand");</Command>
<Command>			}</Command>

<Command><![CDATA[			if(yGetDatabaseCount("p"+p+"hand") < 10){]]></Command>
<Command>				trQuestVarSetFromRand("temp", 30, 59, true);</Command>
<Command>				generateCard(p, CardToProto(1*trQuestVarGet("temp")), CardToSpell(1*trQuestVarGet("temp")));</Command>
<Command>				mSetVarByQV("next", "cost", 0);</Command>
<Command>			}</Command>
<Command><![CDATA[			if(yGetDatabaseCount("p"+p+"hand") < 10){]]></Command>
<Command>				trQuestVarSetFromRand("temp", 30, 59, true);</Command>
<Command>				generateCard(p, CardToProto(1*trQuestVarGet("temp")), CardToSpell(1*trQuestVarGet("temp")));</Command>
<Command>				mSetVarByQV("next", "cost", 0);</Command>
<Command>			}</Command>
<Command>			trQuestVarSetFromRand("soundRandom", 1, 3, true);</Command>
<Command>			trSoundPlayFN("gaiasparkle" + 1*trQuestVarGet("soundRandom") + ".wav","1",-1,"","");</Command>
<Command>			if(trQuestVarGet("chats_Monument5_1") == 0){</Command>
<Command>				trQuestVarSet("chats_Monument5_1", 1);</Command>
<Command><![CDATA[				ChatLog(0, "<color={Playercolor("+p+")}>Floating Majordomo</color>: YES.");]]></Command>
<Command>			}</Command>
<Command>			return (true);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return (false);</Command>
<Command>}</Command>



<Command>void processAttack(string db = "attacks") {</Command>
<Command>	int attacker = yDatabaseNext(db);</Command>
<Command>	int target = yGetVar(db, "target");</Command>
<Command>	int attackerID = kbGetBlockID(""+attacker);</Command>
<Command>	switch(1*yGetVar(db, "phase"))</Command>
<Command>	{</Command>
<Command>		case ATTACK_START:</Command>
<Command>		{</Command>
<Command>			if (mGetVar(attacker, "health") > 0) {</Command>
<Command>				trVectorQuestVarSet("d1pos", kbGetBlockPosition(""+attacker, true));</Command>
<Command>				trVectorQuestVarSet("d2pos", kbGetBlockPosition(""+target, true));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+attacker, true);</Command>
<Command>				trSetUnitOrientation(trGetUnitVector("d1pos", "d2pos"), xsVectorSet(0,1,0), true);</Command>
<Command>				switch(1*yGetVar(db, "animation"))</Command>
<Command>				{</Command>
<Command>					case ANIM_DEFAULT:</Command>
<Command>					{</Command>
<Command><![CDATA[						if (mGetVar(attacker, "range") <= 1) {]]></Command>
<Command>							trUnitOverrideAnimation(1,0,false,true,-1);</Command>
<Command>						} else {</Command>
<Command>							trUnitOverrideAnimation(12,0,false,true,-1);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					case ANIM_CHARGING:</Command>
<Command>					{</Command>
<Command>						trUnitOverrideAnimation(19,0,false,true,-1);</Command>
<Command>					}</Command>
<Command>					case ANIM_GORE:</Command>
<Command>					{</Command>
<Command>						trUnitOverrideAnimation(26,0,false,true,-1);</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				ySetVar(db, "phase", ATTACK_ANIMATE);</Command>
<Command>				ySetVar(db, "timeout", trTimeMS() + 1500);</Command>

<Command>				if (mGetVar(attacker, "spell") == SPELL_COMMANDER) {</Command>
<Command>					for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>						yDatabaseNext("allUnits");</Command>
<Command><![CDATA[						if ((mGetVarByQV("allUnits", "proto") == kbGetProtoUnitID("Archer Atlantean")) &&]]></Command>
<Command>							(mGetVarByQV("allUnits", "player") == mGetVar(attacker, "player"))) {</Command>
<Command>							startAttack(1*trQuestVarGet("allUnits"), target, false, true);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				yRemoveFromDatabase(db);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_ANIMATE:</Command>
<Command>		{</Command>
<Command><![CDATA[			if ((kbUnitGetAnimationActionType(attackerID) == 16) == false || trTimeMS() > yGetVar(db, "timeout")) {]]></Command>
<Command>				ySetVar(db, "phase", ATTACK_DONE);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_DONE:</Command>
<Command>		{</Command>
<Command>			if (HasKeyword(LIGHTNING, 1*mGetVar(attacker, "keywords"))) {</Command>
<Command>				lightning(target, mGetVar(attacker, "attack"), HasKeyword(DEADLY, 1*mGetVar(attacker, "keywords")));</Command>
<Command><![CDATA[			} else if (HasKeyword(DEADLY, 1*mGetVar(attacker, "keywords")) &&]]></Command>
<Command>				mGetVar(target, "spell") == SPELL_NONE) {</Command>
<Command>				mSetVar(target, "health", 0);</Command>
<Command>				damageUnit(target, 1);</Command>
<Command>				deployAtTile(0, "Lampades Blood", 1*mGetVar(target, "tile"));</Command>
<Command>			} else {</Command>
<Command>				damageUnit(target, mGetVar(attacker, "attack"));</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*mGetVar(target, "tile"));</Command>
<Command>			}</Command>
<Command>			int n = 1*xsPow(2, ATTACK_EVENT_COUNT - 1);</Command>
<Command>			int events = 1*mGetVar(attacker, "OnAttack");</Command>
<Command>			for(x=ATTACK_EVENT_COUNT - 1; >=0) {</Command>
<Command>				if (events >= n) {</Command>
<Command>					OnAttack(attacker, target, x);</Command>
<Command>					events = events - n;</Command>
<Command>				}</Command>
<Command>				n = n / 2;</Command>
<Command>			}</Command>

<Command>			yRemoveFromDatabase(db);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool attackUnitAtCursor(int p = 0) {</Command>
<Command>	int target = findNearestUnit("p"+p+"clickPos", 9);</Command>
<Command>	int a = trQuestVarGet("activeUnit");</Command>

<Command>	if (target == -1) {</Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command>	if (HasKeyword(STEALTH, 1*mGetVar(target, "keywords"))) {</Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command><![CDATA[	if ((mGetVar(target, "player") == 3 - p) || (mGetVar(a, "proto") == kbGetProtoUnitID("Hoplite"))) {]]></Command>
<Command>		trQuestVarSet("targetUnit", target);</Command>
<Command>		trVectorSetUnitPos("d1pos", "activeUnit");</Command>
<Command>		trVectorSetUnitPos("d2pos", "targetUnit");</Command>
<Command>		float range = xsPow(mGetVar(a, "range") * 6 + 1, 2);</Command>
<Command>		float dist = 0;</Command>
<Command><![CDATA[		if (trDistanceBetweenVectorsSquared("d1pos", "d2pos") < range) {]]></Command>
<Command>			// Guard activates</Command>
<Command>			target = checkGuard(target);</Command>

<Command>			startAttack(a, target, HasKeyword(AMBUSH, 1*mGetVar(a, "keywords")), true);</Command>

<Command>			// Counterattack</Command>
<Command>			range = xsPow(mGetVar(target, "range") * 6 + 3, 2);</Command>
<Command><![CDATA[			if ((trDistanceBetweenVectorsSquared("d1pos", "d2pos") < range) &&]]></Command>
<Command><![CDATA[				(mGetVar(target, "stunTime") == 0) &&]]></Command>
<Command>				(HasKeyword(HEALER, 1*mGetVar(target, "keywords")) == false)) {</Command>
<Command><![CDATA[				if ((HasKeyword(FLYING, 1*mGetVar(a, "keywords")) == false) ||]]></Command>
<Command>					(mGetVar(target, "range") > 1)) {</Command>
<Command>					startAttack(target, a, false, true);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			mSetVar(a, "action", xsMax(ACTION_DONE, mGetVar(a, "action")));</Command>
<Command>			xsEnableRule("gameplay_05_attackComplete");</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>	} else if (HasKeyword(HEALER, 1*mGetVar(a, "keywords"))) {</Command>
<Command>		trQuestVarSet("targetUnit", target);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+a, true);</Command>
<Command>		trVectorSetUnitPos("d1pos", "activeUnit");</Command>
<Command>		trVectorSetUnitPos("d2pos", "targetUnit");</Command>
<Command>		trSetUnitOrientation(trGetUnitVector("d1pos", "d2pos"), xsVectorSet(0,1,0), true);</Command>
<Command>		trUnitOverrideAnimation(50, 0, false, true, -1);</Command>
<Command>		healUnit(target, mGetVar(a, "attack"));</Command>
<Command>		if (kbGetUnitBaseTypeID(kbGetBlockID(""+a)) == kbGetProtoUnitID("Physician")) {</Command>
<Command><![CDATA[			if (mGetVar(target, "action") < ACTION_SLEEPING) {]]></Command>
<Command>				mSetVar(target, "action", ACTION_READY);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		deployAtTile(0, "Regeneration SFX", 1*mGetVar(target, "tile"));</Command>
<Command>		mSetVar(a, "action", xsMax(ACTION_DONE, mGetVar(a, "action")));</Command>
<Command>		xsEnableRule("gameplay_05_attackComplete");</Command>
<Command>		return(true);</Command>
<Command>	}</Command>

<Command>	return(false);</Command>
<Command>}</Command>

<Command>rule resolve_attacks</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("ambushAttacks") > 0) {</Command>
<Command>		processAttack("ambushAttacks");</Command>
<Command>	} else if (yGetDatabaseCount("attacks") > 0) {</Command>
<Command>		processAttack("attacks");</Command>
<Command>	}</Command>
<Command><![CDATA[	if (trTimeMS() > trQuestVarGet("lightningNext") &&]]></Command>
<Command>		(trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop")) == false) {</Command>
<Command>		trQuestVarSet("lightningNext", trTimeMS() + 100);</Command>
<Command>		int index = modularCounterNext("lightningActivate");</Command>
<Command>		int targetIndex = trQuestVarGet("lightning"+index);</Command>
<Command>		// If Deadly and target isn't a commander</Command>
<Command><![CDATA[		if (trQuestVarGet("lightning"+index+"damage") == -1 &&]]></Command>
<Command>			mGetVar(targetIndex, "spell") == SPELL_NONE) {</Command>
<Command>			mSetVar(targetIndex, "health", 0);</Command>
<Command>			damageUnit(targetIndex, 1);</Command>
<Command>			deployAtTile(0, "Lampades Blood", 1*mGetVar(targetIndex, "tile"));</Command>
<Command>		} else {</Command>
<Command>			damageUnit(targetIndex, trQuestVarGet("lightning"+index+"damage"));</Command>
<Command>			deployAtTile(0, "Lightning sparks", 1*mGetVar(targetIndex, "tile"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_toggle_camera</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		if (trCheckGPActive("rain", p)) {</Command>
<Command>			if (trQuestVarGet("p"+p+"rain") == 0) {</Command>
<Command>				trQuestVarSet("p"+p+"rain", 1);</Command>
<Command>				if (trCurrentPlayer() == p) {</Command>
<Command>					trQuestVarSet("cameraCut", 1 - trQuestVarGet("cameraCut"));</Command>
<Command>					if (trQuestVarGet("cameraCut") == 1) {</Command>
<Command>						uiLookAtUnit(1*trQuestVarGet("p"+p+"block"));</Command>
<Command>					} else {</Command>
<Command>						uiLookAtUnit(kbGetBlockID(""+1*trQuestVarGet("p"+p+"commander"), true));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				ChatLogShow();</Command>
<Command>			}</Command>
<Command>		} else if (trQuestVarGet("p"+p+"rain") == 1) {</Command>
<Command>			trTechGodPower(p, "rain", 1);</Command>
<Command>			trQuestVarSet("p"+p+"rain", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_select_show_keywords</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	yDatabaseNext("allUnits", true);</Command>
<Command>	if (trUnitIsSelected()) {</Command>
<Command>		displayCardKeywordsAndDescription(1*trQuestVarGet("allUnits"));</Command>
<Command>	}</Command>

<Command>	for(p=2; >0) {</Command>
<Command>		yDatabaseNext("p"+p+"hand", true);</Command>
<Command>		if (trUnitIsSelected()) {</Command>
<Command>			displayCardKeywordsAndDescription(1*trQuestVarGet("p"+p+"hand"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_01_select</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_01_select");</Command>
<Command>		highlightReady(0.1);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_SELECT);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		int tile = 0;</Command>
<Command>		if (trQuestVarGet("p"+p+"click") == LEFT_CLICK) {</Command>
<Command>			int unit = findNearestUnit("p"+p+"clickPos", 8);</Command>
<Command>			trQuestVarSet("activeUnit", unit);</Command>
<Command>			if (unit > -1) {</Command>

<Command><![CDATA[				if (mGetVar(unit, "player") == p &&]]></Command>
<Command>					mGetVar(unit, "action") == ACTION_READY) {</Command>
<Command>					highlightReachable(unit);</Command>

<Command>					// highlight attackable enemies within range</Command>
<Command>					findTargets(unit, "targets", HasKeyword(HEALER, 1*mGetVar(unit, "keywords")));</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(3600.0, false);</Command>

<Command>					xsDisableRule("gameplay_01_select");</Command>
<Command>					highlightReady(0.1);</Command>
<Command>					xsEnableRule("gameplay_02_work");</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				// Check if player selected a card in hand.</Command>
<Command>				unit = -1;</Command>
<Command>				int cost = 0;</Command>
<Command>				int pointer = 0;</Command>
<Command>				float closestDistance = 9.0;</Command>
<Command>				float currentDistance = 0;</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>					yDatabaseNext("p"+p+"hand");</Command>
<Command>					currentDistance = trDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos");</Command>
<Command><![CDATA[					if (currentDistance < closestDistance) {]]></Command>
<Command>						closestDistance = currentDistance;</Command>
<Command>						unit = trQuestVarGet("p"+p+"hand");</Command>
<Command>						pointer = yGetPointer("p"+p+"hand");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (unit > -1) {</Command>
<Command>					cost = mGetVar(unit, "cost");</Command>
<Command>					if (mGetVar(unit, "spell") > 0) {</Command>
<Command>						cost = cost - trQuestVarGet("p"+p+"spellDiscount");</Command>
<Command>					} else {</Command>
<Command>						cost = cost - trQuestVarGet("p"+p+"minionDiscount");</Command>
<Command>					}</Command>
<Command>					if (HasKeyword(OVERFLOW, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>						cost = cost - trQuestVarGet("p"+p+"manaflow");</Command>
<Command>					}</Command>
<Command>					if (trQuestVarGet("p"+p+"mana") >= cost) {</Command>
<Command>						trQuestVarSet("gameplayPhase", GAMEPLAY_SUMMONING);</Command>
<Command>						// If it is a unit</Command>
<Command>						if (mGetVar(unit, "spell") == 0) {</Command>
<Command>							tile = 0;</Command>
<Command>							yClearDatabase("summonLocations");</Command>
<Command>							if (HasKeyword(AIRDROP, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>								for(x=zGetBankCount("tiles"); >0) {</Command>
<Command>									zBankNext("tiles");</Command>
<Command>									if (zGetVar("tiles", "occupant") + zGetVar("tiles", "terrain") == TILE_EMPTY) {</Command>
<Command>										yAddToDatabase("summonLocations", "tiles");</Command>
<Command>									}</Command>
<Command>								}</Command>
<Command>							} else {</Command>
<Command>								for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>									yDatabaseNext("allUnits");</Command>
<Command><![CDATA[									if (mGetVarByQV("allUnits", "player") == p && HasKeyword(BEACON, 1*mGetVarByQV("allUnits", "keywords"))) {]]></Command>
<Command>										tile = mGetVarByQV("allUnits", "tile");</Command>
<Command>										findAvailableTiles(tile, 1, "summonLocations");</Command>
<Command>									}</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>							for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>								tile = yDatabaseNext("summonLocations");</Command>
<Command>								if (trCurrentPlayer() == p) {</Command>
<Command>									highlightTile(tile, 3600);</Command>
<Command>								}</Command>
<Command>							}</Command>

<Command>							trQuestVarSet("summonUnit", unit);</Command>
<Command>							xsEnableRule("gameplay_10_summon");</Command>
<Command>						} else {</Command>
<Command>							// If it is a spell</Command>
<Command>							chooseSpell(1*mGetVar(unit, "spell"), pointer);</Command>
<Command>						}</Command>

<Command>						trQuestVarSet("handPointer", pointer);</Command>

<Command>						xsDisableRule("gameplay_01_select");</Command>
<Command>						highlightReady(0.1);</Command>
<Command>					}</Command>

<Command>				} else {</Command>
<Command>					for(x=yGetDatabaseCount("meteors"); >0) {</Command>
<Command>						yDatabaseNext("meteors");</Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("meteors", "p"+p+"clickPos") < 9) {]]></Command>
<Command>							trMessageSetText("A meteor will fall on this tile, dealing 6 damage to it and 2 damage to adjacent tiles.", -1);</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			trQuestVarSet("p"+p+"click", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_02_work</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_02_work");</Command>
<Command>		if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>			for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>				highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>			}</Command>
<Command>			yClearDatabase("reachable");</Command>
<Command>		}</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_WORK);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("activeUnit") > -1) {</Command>
<Command>					// Clear previously highlighted tiles.</Command>
<Command>					if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>						for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>							highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>						}</Command>
<Command>						yClearDatabase("reachable");</Command>
<Command>					}</Command>
<Command>					if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>						yDatabaseSelectAll("targets");</Command>
<Command>						trUnitHighlight(0.1, false);</Command>
<Command>						yClearDatabase("targets");</Command>
<Command>					}</Command>
<Command>					if (mGetVarByQV("activeUnit", "action") == ACTION_MOVED) {</Command>
<Command>						mSetVarByQV("activeUnit", "action", ACTION_DONE);</Command>
<Command>					}</Command>

<Command>					xsDisableRule("gameplay_02_work");</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>

<Command>					// trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				int unit = trQuestVarGet("activeUnit");</Command>
<Command>				if (attackUnitAtCursor(p) == false) {</Command>
<Command>					trQuestVarSet("moveTile", -1);</Command>
<Command>					for (x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>						yDatabaseNext("reachable");</Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("reachable", "p"+p+"clickPos") < 9) {]]></Command>
<Command>							trQuestVarCopy("moveTile", "reachable");</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (trQuestVarGet("moveTile") == -1) {</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>					} else {</Command>
<Command>						// un-highlight all tiles</Command>
<Command>						for (x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>							highlightTile(1*yDatabaseNext("reachable", false), 0.1);</Command>
<Command>						}</Command>
<Command>						yClearDatabase("reachable");</Command>

<Command>						if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>							yDatabaseSelectAll("targets");</Command>
<Command>							trUnitHighlight(0.1, false);</Command>
<Command>							yClearDatabase("targets");</Command>
<Command>						}</Command>

<Command>						int tile = mGetVarByQV("activeUnit", "tile");</Command>
<Command>						zSetVarByIndex("tiles", "occupant", tile, 0);</Command>
<Command>						if (HasKeyword(GUARD, 1*mGetVarByQV("activeUnit", "keywords"))) {</Command>
<Command>							tileGuard(tile, false);</Command>
<Command>						}</Command>

<Command>						trVectorSetUnitPos("moveDestination", "moveTile");</Command>
<Command>						trQuestVarSet("activeUnitID", kbGetBlockID(""+1*trQuestVarGet("activeUnit"), true));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelectByID(1*trQuestVarGet("activeUnitID"));</Command>
<Command>						trUnitMoveToVector("moveDestination");</Command>
<Command>						trQuestVarSet("moving", 0);</Command>

<Command>						mSetVarByQV("activeUnit", "action", ACTION_MOVED);</Command>
<Command>						trQuestVarSet("gameplayPhase", GAMEPLAY_MOVING);</Command>
<Command>						xsEnableRule("gameplay_03_moveComplete");</Command>
<Command>						xsDisableRule("gameplay_02_work");</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("gameplayPhase", GAMEPLAY_ATTACKING);</Command>
<Command>					xsDisableRule("gameplay_02_work");</Command>
<Command>				}</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_03_moveComplete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	// unit starts moving</Command>
<Command>	if (trQuestVarGet("moving") == 0) {</Command>
<Command><![CDATA[		if (kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 11 ||]]></Command>
<Command>			kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 10) {</Command>
<Command>			trQuestVarSet("moving", 1);</Command>
<Command>		} else if((trTime()-cActivationTime) > 1) {</Command>
<Command>			trQuestVarSet("moving", 1);</Command>
<Command>		}</Command>
<Command>	} else if (trQuestVarGet("moving") == 1) {</Command>
<Command><![CDATA[		if (kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 9 || trQuestVarGet("turnEnd") == 1) {]]></Command>
<Command>			int p = trQuestVarGet("activePlayer");</Command>

<Command>			trVectorSetUnitPos("start", "activeUnit");</Command>
<Command>			trVectorSetUnitPos("end", "moveTile");</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("moveTile"));</Command>
<Command>			trSetUnitOrientation(trGetUnitVector("start", "end"),xsVectorSet(0,1,0), true);</Command>
<Command>			teleportToTile(1*trQuestVarGet("activeUnit"), 1*trQuestVarGet("moveTile"));</Command>

<Command>			if (trQuestVarGet("turnEnd") == 0) {</Command>
<Command>				findTargets(1*trQuestVarGet("activeUnit"), "targets", HasKeyword(HEALER, 1*mGetVarByQV("activeUnit", "keywords")));</Command>
<Command>				if (yGetDatabaseCount("targets") == 0) {</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>
<Command>					mSetVarByQV("activeUnit", "action", ACTION_DONE);</Command>
<Command>				} else {</Command>
<Command>					xsEnableRule("gameplay_04_attack");</Command>
<Command>					mSetVarByQV("activeUnit", "action", ACTION_MOVED);</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(3600, false);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			mSetVarByQV("activeUnit", "tile", trQuestVarGet("moveTile"));</Command>
<Command>			zSetVarByIndex("tiles", "occupant", 1*trQuestVarGet("moveTile"), 1*trQuestVarGet("activeUnit"));</Command>

<Command>			if (HasKeyword(GUARD, 1*mGetVarByQV("activeUnit", "keywords"))) {</Command>
<Command>				refreshGuardAll();</Command>
<Command>			}</Command>


<Command>			xsDisableRule("gameplay_03_moveComplete");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_04_attack</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_04_attack");</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_WORK);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				mSetVarByQV("activeUnit", "action", ACTION_DONE);</Command>
<Command>				if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(0.1, false);</Command>
<Command>					yClearDatabase("targets");</Command>
<Command>				}</Command>
<Command>				xsDisableRule("gameplay_04_attack");</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				if (attackUnitAtCursor(p)) {</Command>
<Command>					if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>						yDatabaseSelectAll("targets");</Command>
<Command>						trUnitHighlight(0.1, false);</Command>
<Command>						yClearDatabase("targets");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("gameplayPhase", GAMEPLAY_ATTACKING);</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>					xsDisableRule("gameplay_04_attack");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_05_attackComplete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + yGetDatabaseCount("pushes") == 0) && (trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop"))) ||]]></Command>
<Command>		(trTime() > cActivationTime + 3)) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>

<Command>		if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>			for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>				highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>			}</Command>
<Command>			yClearDatabase("reachable");</Command>
<Command>		}</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>

<Command>		removeDeadUnits();</Command>
<Command>		refreshGuardAll();</Command>

<Command>		if (trQuestVarGet("turnEnd") == 0) {</Command>
<Command><![CDATA[			if (HasKeyword(FURIOUS, 1*mGetVarByQV("activeUnit", "keywords")) &&]]></Command>
<Command><![CDATA[				mGetVarByQV("activeUnit", "action") < ACTION_FURY &&]]></Command>
<Command>				mGetVarByQV("activeUnit", "health") > 0) {</Command>
<Command>				mSetVarByQV("activeUnit", "action", ACTION_FURY);</Command>
<Command>				xsEnableRule("gameplay_04_attack");</Command>
<Command>				yClearDatabase("targets");</Command>
<Command>				findTargets(1*trQuestVarGet("activeUnit"), "targets", HasKeyword(HEALER, 1*mGetVarByQV("activeUnit", "keywords")));</Command>
<Command>				yDatabaseSelectAll("targets");</Command>
<Command>				trUnitHighlight(3600, false);</Command>
<Command>			} else {</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		xsDisableRule("gameplay_05_attackComplete");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_10_summon</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>			yDatabaseNext("summonLocations");</Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yClearDatabase("summonLocations");</Command>
<Command>		xsDisableRule("gameplay_10_summon");</Command>
<Command>	} else {</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				int tile = -1;</Command>
<Command>				for(x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>					yDatabaseNext("summonLocations");</Command>
<Command><![CDATA[					if (trDistanceToVectorSquared("summonLocations", "p"+p+"clickPos") < 9) {]]></Command>
<Command>						tile = trQuestVarGet("summonLocations");</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				// Invalid location</Command>
<Command><![CDATA[				if (tile < 0) {]]></Command>
<Command>					for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					yClearDatabase("summonLocations");</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>
<Command>					xsDisableRule("gameplay_10_summon");</Command>
<Command>					// We don't set the player click to 0 in case this click was used to select another unit in hand.</Command>
<Command>				} else {</Command>
<Command>					int unit = trQuestVarGet("summonUnit");</Command>
<Command>					yAddToDatabase("allUnits", "summonUnit");</Command>

<Command>					teleportToTile(unit, tile);</Command>

<Command>					int cost = mGetVar(unit, "cost");</Command>
<Command>					cost = xsMax(0, cost - trQuestVarGet("p"+p+"minionDiscount"));</Command>
<Command>					if (HasKeyword(OVERFLOW, 1*mGetVar(unit, "keywords"))) {</Command>
<Command>						cost = xsMax(0, mGetVar(unit, "cost") - trQuestVarGet("p"+p+"manaflow"));</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") - cost);</Command>
<Command>					trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>

<Command>					if (HasKeyword(CHARGE, 1*mGetVar(unit, "keywords")) == true) {</Command>
<Command>						mSetVar(unit, "action", ACTION_READY);</Command>
<Command>					} else {</Command>
<Command>						mSetVar(unit, "action", ACTION_SLEEPING);</Command>
<Command>					}</Command>
<Command>					updateMana();</Command>



<Command>					updateAuras();</Command>

<Command>					ySetPointer("p"+p+"hand", 1*trQuestVarGet("handPointer"));</Command>
<Command>					zSetVarByIndex("p"+p+"handPos", "occupied", 1*yGetVar("p"+p+"hand", "pos"), 0);</Command>
<Command>					yRemoveFromDatabase("p"+p+"hand");</Command>

<Command>					zSetVarByIndex("tiles", "occupant", tile, unit);</Command>
<Command>					// If the unit has an OnPlay effect</Command>
<Command>					OnPlay(unit);</Command>
<Command>					updateHandPlayable(p);</Command>

<Command>					for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					yClearDatabase("summonLocations");</Command>

<Command>					string name = trStringQuestVarGet("card_"+1*kbGetUnitBaseTypeID(kbGetBlockID(""+unit))+"_name");</Command>
<Command><![CDATA[					ChatLog(0, "<color={Playercolor("+p+")}>{Playername("+p+")}</color> summoned " + name);]]></Command>

<Command>					xsDisableRule("gameplay_10_summon");</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>					yDatabaseNext("summonLocations");</Command>
<Command>					if (trCurrentPlayer() == p) {</Command>
<Command>						highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				yClearDatabase("summonLocations");</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>				xsDisableRule("gameplay_10_summon");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>const int BOT_PHASE_CARD_CHOOSE = 0;</Command>
<Command>const int BOT_PHASE_CARD_PLAY = 1;</Command>
<Command>const int BOT_PHASE_UNIT_CHOOSE = 2;</Command>
<Command>const int BOT_PHASE_UNIT_MOVE = 3;</Command>
<Command>const int BOT_PHASE_UNIT_ATTACK = 4;</Command>
<Command>const int BOT_PHASE_SPELL_PLAY = 5;</Command>

<Command>const int BOT_PERSONALITY_DEFAULT = 0;	// Default bot, moves and attacks</Command>
<Command>const int BOT_PERSONALITY_TRAINING = 1; // Training bot, passes turn</Command>

<Command>void InitBot(int personality = 0){</Command>
<Command>	trQuestVarSet("botPersonality", personality);</Command>
<Command>}</Command>

<Command>rule Bot_00_turn_start</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trQuestVarCopy("botManaOptions", "p2mana");</Command>
<Command>	trQuestVarSet("botMoveOptions", 10);</Command>
<Command>	xsEnableRule("Bot1");</Command>
<Command>	xsDisableRule("Bot_00_turn_start");</Command>
<Command>	//This is a bandaid fix</Command>
<Command>	xsEnableRule("BotTimer");</Command>
<Command>	trQuestVarSet("botTimer", trTime() + 2 * trQuestVarGet("maxMana") + 5 * trCountUnitsInArea("128",2,"Unit",45));</Command>
<Command>}</Command>

<Command>rule BotTimer</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTime() > trQuestVarGet("botTimer")){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		ChatLog(0, "Bot ran out of time.");</Command>
<Command>		trTechInvokeGodPower(2, "Nidhogg", vector(110,0,110), vector(110,0,110));</Command>
<Command>		xsDisableRule("Bot1");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule Bot1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTimeMS() > trQuestVarGet("botTimeNext")) {</Command>
<Command>		if(trQuestVarGet("botPersonality") == BOT_PERSONALITY_TRAINING){</Command>
<Command>			trTechInvokeGodPower(2, "Nidhogg", vector(110,0,110), vector(110,0,110));</Command>
<Command>			xsDisableRule("Bot1");</Command>
<Command>			xsDisableRule("BotTimer");</Command>
<Command>			trQuestVarSet("gameplayPhase", -1);</Command>
<Command>		}</Command>

<Command>		trQuestVarSet("botTimeNext", trTimeMS() + 200);</Command>
<Command>		trQuestVarSet("botClick", -1);</Command>

<Command>		switch(1*trQuestVarGet("gameplayPhase"))</Command>
<Command>		{</Command>
<Command>			case GAMEPLAY_SELECT:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("botChooseHand", 0);</Command>
<Command>				trQuestVarSet("botChooseUnit", 0);</Command>
<Command>				if (trQuestVarGet("botManaOptions") >= 0) {</Command>
<Command>					trQuestVarSetFromRand("botChooseHand", 1, 3, true);</Command>
<Command>				}</Command>
<Command>				if (trQuestVarGet("botMoveOptions") >= 0) {</Command>
<Command>					trQuestVarSetFromRand("botChooseUnit", 1, 3, true);</Command>
<Command>				}</Command>
<Command>				// If no more options left</Command>
<Command>				if (trQuestVarGet("botChooseHand") + trQuestVarGet("botChooseUnit") == 0) {</Command>
<Command>					trTechInvokeGodPower(2, "Nidhogg", vector(110,0,110), vector(110,0,110));</Command>
<Command>					xsDisableRule("Bot1");</Command>
<Command>					xsDisableRule("BotTimer");</Command>
<Command>					// If choose hand</Command>
<Command>				} else if (trQuestVarGet("botChooseHand") > trQuestVarGet("botChooseUnit")) {</Command>
<Command>					trQuestVarSet("botSpell", -1);</Command>
<Command>					trQuestVarSet("botProto", -1);</Command>
<Command>					int maxCardCost = -1;</Command>
<Command>					int spell = 0;</Command>
<Command>					int proto = 0;</Command>
<Command>					for(x=yGetDatabaseCount("p2hand"); >0) {</Command>
<Command>						yDatabaseNext("p2hand");</Command>
<Command><![CDATA[						if ((mGetVarByQV("p2hand", "cost") <= trQuestVarGet("p2mana")) &&]]></Command>
<Command><![CDATA[							mGetVarByQV("p2hand", "cost") <= trQuestVarGet("botManaOptions")) {]]></Command>
<Command>							// Bot plays cast in desc order of their cost</Command>
<Command>							int currentCardCost = mGetVarByQV("p2hand", "cost");</Command>
<Command>							// Bot loves Airdrop</Command>
<Command>							if(HasKeyword(AIRDROP, 1*mGetVarByQV("p2hand", "keywords"))){</Command>
<Command>								currentCardCost = currentCardCost + 9000;</Command>
<Command>							}</Command>
<Command>							if(currentCardCost > maxCardCost){</Command>
<Command>								maxCardCost = currentCardCost;</Command>
<Command>								trVectorSetUnitPos("botClickPos", "p2hand");</Command>
<Command>								spell = 1*mGetVarByQV("p2hand", "spell");</Command>
<Command>								proto = 1*mGetVarByQV("p2hand", "proto");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(maxCardCost > -1){</Command>
<Command>						// Bot Click Left</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>						if (spell > 0) {</Command>
<Command>							trQuestVarSet("botSpell", spell);</Command>
<Command>						}</Command>
<Command>						trQuestVarSet("botProto", proto);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSet("botManaOptions", -1);</Command>
<Command>					}</Command>
<Command>					// bot select unit</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("botActiveUnit", 0);</Command>
<Command>					int maxUnitCost = -1;</Command>
<Command>					for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>						yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[						if (mGetVarByQV("allUnits", "action") == ACTION_READY && mGetVarByQV("allUnits", "player") == 2) {]]></Command>
<Command>							int currentUnitCost = mGetVarByQV("allUnits", "cost");</Command>
<Command><![CDATA[							if (currentUnitCost <= trQuestVarGet("botMoveOptions")){]]></Command>
<Command>								maxUnitCost = currentUnitCost;</Command>
<Command>								trQuestVarSet("botActiveUnit", trQuestVarGet("allUnits"));</Command>
<Command>								trVectorSetUnitPos("botClickPos", "allUnits");</Command>
<Command>								trVectorSetUnitPos("botMovePos", "allUnits");</Command>
<Command>								break;</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(maxUnitCost > -1){</Command>
<Command>						// Bot Click Left</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSet("botMoveOptions", -1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case GAMEPLAY_SPELL_UNIT:</Command>
<Command>			{</Command>
<Command>				if(1*trQuestVarGet("spell_" + 1*trQuestVarGet("botSpell") + "_type") == SPELL_TYPE_OFFENSIVE){</Command>
<Command>					for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>						yDatabaseNext("castTargets", true);</Command>
<Command>						if(trUnitIsOwnedBy(2)){</Command>
<Command>							yRemoveFromDatabase("castTargets");</Command>
<Command>						}</Command>
<Command>					}</Command>

<Command>					if(1*trQuestVarGet("botSpell") == SPELL_INTIMIDATE){</Command>
<Command>						for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>							yDatabaseNext("castTargets");</Command>
<Command>							if(mGetVarByQV("castTargets", "stunTime") > 0){</Command>
<Command>								yRemoveFromDatabase("castTargets");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command><![CDATA[					} else if((1*trQuestVarGet("botSpell") == SPELL_PISTOL_SHOT) || (1*trQuestVarGet("botSpell") == SPELL_PYROBALL)){]]></Command>
<Command>						trQuestVarSet("value", -1);</Command>
<Command>						trQuestVarSet("valueTarget", -1);</Command>
<Command>						for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>							yDatabaseNext("castTargets");</Command>
<Command><![CDATA[							if(trQuestVarGet("value") < (mGetVarByQV("castTargets", "attack") + mGetVarByQV("castTargets", "health") + mGetVarByQV("castTargets", "cost") + 10*mGetVarByQV("castTargets", "spell"))){]]></Command>
<Command>								trQuestVarSet("value", mGetVarByQV("castTargets", "attack") + mGetVarByQV("castTargets", "health") + mGetVarByQV("castTargets", "cost") + 10*mGetVarByQV("castTargets", "spell"));</Command>
<Command>								trQuestVarSet("valueTarget", trQuestVarGet("castTargets"));</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						yClearDatabase("castTargets");</Command>
<Command><![CDATA[						if((trQuestVarGet("value") > 9) || (mGetVarByQV("valueTarget", "attack") >= mGetVarByQV("p2commander", "health"))){]]></Command>
<Command>							yAddToDatabase("castTargets", "valueTarget");</Command>
<Command>						}</Command>
<Command>					} else if(1*trQuestVarGet("botSpell") == SPELL_ELECTROSURGE){</Command>
<Command>						for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>							yDatabaseNext("castTargets");</Command>
<Command><![CDATA[							if(trCountUnitsInArea(""+1*trQuestVarGet("castTargets"),1,"Unit",9) < 2){]]></Command>
<Command>								yRemoveFromDatabase("castTargets");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					} else if(1*trQuestVarGet("botSpell") == SPELL_WATER_PRESSURE){</Command>
<Command>						for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>							yDatabaseNext("castTargets");</Command>
<Command><![CDATA[							if(mGetVarByQV("castTargets", "attack") < 2 && mGetVarByQV("castTargets", "health") < 2){]]></Command>
<Command>								yRemoveFromDatabase("castTargets");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>

<Command>				} else if(1*trQuestVarGet("spell_" + 1*trQuestVarGet("botSpell") + "_type") == SPELL_TYPE_DEFENSIVE){</Command>
<Command>					for(x=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>						yDatabaseNext("castTargets", true);</Command>
<Command>						if(trUnitIsOwnedBy(2) == false){</Command>
<Command>							yRemoveFromDatabase("castTargets");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				if (yGetDatabaseCount("castTargets") > 0) {</Command>
<Command>					trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("castTargets"), true);</Command>
<Command>					for(x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>						yDatabaseNext("castTargets");</Command>
<Command>					}</Command>
<Command>					trVectorSetUnitPos("botClickPos", "castTargets");</Command>
<Command>					trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					trQuestVarSet("botThinking", 0);</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>					trQuestVarSet("botManaOptions", trQuestVarGet("botManaOptions") - 1);</Command>
<Command>					trQuestVarSet("botTimeNext", trTimeMS());</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case GAMEPLAY_SPELL_TILE:</Command>
<Command>			{</Command>
<Command>				if (1*trQuestVarGet("spell_" + 1*trQuestVarGet("botSpell") + "_type") == SPELL_TYPE_OFFENSIVE) {</Command>
<Command>					for(x=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>						yDatabaseNext("castTiles");</Command>
<Command>						if(mGetVar(1*zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("castTiles")), "player") != 1){</Command>
<Command>							yRemoveFromDatabase("castTiles");</Command>
<Command>						}</Command>
<Command>					}</Command>

<Command>					if(1*trQuestVarGet("botSpell") == SPELL_EXPLOSION){</Command>
<Command>						for(x=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>							yDatabaseNext("castTiles");</Command>
<Command><![CDATA[							if(trCountUnitsInArea(""+1*zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("castTiles")),1,"Unit",9) < 2){]]></Command>
<Command>								yRemoveFromDatabase("castTiles");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>

<Command>				} else if (1*trQuestVarGet("spell_" + 1*trQuestVarGet("botSpell") + "_type") == SPELL_TYPE_DEFENSIVE) {</Command>
<Command>					for(x=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>						yDatabaseNext("castTiles");</Command>
<Command><![CDATA[						if(mGetVar(1*zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("castTiles")), "player") < 2){]]></Command>
<Command>							yRemoveFromDatabase("castTiles");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				if(1*trQuestVarGet("botSpell") == SPELL_GROUND_STOMP){</Command>
<Command><![CDATA[					if(trCountUnitsInArea(""+1*trQuestVarGet("p2commander"),1,"Unit",9) < 1){]]></Command>
<Command>						yClearDatabase("castTiles");</Command>
<Command>					}</Command>
<Command><![CDATA[				} else if((1*trQuestVarGet("botSpell") == SPELL_FINAL_EXAM) || (1*trQuestVarGet("botSpell") == SPELL_CLASS_TIME) || (1*trQuestVarGet("botSpell") == SPELL_PARTY_UP)){]]></Command>
<Command>					if(yGetDatabaseCount("p2hand") > 7){</Command>
<Command>						yClearDatabase("castTiles");</Command>
<Command>					}</Command>
<Command><![CDATA[				} else if((1*trQuestVarGet("botSpell") == SPELL_APOCALYPSE) || (1*trQuestVarGet("botSpell") == SPELL_ELVEN_APOCALYPSE)){]]></Command>
<Command>					if(yGetDatabaseCount("p2hand") > 2){</Command>
<Command>						yClearDatabase("castTiles");</Command>
<Command>					}</Command>
<Command><![CDATA[				} else if((1*trQuestVarGet("botSpell") == SPELL_VICTORY) || (1*trQuestVarGet("botSpell") == SPELL_BOOTS_TREASURE) || (1*trQuestVarGet("botSpell") == SPELL_WEAPONS_TREASURE) || (1*trQuestVarGet("botSpell") == SPELL_SHIELDS_TREASURE)){]]></Command>
<Command><![CDATA[					if(trCountUnitsInArea("128",2,"Unit",45) < 3){]]></Command>
<Command>						yClearDatabase("castTiles");</Command>
<Command>					}</Command>
<Command>				} else if(1*trQuestVarGet("botSpell") == SPELL_REFRESH_MANA){</Command>
<Command><![CDATA[					if((trQuestVarGet("maxMana") - trQuestVarGet("p2mana")) < 4){]]></Command>
<Command>						yClearDatabase("castTiles");</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				if (1*trQuestVarGet("botSpell") == SPELL_SCRAP_METAL) {</Command>
<Command>					trQuestVarSet("botManaOptions", trQuestVarGet("p2mana") + 1);</Command>
<Command>				}</Command>

<Command>				if (yGetDatabaseCount("castTiles") > 0) {</Command>
<Command>					trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("castTiles"), true);</Command>
<Command>					for(x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>						yDatabaseNext("castTiles");</Command>
<Command>					}</Command>
<Command>					trVectorSetUnitPos("botClickPos", "castTiles");</Command>
<Command>					trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					trQuestVarSet("botThinking", 0);</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>					trQuestVarSet("botManaOptions", trQuestVarGet("botManaOptions") - 1);</Command>
<Command>					trQuestVarSet("botTimeNext", trTimeMS());</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case GAMEPLAY_SUMMONING:</Command>
<Command>			{</Command>
<Command><![CDATA[				if((trQuestVarGet("botProto") == kbGetProtoUnitID("Griffon")) || (trQuestVarGet("botProto") == kbGetProtoUnitID("Avenger"))){]]></Command>
<Command>					for(x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command><![CDATA[						if(trCountUnitsInArea(""+1*trQuestVarGet("summonLocations"),1,"Unit",9) < 1){]]></Command>
<Command>							yRemoveFromDatabase("summonLocations");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				// Bot tries to play a unit but there are no tiles where to summon it, skip playing cards</Command>
<Command>				if(yGetDatabaseCount("summonLocations") == 0){</Command>
<Command>					trQuestVarSet("botManaOptions", trQuestVarGet("botManaOptions") - 1);</Command>
<Command>					// Bot Click Right</Command>
<Command>					trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("summonLocations"), true);</Command>
<Command>				}</Command>

<Command>				for (x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>					yDatabaseNext("summonLocations");</Command>
<Command>				}</Command>
<Command>				// Bot summons a unit</Command>
<Command>				trVectorSetUnitPos("botClickPos", "summonLocations");</Command>
<Command>				// Bot Click Left</Command>
<Command>				trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>				// Reset move options to 10 because there may be new options now</Command>
<Command>				trQuestVarSet("botMoveOptions", 10);</Command>
<Command>			}</Command>


<Command>			case GAMEPLAY_WORK:</Command>
<Command>			{</Command>
<Command>				yClearDatabase("botOptions");</Command>
<Command>				int bestTile = 0;</Command>
<Command>				int bestTileScore = -1000;</Command>
<Command>				int currentScore = 0;</Command>
<Command>				trVectorSetUnitPos("commanderpos", "p1commander");</Command>
<Command>				for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>					yDatabaseNext("reachable");</Command>
<Command>					currentScore = 2*mGetVarByQV("botActiveUnit", "attack") * trCountUnitsInArea(""+1*trQuestVarGet("reachable"),1,"Unit",1.0+6.0*mGetVarByQV("botActiveUnit", "range"));</Command>
<Command>					currentScore = currentScore - trDistanceToVector("reachable", "commanderpos") / 9;</Command>
<Command>					if (currentScore >= bestTileScore) {</Command>
<Command>						trVectorSetUnitPos("pos", "reachable");</Command>
<Command>						for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>							yDatabaseNext("allUnits");</Command>
<Command>							if (mGetVarByQV("allUnits", "player") == 1) {</Command>
<Command><![CDATA[								if (trDistanceToVector("allUnits", "pos") < 1.0 + 6.0*mGetVarByQV("allUnits", "range")) {]]></Command>
<Command>									currentScore = currentScore - mGetVarByQV("allUnits", "attack");</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						}</Command>

<Command>						if (currentScore >= bestTileScore) {</Command>
<Command>							bestTileScore = currentScore;</Command>
<Command>							bestTile = trQuestVarGet("reachable");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				int bestTarget = 0;</Command>
<Command>				int bestTargetScore = -1000;</Command>
<Command>				currentScore = 0;</Command>
<Command>				trVectorSetUnitPos("pos", "botActiveUnit");</Command>
<Command>				for (x=yGetDatabaseCount("targets"); >0) {</Command>
<Command>					yDatabaseNext("targets");</Command>
<Command><![CDATA[					if((trQuestVarGet("botActiveUnit") == trQuestVarGet("p2commander")) && (mGetVarByQV("targets", "attack") >= mGetVarByQV("botActiveUnit", "health"))){]]></Command>
<Command>						continue;</Command>
<Command>					}</Command>
<Command><![CDATA[					if((HasKeyword(DEADLY, 1*mGetVarByQV("botActiveUnit", "keywords"))) && (1*mGetVarByQV("targets", "spell") == 0)){]]></Command>
<Command>						currentScore = mGetVarByQV("targets", "health");</Command>
<Command>					} else {</Command>
<Command>						currentScore = mGetVarByQV("botActiveUnit", "attack") - mGetVarByQV("targets", "health");</Command>
<Command>						if(HasKeyword(ARMORED, 1*mGetVarByQV("targets", "keywords"))){</Command>
<Command>							currentScore = currentScore - 1;</Command>
<Command>						}</Command>
<Command>						if(HasKeyword(IMMUNE, 1*mGetVarByQV("targets", "keywords"))){</Command>
<Command>							currentScore = 0;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					// If the target dies, then currentScore = 2 * (target's attack + cost)</Command>
<Command>					if (currentScore >= 0) {</Command>
<Command>						currentScore = 2*(mGetVarByQV("targets", "attack") + mGetVarByQV("targets", "cost"));</Command>
<Command>					} else if (mGetVarByQV("targets", "player") == 2) {</Command>
<Command>						continue; // Zenophobia doesn't attack allies that he can't kill</Command>
<Command>					}</Command>
<Command>					// If the target can counterattack, we subtract its attack from currentScore</Command>
<Command><![CDATA[					if (trDistanceToVector("targets", "pos") <= 1 + 6 * mGetVarByQV("targets", "range")) {]]></Command>
<Command><![CDATA[						if((HasKeyword(DEADLY, 1*mGetVarByQV("targets", "keywords"))) && (1*mGetVarByQV("botActiveUnit", "spell") == 0)){]]></Command>
<Command>							currentScore = currentScore - mGetVarByQV("botActiveUnit", "health");</Command>
<Command>						} else {</Command>
<Command><![CDATA[							if((1*mGetVarByQV("targets", "stunTime") == 0) && (HasKeyword(IMMUNE, 1*mGetVarByQV("botActiveUnit", "keywords")) == false)){]]></Command>
<Command>								currentScore = currentScore - mGetVarByQV("targets", "attack");</Command>
<Command>								if(HasKeyword(ARMORED, 1*mGetVarByQV("botActiveUnit", "keywords"))){</Command>
<Command>									currentScore = currentScore + 1;</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (currentScore > bestTargetScore) {</Command>
<Command>						bestTargetScore = currentScore;</Command>
<Command>						bestTarget = trQuestVarGet("targets");</Command>
<Command>					}</Command>
<Command>				}</Command>

<Command>				trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>				if (bestTargetScore > bestTileScore) {</Command>
<Command>					trVectorQuestVarSet("botClickPos", kbGetBlockPosition(""+bestTarget,true));</Command>
<Command>					trQuestVarSet("botMoveOptions", 10);</Command>
<Command>					trQuestVarCopy("botManaOptions", "p2mana");</Command>
<Command>				} else if (bestTileScore > -1000) {</Command>
<Command>					trVectorQuestVarSet("botClickPos", kbGetBlockPosition(""+bestTile));</Command>
<Command>					trQuestVarSet("botMoveOptions", 10);</Command>
<Command>					trQuestVarCopy("botManaOptions", "p2mana");</Command>
<Command>				} else {</Command>
<Command>					trVectorQuestVarSet("botClickPos", xsVectorSet(111,0,111));</Command>
<Command>					trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					trQuestVarSet("botMoveOptions", trQuestVarGet("botMoveOptions") - 1);</Command>
<Command>					trQuestVarSet("botTimeNext", trTimeMS());</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		if (trQuestVarGet("botClick") >= 0) {</Command>
<Command>			trVectorQuestVarSet("p2clickPos", trVectorQuestVarGet("botClickPos"));</Command>
<Command>			trQuestVarSet("p2click", trQuestVarGet("botClick"));</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("botTimeNext", trTimeMS());</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule match_00_start</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trTechGodPower(0, "spy", 2);</Command>
<Command>	int commander = 0;</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		commander = CommanderToProtounit(1*trQuestVarGet("p"+p+"commanderType"));</Command>
<Command>		trQuestVarSet("p"+p+"commander", summonAtTile(1*trQuestVarGet("p"+p+"startTile"), p, commander));</Command>
<Command>		mSetVarByQV("p"+p+"commander", "spell", SPELL_COMMANDER);</Command>
<Command>		mSetVarByQV("p"+p+"commander", "action", ACTION_DONE);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("p"+p+"commander"), true);</Command>
<Command>		spyEffect("Healing SFX");</Command>

<Command>		trQuestVarSet("p"+p+"drawCards", 4);</Command>
<Command>		zSetVarByIndex("tiles", "occupant", 1*trQuestVarGet("p"+p+"startTile"), 1*trQuestVarGet("p"+p+"commander"));</Command>

<Command>		shuffleDeck(p);</Command>

<Command>		trQuestVarSet("p"+p+"defeated", 0);</Command>
<Command>	}</Command>
<Command>	// Ravens</Command>
<Command>	trQuestVarSet("p1block", 869);</Command>
<Command>	trQuestVarSet("p2block", 871);</Command>
<Command>	trQuestVarSet("maxMana", 0);</Command>

<Command>	xsDisableRule("match_00_start");</Command>
<Command>	xsEnableRule("match_01_mulliganStart");</Command>
<Command>	xsEnableRule("gameplay_toggle_camera");</Command>
<Command>}</Command>

<Command>rule match_01_mulliganStart</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1drawCards") + trQuestVarGet("p2drawCards") == 0) {</Command>
<Command>		trTechGodPower(1, "nidhogg", 1);</Command>
<Command>		trTechGodPower(2, "nidhogg", 1);</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>				ySetVar("p"+p+"hand", "mulligan", 0);</Command>
<Command>			}</Command>
<Command>			trQuestVarSet("p"+p+"done", 0);</Command>
<Command>		}</Command>
<Command>		trMessageSetText("Left click to choose cards to mulligan. Enter to finish.",-1);</Command>

<Command>		if(Multiplayer){</Command>
<Command>			trCounterAddTime("counter", 21, 1, "Mulligan phase",-1);</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("p2done", 1);</Command>
<Command>		}</Command>

<Command>		xsEnableRule("match_02_mulligan");</Command>
<Command>		xsDisableRule("match_01_mulliganStart");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule match_02_mulligan</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if ((trQuestVarGet("p1done") + trQuestVarGet("p2done") == 2) || (Multiplayer  && (trTime() > cActivationTime + 20))) {]]></Command>
<Command>		xsEnableRule("match_03_replace");</Command>
<Command>		xsDisableRule("match_02_mulligan");</Command>
<Command>	} else {</Command>
<Command>		int unit = -1;</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			if (trQuestVarGet("p"+p+"done") == 0) {</Command>
<Command>				if (trPlayerUnitCountSpecific(p, "Nidhogg") > 0) {</Command>
<Command>					if (yFindLatestReverse("nidhoggNext", "Nidhogg", p) > 0) {</Command>
<Command>						trUnitDestroy();</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p"+p+"done", 1);</Command>
<Command>				}</Command>
<Command>				if (1*trQuestVarGet("p"+p+"click") == LEFT_CLICK) {</Command>
<Command>					unit = -1;</Command>
<Command>					for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>						yDatabaseNext("p"+p+"hand");</Command>
<Command><![CDATA[						if (trDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos") < 4) {]]></Command>
<Command>							unit = yGetPointer("p"+p+"hand");</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (unit > -1) {</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							displayCardKeywordsAndDescription(yGetUnitAtIndex("p"+p+"hand", unit));</Command>
<Command>							trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>						ySetPointer("p"+p+"hand", unit);</Command>
<Command>						ySetVar("p"+p+"hand", "mulligan", 1 - yGetVar("p"+p+"hand", "mulligan"));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>						if (yGetVar("p"+p+"hand", "mulligan")  == 0) {</Command>
<Command>							trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>						} else {</Command>
<Command>							trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trQuestVarSet("p"+p+"click", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule match_03_replace</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trCounterAbort("counter");</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		trPlayerKillAllGodPowers(p);</Command>
<Command>		trTechGodPower(p, "rain", 1);</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"hand", true);</Command>
<Command>			if (yGetVar("p"+p+"hand", "mulligan") == 1) {</Command>
<Command>				addCardToDeck(p, kbGetProtoUnitName(1*mGetVarByQV("p"+p+"hand", "proto")), mGetVarByQV("p"+p+"hand", "spell"));</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") + 1);</Command>
<Command>				trVectorSetUnitPos("pos", "p"+p+"hand");</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),0, true);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				zSetVarByIndex("p"+p+"handPos", "occupied", 1*yGetVar("p"+p+"hand", "pos"), 0);</Command>
<Command>			} else {</Command>
<Command>				transferUnit("temp", "p"+p+"hand");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yClearDatabase("p"+p+"hand");</Command>
<Command>		for(x=yGetDatabaseCount("temp"); >0) {</Command>
<Command>			yDatabaseNext("temp");</Command>
<Command>			transferUnit("p"+p+"hand", "temp");</Command>
<Command>		}</Command>
<Command>		yClearDatabase("temp");</Command>
<Command>		shuffleDeck(p);</Command>
<Command>	}</Command>
<Command>	xsEnableRule("gameplay_select_show_keywords");</Command>
<Command>	trQuestVarSet("activePlayer", 2);</Command>
<Command>	xsEnableRule("turn_00_start");</Command>
<Command>	xsDisableRule("match_03_replace");</Command>
<Command>}</Command>

<Command>rule turn_00_start</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if ((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + trQuestVarGet("bossSpell") + trQuestVarGet("chainReactionDeath") == 0) && (trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop"))) {]]></Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		if (trQuestVarGet("p"+p+"borrowedTime") > 0) {</Command>
<Command>			trQuestVarSet("p"+p+"borrowedTime", trQuestVarGet("p"+p+"borrowedTime") - 1);</Command>
<Command>		} else {</Command>
<Command>			p = 3 - p;</Command>
<Command><![CDATA[			if ((p == 1) && (trQuestVarGet("maxMana") < 10)) {]]></Command>
<Command>				trQuestVarSet("maxMana", trQuestVarGet("maxMana") + 1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("activePlayer", p);</Command>
<Command>		trQuestVarSet("turnEnd", 0);</Command>
<Command>		trPlayerKillAllGodPowers(p);</Command>
<Command>		yClearDatabase("turnStart");</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>				if (mGetVarByQV("allUnits", "stunTime") > 0) {</Command>
<Command>					mSetVarByQV("allUnits", "stunTime", mGetVarByQV("allUnits", "stunTime") - 1);</Command>
<Command>					if (mGetVarByQV("allUnits", "stunTime") == 0) {</Command>
<Command>						mSetVarByQV("allUnits", "action", ACTION_READY);</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*mGetVarByQV("allUnits", "stunSFX"), true);</Command>
<Command>						trMutateSelected(kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>					} else {</Command>
<Command>						mSetVarByQV("allUnits", "action", ACTION_STUNNED);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					mSetVarByQV("allUnits", "action", ACTION_READY);</Command>
<Command>				}</Command>
<Command>				if (HasKeyword(REGENERATE, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>					trDamageUnitPercent(-100);</Command>
<Command>					xsSetContextPlayer(p);</Command>
<Command>					float health = kbUnitGetCurrentHitpoints(kbGetBlockID(""+1*trQuestVarGet("allUnits"), true));</Command>
<Command>					xsSetContextPlayer(0);</Command>
<Command>					mSetVarByQV("allUnits", "health", xsMax(mGetVarByQV("allUnits", "health"), health));</Command>
<Command>				}</Command>
<Command>				// Start of turn effects</Command>
<Command>				yAddToDatabase("turnStart", "allUnits");</Command>
<Command>			} else {</Command>
<Command>				mSetVarByQV("allUnits", "action", ACTION_DONE);</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if (trQuestVarGet("p"+p+"guardianOfTheSea") == 1) {</Command>
<Command>			trQuestVarSet("p"+p+"guardianOfTheSea", 0);</Command>
<Command>			mSetVarByQV("p"+p+"commander", "keywords", ClearBit(1*mGetVarByQV("p"+p+"commander", "keywords"), ARMORED));</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("turnStartDelay", trTimeMS() + 500);</Command>
<Command>		xsEnableRule("turn_01_resolve_turn_start");</Command>
<Command>		xsDisableRule("turn_00_start");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule turn_01_resolve_turn_start</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTimeMS() > trQuestVarGet("turnStartDelay")) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		bool delay = false;</Command>
<Command>		for(x=yGetDatabaseCount("turnStart"); >0) {</Command>
<Command>			yDatabaseNext("turnStart");</Command>
<Command>			yRemoveFromDatabase("turnStart");</Command>
<Command>			if(OnTurnStart(1*trQuestVarGet("turnStart")) == true){</Command>
<Command>				delay = true;</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		if(delay){</Command>
<Command>			trQuestVarSet("turnStartDelay", trTimeMS() + 500);</Command>
<Command>		} else {</Command>
<Command>			trSoundPlayFN("fanfare.wav","1",-1,"","");</Command>

<Command>			trTechGodPower(p, "create gold", 1);</Command>
<Command>			trTechGodPower(p, "animal magnetism", 1);</Command>
<Command>			trTechGodPower(p, "rain", 1);</Command>
<Command>			trTechGodPower(p, "nidhogg", 1);</Command>

<Command>			if(Multiplayer){</Command>
<Command>				trCounterAddTime("turnTimer", 121, 1, "Turn end", -1);</Command>
<Command>			} else if (p == 2) {</Command>
<Command>				trQuestVarSet("botPhase", 0);</Command>
<Command>				trQuestVarSet("botThinking", 0);</Command>
<Command>				xsEnableRule("Bot_00_turn_start");</Command>
<Command>			}</Command>



<Command>			trQuestVarSet("p"+p+"mana", xsMax(0, trQuestVarGet("maxMana") - trQuestVarGet("p"+p+"manaTax")));</Command>
<Command>			trQuestVarSet("p"+p+"manaTax", 0);</Command>

<Command>			trQuestVarSet("p"+p+"click", 0);</Command>
<Command>			highlightReady(100);</Command>

<Command>			trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") + 1);</Command>

<Command>			updateMana();</Command>
<Command>			removeDeadUnits();</Command>
<Command>			updateAuras();</Command>
<Command>			xsEnableRule("gameplay_01_select");</Command>
<Command>			xsEnableRule("turn_02_end");</Command>
<Command>			xsDisableRule("turn_01_resolve_turn_start");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>}</Command>


<Command>rule turn_02_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command><![CDATA[	if ((trPlayerUnitCountSpecific(p, "Nidhogg") > 0) || (Multiplayer && (trTime() > cActivationTime + 120))) {]]></Command>
<Command>		if (yFindLatestReverse("nidhoggNext", "Nidhogg", p) > 0) {</Command>
<Command>			trUnitDestroy();</Command>
<Command>		}</Command>
<Command>		ChatLogShow();</Command>
<Command>		trQuestVarSet("p"+p+"manaflow", trQuestVarGet("p"+p+"mana") + trQuestVarGet("p"+p+"extraManaflow"));</Command>
<Command>		trQuestVarSet("p"+p+"mana", -1);</Command>
<Command>		trQuestVarSet("p"+p+"extraManaflow", 0);</Command>
<Command>		updateHandPlayable(p);</Command>

<Command>		trPlayerKillAllGodPowers(p);</Command>
<Command>		trTechGodPower(p, "rain", 1);</Command>
<Command>		trCounterAbort("mana");</Command>
<Command>		trCounterAbort("handAndDeck");</Command>
<Command>		trCounterAbort("turnTimer");</Command>

<Command>		trQuestVarSet("turnEnd", 1);</Command>

<Command>		trQuestVarSet("apocalypse", trQuestVarGet("apocalypse") - 1);</Command>
<Command>		if (trQuestVarGet("apocalypse") == 0) {</Command>
<Command>			musicToggleBattleMode();</Command>
<Command>		}</Command>

<Command>		trQuestVarSet("mindflayerDamage", trCountUnitsInArea("128",p,"Argus",45));</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (mGetVarByQV("allUnits", "victory") > 0) {</Command>
<Command>				mSetVarByQV("allUnits", "attack", mGetVarByQV("allUnits", "attack") - mGetVarByQV("allUnits", "victory"));</Command>
<Command>				mSetVarByQV("allUnits", "victory", 0);</Command>
<Command>				if (mGetVarByQV("allUnits", "victoryAmbush") == 0) {</Command>
<Command>					mSetVarByQV("allUnits", "keywords", ClearBit(1*mGetVarByQV("allUnits", "keywords"), AMBUSH));</Command>
<Command>				}</Command>
<Command>				mSetVarByQV("allUnits", "victoryAmbush", 0);</Command>
<Command>			}</Command>
<Command>			if (HasKeyword(DECAY, 1*mGetVarByQV("allUnits", "keywords"))) {</Command>
<Command>				if (mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>					damageUnit(1*trQuestVarGet("allUnits"), 1);</Command>
<Command>				}</Command>
<Command>				damageUnit(1*trQuestVarGet("allUnits"), trQuestVarGet("mindflayerDamage"));</Command>
<Command>			}</Command>

<Command>			if (mGetVarByQV("allUnits", "proto") == kbGetProtoUnitID("Hero Chinese Immortal")){</Command>
<Command>				if(mGetVarByQV("allUnits", "player") == p){</Command>
<Command>					mSetVarByQV("allUnits", "range", 2);</Command>
<Command>				} else {</Command>
<Command>					mSetVarByQV("allUnits", "range", 1);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			if (1*mGetVarByQV("allUnits", "player") == p) {</Command>
<Command>				switch(1*mGetVarByQV("allUnits", "proto"))</Command>
<Command>				{</Command>
<Command>					case kbGetProtoUnitID("Guild"):</Command>
<Command>					{</Command>
<Command><![CDATA[						if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>							addCardToHand(p, kbGetProtoUnitID("Automaton SPC"));</Command>
<Command>						}</Command>
<Command>						damageUnit(1*trQuestVarGet("allUnits"), 2);</Command>
<Command>					}</Command>
<Command>					case kbGetProtoUnitID("Argus"):</Command>
<Command>					{</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*trQuestVarGet("allUnits"));</Command>
<Command>						trUnitOverrideAnimation(40,0,false,true,-1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		mSetVarByQV("p"+p+"commander", "attack", mGetVarByQV("p"+p+"commander", "attack") - trQuestVarGet("p"+p+"yeebBonus"));</Command>
<Command>		trQuestVarSet("p"+p+"yeebbonus", 0);</Command>

<Command>		trQuestVarSet("sound", 0);</Command>
<Command>		for(x=yGetDatabaseCount("meteors"); >0) {</Command>
<Command>			yDatabaseNext("meteors", true);</Command>
<Command>			ySetVar("meteors", "time", yGetVar("meteors", "time") - 1);</Command>
<Command>			if (yGetVar("meteors", "time") == 0) {</Command>
<Command>				trQuestVarSet("sound", 1);</Command>
<Command>				trUnitChangeProtoUnit("Meteor");</Command>
<Command>				deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("meteors", "tile"));</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("meteors", "tile")));</Command>
<Command>				for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command>					if (mGetVarByQV("allUnits", "tile") == yGetVar("meteors", "tile")) {</Command>
<Command>						damageUnit(1*trQuestVarGet("allUnits"), 6 + trQuestVarGet("p"+(3-p)+"spellDamage"));</Command>
<Command><![CDATA[					} else if (trDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit(1*trQuestVarGet("allUnits"), 2 + trQuestVarGet("p"+(3-p)+"spellDamage"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				yRemoveFromDatabase("meteors");</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if (trQuestVarGet("sound") == 1) {</Command>
<Command>			trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("meteordustcloud.wav","1",-1,"","");</Command>
<Command>		}</Command>

<Command>		removeDeadUnits();</Command>

<Command>		// Discard fleeting cards</Command>
<Command>		bool fleeting = false;</Command>
<Command>		int type = 0;</Command>
<Command>		for (x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"hand");</Command>
<Command>			if (HasKeyword(FLEETING, 1*mGetVarByQV("p"+p+"hand", "keywords"))) {</Command>
<Command>				trVectorSetUnitPos("pos", "p"+p+"hand");</Command>
<Command>				fleeting = true;</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("p"+p+"hand"), true);</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>				trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("pos"),0,trVectorQuestVarGetZ("pos"),0, true);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trArmySelect("1,10");</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				if (mGetVarByQV("p"+p+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					type = mGetVarByQV("p"+p+"hand", "proto");</Command>
<Command>					ChatLog(p, "Discarded " + trStringQuestVarGet("card_" + type + "_name"));</Command>
<Command>				} else {</Command>
<Command>					type = mGetVarByQV("p"+p+"hand", "spell");</Command>
<Command>					ChatLog(p, "Discarded " + trStringQuestVarGet("spell_" + type + "_name"));</Command>
<Command>				}</Command>
<Command>				zSetVarByIndex("p"+p+"handPos", "occupied", 1*yGetVar("p"+p+"hand", "pos"), 0);</Command>
<Command>				yRemoveFromDatabase("p"+p+"hand");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command><![CDATA[		if (fleeting && trCurrentPlayer() == p) {]]></Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		trDelayedRuleActivation("turn_00_start");</Command>
<Command>		xsDisableRule("turn_02_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule match_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (Multiplayer) {</Command>
<Command>		// multiplayer stuff</Command>
<Command>	} else {</Command>
<Command>		xsEnableRule("MissionEnd");</Command>
<Command>	}</Command>
<Command>	xsDisableSelf();</Command>
<Command>}</Command>
<Command>void AddToCustomBoard(int tile = 0, int terrain = 0, string proto = "", int count = 1, int heading = 45, int scale = 1){</Command>
<Command>	yAddToDatabase("customBoard", "thisDoesNotMatterRight");</Command>
<Command>	yAddUpdateVar("customBoard", "tile", tile);</Command>
<Command>	yAddUpdateVar("customBoard", "terrain", terrain);</Command>
<Command>	yAddUpdateVar("customBoard", "proto", kbGetProtoUnitID(proto));</Command>
<Command>	yAddUpdateVar("customBoard", "count", count);</Command>
<Command>	yAddUpdateVar("customBoard", "heading", heading);</Command>
<Command>	yAddUpdateVar("customBoard", "scale", scale);</Command>
<Command>}</Command>

<Command>int SummonLaser(int tile = 0, int target = 0) {</Command>
<Command>	int siphon = summonAtTile(tile, 2, kbGetProtoUnitID("Fire Siphon"));</Command>
<Command>	trVectorQuestVarSet("start", kbGetBlockPosition(""+tile));</Command>
<Command>	trVectorQuestVarSet("end", kbGetBlockPosition(""+target));</Command>
<Command>	trVectorQuestVarSet("dir", trGetUnitVector("start", "end"));</Command>
<Command>	mSetVar(siphon, "laserDirx", trVectorQuestVarGetX("dir") * 100000);</Command>
<Command>	mSetVar(siphon, "laserDirz", trVectorQuestVarGetZ("dir") * 100000);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+siphon);</Command>
<Command>	trSetUnitOrientation(trVectorQuestVarGet("dir"), xsVectorSet(0,1,0), true);</Command>
<Command>	return(siphon);</Command>
<Command>}</Command>

<Command>void SetupMission(int class = 0, int mission = 0){</Command>
<Command>	yClearDatabase("p2deck");</Command>
<Command>	yClearDatabase("customBoard");</Command>
<Command>	trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_GRASSLAND);</Command>
<Command>	trQuestVarSet("customTerrainEmpty", 0);</Command>
<Command>	trQuestVarSet("customTerrainEmptyNot", 0);</Command>
<Command>	InitBot(BOT_PERSONALITY_DEFAULT);</Command>
<Command>	trQuestVarSet("dungeonMode", 0);</Command>
<Command>	trQuestVarSet("p2class1", class);</Command>
<Command>	switch(class)</Command>
<Command>	{</Command>
<Command>		case -1:</Command>
<Command>		{</Command>
<Command>			// Tutorial</Command>
<Command>			trPaintTerrain(0, 0, 60, 60, 0, T_EGYPTIAN_ROAD, false);</Command>
<Command>			trQuestVarSet("dimension", 5);</Command>
<Command>			trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>			trQuestVarSet("customTerrainEmpty", T_GRASS_25);</Command>
<Command>			trQuestVarSet("customTerrainEmptyNot", T_FOREST_PALM);</Command>
<Command>			AddToCustomBoard(150, TILE_IMPASSABLE, "Crate", 3);</Command>
<Command>			AddToCustomBoard(151, TILE_IMPASSABLE, "Crate", 3);</Command>
<Command>			AddToCustomBoard(136, TILE_IMPASSABLE, "Crate", 3);</Command>
<Command>			AddToCustomBoard(137, TILE_IMPASSABLE, "Crate", 3);</Command>
<Command>			AddToCustomBoard(129, TILE_IMPASSABLE, "Crate", 3);</Command>

<Command>			AddToCustomBoard(223, TILE_EMPTY, "Wood Pile 1", 1, 105, 2);</Command>
<Command>			AddToCustomBoard(225, TILE_EMPTY, "Wood Pile 2", 1, 165, 2);</Command>
<Command>			AddToCustomBoard(229, TILE_EMPTY, "Wood Pile 3", 1, 225, 2);</Command>
<Command>			AddToCustomBoard(230, TILE_EMPTY, "Wood Pile 3", 1, 285, 2);</Command>
<Command>			AddToCustomBoard(234, TILE_EMPTY, "Wood Pile 2", 1, 345, 2);</Command>
<Command>			AddToCustomBoard(238, TILE_EMPTY, "Wood Pile 1", 1, 345, 2);</Command>
<Command>			AddToCustomBoard(240, TILE_EMPTY, "Wood Pile 1", 1, 285, 2);</Command>
<Command>			AddToCustomBoard(246, TILE_EMPTY, "Wood Pile 2", 1, 225, 2);</Command>
<Command>			AddToCustomBoard(250, TILE_EMPTY, "Wood Pile 3", 1, 165, 2);</Command>
<Command>			AddToCustomBoard(254, TILE_EMPTY, "Wood Pile 3", 1, 105, 2);</Command>
<Command>			InitBot(BOT_PERSONALITY_TRAINING);</Command>
<Command>			trQuestVarSet("p2commanderType", kbGetProtoUnitID("Automaton"));</Command>
<Command><![CDATA[			for(x=0;<40){]]></Command>
<Command>				addCardToDeck(2, "Swordsman");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_ADVENTURER:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", T_GRASS_50);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_FOREST_PINE);</Command>
<Command>					//First Berry Bush</Command>
<Command>					AddToCustomBoard(171, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(164, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(169, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(151, TILE_OCCUPIED, "Berry Bush", 1, 47, 2);</Command>
<Command>					AddToCustomBoard(146, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(149, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(137, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					//Second Berry Bush</Command>
<Command>					AddToCustomBoard(152, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(170, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(168, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(150, TILE_OCCUPIED, "Berry Bush", 1, 69, 2);</Command>
<Command>					AddToCustomBoard(138, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(136, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(148, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					//Third Berry Bush</Command>
<Command>					AddToCustomBoard(161, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(183, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(144, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(160, TILE_OCCUPIED, "Berry Bush", 1, 69, 2);</Command>
<Command>					AddToCustomBoard(182, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(143, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(159, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					//Fourth Berry Bush</Command>
<Command>					AddToCustomBoard(141, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(157, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(140, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(156, TILE_OCCUPIED, "Berry Bush", 1, 47, 2);</Command>
<Command>					AddToCustomBoard(178, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(155, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					AddToCustomBoard(177, TILE_IMPASSABLE, "Berry Bush", 3);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Bear"));</Command>
<Command><![CDATA[					for(x=0;<40){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_INTIMIDATE);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_GRASSLAND);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("General Melagius"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Swordsman");</Command>
<Command>						addCardToDeck(2, "Bondi");</Command>
<Command>						addCardToDeck(2, "Toxotes");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<4){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_DEFENDER);</Command>
<Command>						addCardToDeck(2, "Trident Soldier");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "Huskarl");</Command>
<Command>						addCardToDeck(2, "Hero Greek Ajax");</Command>
<Command>						addCardToDeck(2, "", SPELL_PARTY_UP);</Command>
<Command>						addCardToDeck(2, "", SPELL_DUEL);</Command>
<Command>						addCardToDeck(2, "", SPELL_VICTORY);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_GRASSLAND);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Qilin"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Wolf");</Command>
<Command>						addCardToDeck(2, "Apep");</Command>
<Command>						addCardToDeck(2, "Bear");</Command>
<Command>						addCardToDeck(2, "Hetairoi");</Command>
<Command>						addCardToDeck(2, "Hero Greek Theseus");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<4){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_SING);</Command>
<Command>						addCardToDeck(2, "", SPELL_GUARDIAN_OF_SEA);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "Hero Chinese Immortal");</Command>
<Command>					addCardToDeck(2, "Hero Greek Hippolyta");</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 59, false);</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", 63);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", 94);</Command>
<Command>					AddToCustomBoard(268, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(230, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(198, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(172, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(152, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(138, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(130, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(128, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(133, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(144, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(161, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(184, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(213, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(248, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(289, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(266, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(228, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(196, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(170, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(150, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(136, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(129, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(134, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(145, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(162, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(185, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(214, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(249, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(290, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(269, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(231, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(199, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(173, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(153, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(139, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(131, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(132, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(143, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(160, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(183, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(212, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(247, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(288, TILE_IMPASSABLE, "Bush Short", 4);</Command>

<Command>					AddToCustomBoard(150, TILE_OCCUPIED, "Dock", 1, 45, 1);</Command>
<Command>					summonAtTile(152, 2, kbGetProtoUnitID("Pirate Ship"));</Command>

<Command>					AddToCustomBoard(195, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(151, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(141, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(237, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(221, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(174, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>
<Command>					AddToCustomBoard(137, TILE_EMPTY, "Rock Limestone Sprite", 5);</Command>

<Command>					AddToCustomBoard(142, TILE_OCCUPIED, "Marsh Tree", 1, 47, 2);</Command>
<Command>					AddToCustomBoard(158, TILE_OCCUPIED, "Marsh Tree", 1, 69, 2);</Command>
<Command>					AddToCustomBoard(181, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(180, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(210, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(209, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(205, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(239, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(238, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(204, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(229, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(227, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(195, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(197, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(220, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(190, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(224, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(192, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(175, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(155, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(176, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(177, TILE_IMPASSABLE, "Bush Short", 4);</Command>
<Command>					AddToCustomBoard(220, TILE_OCCUPIED, "Marsh Tree", 1, 42, 2);</Command>
<Command>					AddToCustomBoard(200, TILE_OCCUPIED, "Marsh Tree", 1, 47, 2);</Command>

<Command>					AddToCustomBoard(253, TILE_OCCUPIED, "Wood Pile 1", 1, 225, 1);</Command>
<Command>					AddToCustomBoard(187, TILE_OCCUPIED, "Wood Pile 1", 1, 225, 1);</Command>
<Command>					AddToCustomBoard(217, TILE_OCCUPIED, "Tent", 1, 225, 1);</Command>
<Command>					AddToCustomBoard(252, TILE_OCCUPIED, "Campfire", 1, 45, 2);</Command>
<Command>					summonAtTile(218, 2, kbGetProtoUnitID("Khopesh"));</Command>
<Command>					summonAtTile(216, 2, kbGetProtoUnitID("Khopesh"));</Command>

<Command><![CDATA[					for(x=255;<297){]]></Command>
<Command>						if(x != 282){</Command>
<Command>							trQuestVarSetFromRand("temp", 0, 360, true);</Command>
<Command>							AddToCustomBoard(x, TILE_OCCUPIED, "Marsh Tree", 1, trQuestVarGet("temp"), 2);</Command>
<Command>						}</Command>
<Command>					}</Command>

<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Shaba Ka"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Bondi");</Command>
<Command>						addCardToDeck(2, "Khopesh");</Command>
<Command>						addCardToDeck(2, "Avenger");</Command>
<Command>						addCardToDeck(2, "Raiding Cavalry");</Command>
<Command>						addCardToDeck(2, "Jarl");</Command>
<Command>						addCardToDeck(2, "", SPELL_BACKSTAB);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<2){]]></Command>
<Command>						addCardToDeck(2, "Pirate Ship");</Command>
<Command>						addCardToDeck(2, "", SPELL_PISTOL_SHOT);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 8, false);</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_GRASSLAND);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Audrey"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "Audrey Water");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "Wolf");</Command>
<Command>						addCardToDeck(2, "Apep");</Command>
<Command>						addCardToDeck(2, "Bear");</Command>
<Command>						addCardToDeck(2, "", SPELL_POISON_CLOUD);</Command>
<Command>						addCardToDeck(2, "", SPELL_NATURE_ANGRY);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 11, false);</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", 8);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", 90);</Command>
<Command>					AddToCustomBoard(128, TILE_OCCUPIED, "Gaia Pool", 1, 0, 1);</Command>
<Command><![CDATA[					for(x=129;<135){]]></Command>
<Command>						AddToCustomBoard(x, TILE_OCCUPIED, "Parrot", 1, 0, 2);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=255;<297){]]></Command>
<Command>						if(x != 282){</Command>
<Command>							trQuestVarSetFromRand("temp", 0, 360, true);</Command>
<Command>							AddToCustomBoard(x, TILE_OCCUPIED, "Gaia Forest Tree", 1, trQuestVarGet("temp"), 2);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Qilin"));</Command>
<Command><![CDATA[					for(x=0;<5){]]></Command>
<Command>						addCardToDeck(2, "Wolf");</Command>
<Command>						addCardToDeck(2, "Ornlu");</Command>
<Command>						addCardToDeck(2, "Apep");</Command>
<Command>						addCardToDeck(2, "Bear");</Command>
<Command>						addCardToDeck(2, "Hetairoi");</Command>
<Command>						addCardToDeck(2, "Hero Greek Theseus");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<4){]]></Command>
<Command>						addCardToDeck(2, "Hero Greek Hippolyta");</Command>
<Command>						addCardToDeck(2, "Hero Chinese Immortal");</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "", SPELL_ELVEN_APOCALYPSE);</Command>
<Command>					addCardToDeck(2, "", SPELL_ELVEN_APOCALYPSE);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_ARCANE:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, T_GREEK_CLIFF_B, false);</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", T_GRASS_75);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_GREEK_ROAD);</Command>
<Command>					AddToCustomBoard(136, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(137, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(140, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(144, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(142, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(210, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					AddToCustomBoard(206, TILE_IMPASSABLE, "Columns Broken", 3);</Command>
<Command>					//Left Column Row</Command>
<Command>					AddToCustomBoard(188, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					AddToCustomBoard(186, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					AddToCustomBoard(184, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					//Right Column Row</Command>
<Command>					AddToCustomBoard(176, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					AddToCustomBoard(174, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					AddToCustomBoard(172, TILE_OCCUPIED, "Columns", 1, 45, 2);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Golem"));</Command>
<Command><![CDATA[					for(x=0;<40){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_GROUND_STOMP);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_TOWER);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Pharaoh Secondary"));</Command>
<Command><![CDATA[					for(x=0;<5){]]></Command>
<Command>						addCardToDeck(2, "Slinger");</Command>
<Command>						addCardToDeck(2, "Monument");</Command>
<Command>						addCardToDeck(2, "Oracle Scout");</Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_EXPLOSION);</Command>
<Command>						addCardToDeck(2, "", SPELL_PYROBALL);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<2){]]></Command>
<Command>						addCardToDeck(2, "Slinger");</Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_METEOR);</Command>
<Command>						addCardToDeck(2, "", SPELL_ELECTROSURGE);</Command>
<Command>						addCardToDeck(2, "", SPELL_APOCALYPSE);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_TOWER);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("King Folstag"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Maceman");</Command>
<Command>						addCardToDeck(2, "Monument");</Command>
<Command>						addCardToDeck(2, "Monument 2");</Command>
<Command>						addCardToDeck(2, "Monument 3");</Command>
<Command>						addCardToDeck(2, "", SPELL_RUNE_OF_ICE);</Command>
<Command>						addCardToDeck(2, "", SPELL_FROST_BREATH);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "Griffon");</Command>
<Command>					addCardToDeck(2, "Trident Soldier Hero");</Command>
<Command>					addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>					addCardToDeck(2, "", SPELL_ELECTROSURGE);</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 2);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Boar"));</Command>
<Command><![CDATA[					for(x=0;<4){]]></Command>
<Command>						addCardToDeck(2, "Maceman");</Command>
<Command>						addCardToDeck(2, "Centaur");</Command>
<Command>						addCardToDeck(2, "Griffon");</Command>
<Command>						addCardToDeck(2, "Golem");</Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_BACKSTAB);</Command>
<Command>						addCardToDeck(2, "", SPELL_FINAL_EXAM);</Command>
<Command>						addCardToDeck(2, "", SPELL_PYROBALL);</Command>
<Command>						addCardToDeck(2, "", SPELL_METEOR);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "Trident Soldier Hero");</Command>
<Command>					addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>					addCardToDeck(2, "", SPELL_ELECTROSURGE);</Command>
<Command>					addCardToDeck(2, "", SPELL_APOCALYPSE);</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 1, false);</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_TOWER);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Setna"));</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "Maceman");</Command>
<Command>						addCardToDeck(2, "Slinger");</Command>
<Command>						addCardToDeck(2, "Oracle Scout");</Command>
<Command>						addCardToDeck(2, "Griffon");</Command>
<Command>						addCardToDeck(2, "Golem");</Command>
<Command>						addCardToDeck(2, "Monument");</Command>
<Command>						addCardToDeck(2, "Monument 2");</Command>
<Command>						addCardToDeck(2, "Monument 3");</Command>
<Command>						addCardToDeck(2, "Monument 4");</Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>						addCardToDeck(2, "", SPELL_MIRROR_REFLECTION);</Command>
<Command>						addCardToDeck(2, "", SPELL_PYROBALL);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "Monument 5");</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 0, 50, false);</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command><![CDATA[					for(x=255;<297){]]></Command>
<Command>						AddToCustomBoard(x, TILE_OCCUPIED, "Mist", 1, 0, 1);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Circe"));</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "Maceman");</Command>
<Command>						addCardToDeck(2, "Slinger");</Command>
<Command>						addCardToDeck(2, "Oracle Scout");</Command>
<Command>						addCardToDeck(2, "Griffon");</Command>
<Command>						addCardToDeck(2, "Golem");</Command>
<Command>						addCardToDeck(2, "Monument");</Command>
<Command>						addCardToDeck(2, "Monument 2");</Command>
<Command>						addCardToDeck(2, "Monument 3");</Command>
<Command>						addCardToDeck(2, "Monument 4");</Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>						addCardToDeck(2, "", SPELL_MIRROR_REFLECTION);</Command>
<Command>						addCardToDeck(2, "", SPELL_PYROBALL);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "Monument 5");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_NAGA:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Scylla"));</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 5, 2, false); // ice c</Command>
<Command><![CDATA[					for(x=0;<4) {]]></Command>
<Command>						addCardToDeck(2, "Wadjet");</Command>
<Command>						addCardToDeck(2, "Jormund Elver");</Command>
<Command>						addCardToDeck(2, "Medusa");</Command>
<Command>						addCardToDeck(2, "Cyclops");</Command>
<Command>						addCardToDeck(2, "", SPELL_SEA_EMBRACE);</Command>
<Command>						addCardToDeck(2, "Nereid");</Command>
<Command>						addCardToDeck(2, "Hydra");</Command>
<Command>						addCardToDeck(2, "", SPELL_TELETIDE);</Command>
<Command>						addCardToDeck(2, "", SPELL_WRATH_OF_SEA);</Command>
<Command>						addCardToDeck(2, "", SPELL_DROWN);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 3);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Man O War"));</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 5, 2, false); // ice c</Command>
<Command><![CDATA[					for(x=0;<20) {]]></Command>
<Command>						addCardToDeck(2, "Man O War");</Command>
<Command>						addCardToDeck(2, "", SPELL_ELECTROSURGE);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_ATLANTIS);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Polyphemus"));</Command>
<Command><![CDATA[					for(x=0;<4) {]]></Command>
<Command>						addCardToDeck(2, "Wadjet");</Command>
<Command>						addCardToDeck(2, "Hippikon");</Command>
<Command>						addCardToDeck(2, "", SPELL_TELETIDE);</Command>
<Command>						addCardToDeck(2, "Medusa");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<4) {]]></Command>
<Command>						addCardToDeck(2, "Man O War");</Command>
<Command>						addCardToDeck(2, "", SPELL_SEA_EMBRACE);</Command>
<Command>						addCardToDeck(2, "Leviathan");</Command>
<Command>						addCardToDeck(2, "Hydra");</Command>
<Command>						addCardToDeck(2, "Sea Turtle");</Command>
<Command>						addCardToDeck(2, "", SPELL_DROWN);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 5);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_ATLANTIS);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Kraken"));</Command>
<Command><![CDATA[					for(x=0;<10) {]]></Command>
<Command>						addCardToDeck(2, "Wadjet");</Command>
<Command>						addCardToDeck(2, "Medusa");</Command>
<Command>						addCardToDeck(2, "Jormund Elver");</Command>
<Command>						addCardToDeck(2, "", SPELL_KRAKEN_HUG);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_ATLANTIS);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Servant"));</Command>
<Command><![CDATA[					for(x=0;<10) {]]></Command>
<Command>						addCardToDeck(2, "Servant");</Command>
<Command>						addCardToDeck(2, "", SPELL_WATER_CANNON);</Command>
<Command>						addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<2) {]]></Command>
<Command>						addCardToDeck(2, "Nereid");</Command>
<Command>						addCardToDeck(2, "", SPELL_TIDAL_WAVE);</Command>
<Command>						addCardToDeck(2, "", SPELL_FLUSH);</Command>
<Command>						addCardToDeck(2, "", SPELL_DEEP_DIVE);</Command>
<Command>						addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 0, 72, false); // atlantis coral</Command>
<Command>					trQuestVarSet("p1commanderType", COMMANDER_REACH);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>					AddToCustomBoard(284, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(243, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(208, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(207, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(206, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(205, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(204, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(203, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(202, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(201, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(200, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(199, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(198, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(196, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(194, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(168, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(148, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(135, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(258, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(220, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(189, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(191, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(193, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(195, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(197, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(218, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(217, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(216, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(215, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(214, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(213, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(212, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(211, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(182, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(159, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command>					AddToCustomBoard(142, TILE_OCCUPIED, "Wall Connector", 1, 0, 2);</Command>
<Command><![CDATA[					for(x=0;<40) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_NICKS_PORTAL);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<20) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_SPARK);</Command>
<Command>						addCardToDeck(2, "", SPELL_METEOR);</Command>
<Command>						addCardToDeck(2, "", SPELL_EXPLOSION);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<10) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_ZENOS_PARADOX);</Command>
<Command>						addCardToDeck(2, "", SPELL_DEATH_APPROACHES);</Command>
<Command>						addCardToDeck(2, "", SPELL_TIME_POCKET);</Command>
<Command>						addCardToDeck(2, "", SPELL_WORLD_SPLITTER);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_CLOCKWORK:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_SCRAPYARD);</Command>
<Command>					trQuestVarSet("p2commanderType", COMMANDER_ROXAS);</Command>
<Command><![CDATA[					for(x=0;<6) {]]></Command>
<Command>						addCardToDeck(2, "Automaton SPC");</Command>
<Command>						addCardToDeck(2, "Dwarf");</Command>
<Command>						addCardToDeck(2, "Throwing Axeman");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3) {]]></Command>
<Command>						addCardToDeck(2, "Battle Boar");</Command>
<Command>						addCardToDeck(2, "", SPELL_REWIND);</Command>
<Command>						addCardToDeck(2, "Ballista");</Command>
<Command>						addCardToDeck(2, "Colossus");</Command>
<Command>						addCardToDeck(2, "Petrobolos");</Command>
<Command>						addCardToDeck(2, "", SPELL_GEAR_FACTORY);</Command>
<Command>						addCardToDeck(2, "", SPELL_PORTABLE_SPELL_SHIELD);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "", SPELL_POWER_SUIT);</Command>
<Command>					trQuestVarSet("p2class2", CLASS_CLOCKWORK);</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("storyMissionBotMana", 0);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 5, 3, false); // mining ground</Command>
<Command>					trQuestVarSet("customTerrainEmpty", T_SAND_D);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_EGYPTIAN_ROAD);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>					AddToCustomBoard(157, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(158, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(159, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>

<Command>					AddToCustomBoard(153, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(152, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(150, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>

<Command>					AddToCustomBoard(164, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(163, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>
<Command>					AddToCustomBoard(151, TILE_OCCUPIED, "Destroyed Buildings Small", 1);</Command>

<Command>					summonAtTile(142, 1, kbGetProtoUnitID("Onager"));</Command>
<Command>					summonAtTile(138, 1, kbGetProtoUnitID("Onager"));</Command>
<Command>					summonAtTile(146, 1, kbGetProtoUnitID("Onager"));</Command>
<Command>					summonAtTile(130, 1, kbGetProtoUnitID("Throwing Axeman"));</Command>
<Command>					summonAtTile(134, 1, kbGetProtoUnitID("Priest"));</Command>

<Command>					zSetVarByIndex("tiles", "occupant", 282, 0);</Command>
<Command>					zSetVarByIndex("tiles", "occupant", 219, 0);</Command>
<Command>					trQuestVarSet("objectiveObelisk", summonAtTile(128, 1, kbGetProtoUnitID("Outpost")));</Command>
<Command>					mSetVarByQV("objectiveObelisk", "health", 10);</Command>
<Command>					mSetVarByQV("objectiveObelisk", "spell", SPELL_COMMANDER);</Command>
<Command><![CDATA[					for(x=0; <6) {]]></Command>
<Command>						addCardToDeck(2, "Crossbowman");</Command>
<Command>						addCardToDeck(2, "", SPELL_WARNING_SHOT);</Command>
<Command>						addCardToDeck(2, "", SPELL_DOUBLEBLAST);</Command>
<Command>						addCardToDeck(2, "", SPELL_PORTABLE_SPELL_SHIELD);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("dungeonMode", 1);</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 2, 13, false); // black rock</Command>
<Command>					InitBot(BOT_PERSONALITY_TRAINING);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", 0);</Command>
<Command>					trQuestVarSet("customTerrainEmptySpecial", T_BLUE_TILE);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_BLUE_TILE);</Command>

<Command>					mSetVar(SummonLaser(181, 180), "attack", 5);</Command>
<Command>					AddToCustomBoard(208, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(207, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(206, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					mSetVar(SummonLaser(216, 186), "attack", 5);</Command>
<Command>					AddToCustomBoard(178, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(156, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(157, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(158, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(142, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(132, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(143, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(160, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(212, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					for(x=188; >=183) {</Command>
<Command>						AddToCustomBoard(x, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					}</Command>
<Command>					mSetVar(SummonLaser(212, 184), "attack", 5);</Command>
<Command>					mSetVar(SummonLaser(145, 163), "attack", 5);</Command>
<Command>					AddToCustomBoard(171, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(169, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(167, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(147, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(150, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(148, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(152, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(173, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					AddToCustomBoard(200, TILE_EMPTY, "Cinematic Block", 0);</Command>
<Command>					mSetVar(SummonLaser(137, 151), "attack", 5);</Command>
<Command>					mSetVar(SummonLaser(135, 149), "attack", 5);</Command>

<Command>					mSetVar(SummonLaser(130, 136), "attack", 5);</Command>
<Command>					mSetVar(SummonLaser(139, 138), "attack", 5);</Command>
<Command>					mSetVar(SummonLaser(154, 153), "attack", 5);</Command>
<Command>					mSetVar(SummonLaser(175, 174), "attack", 5);</Command>

<Command>					summonAtTile(193, 2, kbGetProtoUnitID("Servant"));</Command>
<Command>					deployAtTile(0, "Garrison Flag Sky Passage", 200);</Command>
<Command>					trQuestVarSet("p1commanderType", COMMANDER_ROGERS);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Invisible Target"));</Command>
<Command>					yClearDatabase("p1deck");</Command>
<Command>					for(x=40; >0) {</Command>
<Command>						addCardToDeck(1, "", SPELL_SCRAP_METAL);</Command>
<Command>						addCardToDeck(2, "", SPELL_SCRAP_METAL);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_TOWER);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Eitri"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Helepolis");</Command>
<Command>						addCardToDeck(2, "", SPELL_MIRROR_IMAGE);</Command>
<Command>						addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0; <3) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_ASSEMBLY_LINE);</Command>
<Command>						addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>						addCardToDeck(2, "Javelin Cavalry");</Command>
<Command>						addCardToDeck(2, "Chieroballista");</Command>
<Command>						addCardToDeck(2, "Tower Mirror");</Command>
<Command>						addCardToDeck(2, "", SPELL_WARNING_SHOT);</Command>
<Command>						addCardToDeck(2, "", SPELL_DOUBLEBLAST);</Command>
<Command>					}</Command>

<Command>					SummonLaser(218, 217);</Command>
<Command>					SummonLaser(195, 171);</Command>
<Command>					SummonLaser(191, 167);</Command>
<Command>					SummonLaser(190, 166);</Command>
<Command>					SummonLaser(194, 170);</Command>
<Command>					SummonLaser(198, 199);</Command>
<Command>					trQuestVarSet("p2class2", CLASS_ARCANE);</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 3);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>					trPaintTerrain(0, 0, 59, 59, 2, 13, false); // black rock</Command>
<Command>					InitBot(BOT_PERSONALITY_TRAINING);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", T_BLUE_TILE);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_BLUE_TILE);</Command>
<Command>					trQuestVarSet("p1commanderType", COMMANDER_ROGERS);</Command>
<Command>					yClearDatabase("p1deck");</Command>
<Command>					for(x=40; >0) {</Command>
<Command>						addCardToDeck(1, "", SPELL_BORROWED_TIME);</Command>
<Command>						addCardToDeck(2, "Monkey");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_HEAVEN);</Command>
<Command>					trQuestVarSet("p2commanderType", COMMANDER_YEEBAAGOOON);</Command>
<Command><![CDATA[					for(x=0;<6) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>						addCardToDeck(2, "Eitri");</Command>
<Command>						addCardToDeck(2, "", SPELL_CLASS_TIME);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3) {]]></Command>
<Command>						addCardToDeck(2, "", SPELL_WARNING_SHOT);</Command>
<Command>						addCardToDeck(2, "Javelin Cavalry");</Command>
<Command>						addCardToDeck(2, "", SPELL_BANHAMMER);</Command>
<Command>						addCardToDeck(2, "Crossbowman");</Command>
<Command>						addCardToDeck(2, "Maceman Hero");</Command>
<Command>						addCardToDeck(2, "Chieroballista");</Command>
<Command>						addCardToDeck(2, "Portable Ram");</Command>
<Command>						addCardToDeck(2, "Prisoner");</Command>
<Command>						addCardToDeck(2, "Priest");</Command>
<Command>					}</Command>

<Command>					summonAtTile(190, 2, kbGetProtoUnitID("Eitri"));</Command>
<Command>					summonAtTile(191, 2, kbGetProtoUnitID("Eitri"));</Command>
<Command>					trQuestVarSet("p2class2", CLASS_ARCANE);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_EVIL:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 5);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_MARSH);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command><![CDATA[					for(x=0;<8){]]></Command>
<Command>						addCardToDeck(2, "Walking Woods Marsh");</Command>
<Command>						addCardToDeck(2, "Dryad");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<5){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_FINAL_FRENZY);</Command>
<Command>						addCardToDeck(2, "", SPELL_DEATH_APPROACHES);</Command>
<Command>						addCardToDeck(2, "Mummy");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "Shade");</Command>
<Command>						addCardToDeck(2, "", SPELL_DUEL);</Command>
<Command>						addCardToDeck(2, "", SPELL_DEFENDER);</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_ADVENTURER);</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_CAVE);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Einheriar"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_SOUL_SIPHON);</Command>
<Command>						addCardToDeck(2, "", SPELL_RUNE_OF_DARKNESS);</Command>
<Command>						addCardToDeck(2, "Prodromos");</Command>
<Command>						addCardToDeck(2, "Spearman");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<9){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_SPIDER_LAIR);</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_POISON_CLOUD);</Command>
<Command>						addCardToDeck(2, "", SPELL_BLOOD_PRICE);</Command>
<Command>						addCardToDeck(2, "Argus");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_EVIL);</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 7);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_MARSH);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Achilles"));</Command>
<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Bogsveigir");</Command>
<Command>						addCardToDeck(2, "Dryad");</Command>
<Command>						addCardToDeck(2, "Manticore");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<3){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_DOOM);</Command>
<Command>						addCardToDeck(2, "", SPELL_METEOR);</Command>
<Command>						addCardToDeck(2, "Argus");</Command>
<Command>						addCardToDeck(2, "", SPELL_EXPLOSION);</Command>
<Command>						addCardToDeck(2, "", SPELL_DEATH_APPROACHES);</Command>
<Command>						addCardToDeck(2, "Mummy");</Command>
<Command>						addCardToDeck(2, "Walking Woods Marsh");</Command>
<Command>						addCardToDeck(2, "Theris");</Command>
<Command>						addCardToDeck(2, "Tartarian Gate");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class2", CLASS_ARCANE);</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 2, 2, false);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("customTerrainEmpty", T_SAND_D);</Command>
<Command>					trQuestVarSet("customTerrainEmptyNot", T_HADES_FOREST);</Command>
<Command>					AddToCustomBoard(285, TILE_OCCUPIED, "Bolder Rolling Small", 1);</Command>
<Command>					AddToCustomBoard(244, TILE_OCCUPIED, "Bolder Rolling Small", 1);</Command>
<Command>					AddToCustomBoard(209, TILE_OCCUPIED, "Bolder Rolling Small", 1);</Command>
<Command>					for (x=180; >= 165) {</Command>
<Command>						AddToCustomBoard(x, TILE_OCCUPIED, "Bolder Rolling Small", 1);</Command>
<Command>					}</Command>
<Command>					for (x=188; >= 183) {</Command>
<Command>						AddToCustomBoard(x, TILE_OCCUPIED, "Bolder Rolling Small", 1);</Command>
<Command>					}</Command>

<Command>					summonAtTile(236, 2, kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command>					summonAtTile(219, 2, kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command>					summonAtTile(248, 2, kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Invisible Target"));</Command>

<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Fire Giant");</Command>
<Command>						addCardToDeck(2, "Walking Woods Marsh");</Command>
<Command>						addCardToDeck(2, "Dryad");</Command>
<Command>						addCardToDeck(2, "Argus");</Command>
<Command>						addCardToDeck(2, "Wadjet");</Command>
<Command>						addCardToDeck(2, "Pharaoh");</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0; <20) {]]></Command>
<Command>						addCardToDeck(2, "Anubite");</Command>
<Command>						addCardToDeck(2, "Minion");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p2class1", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_HEAVEN);</Command>
<Command>					trQuestVarSet("p2commanderType", COMMANDER_ZENOPHOBIA);</Command>

<Command>					summonAtTile(190, 2, kbGetProtoUnitID("Theris"));</Command>
<Command>					summonAtTile(191, 2, kbGetProtoUnitID("Theris"));</Command>


<Command><![CDATA[					for(x=0;<6){]]></Command>
<Command>						addCardToDeck(2, "Female");</Command>
<Command>						addCardToDeck(2, "Archer Atlantean");</Command>
<Command>					}</Command>

<Command><![CDATA[					for(x=0;<3) {]]></Command>
<Command>						addCardToDeck(2, "Theris");</Command>
<Command>						addCardToDeck(2, "Bireme");</Command>
<Command>						addCardToDeck(2, "Hippocampus");</Command>
<Command>						addCardToDeck(2, "Scylla");</Command>
<Command>						addCardToDeck(2, "Mummy");</Command>
<Command>						addCardToDeck(2, "Apep");</Command>
<Command>						addCardToDeck(2, "Sea Turtle");</Command>
<Command>						addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>						addCardToDeck(2, "", SPELL_WORLD_SPLITTER);</Command>
<Command>					}</Command>
<Command>					addCardToDeck(2, "", SPELL_TAVERN_BRAWL);</Command>
<Command>					addCardToDeck(2, "Hero Greek Achilles");</Command>
<Command>					trQuestVarSet("p2class2", CLASS_NAGA);</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trQuestVarSet("dimension", 6);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", TERRAIN_HEAVEN);</Command>
<Command>					trQuestVarCopy("p2commanderType", "p1commanderType");</Command>

<Command>					summonAtTile(190, 2, kbGetProtoUnitID("Bireme"));</Command>
<Command>					summonAtTile(191, 2, kbGetProtoUnitID("Bireme"));</Command>

<Command>					for(x=yGetDatabaseCount("p1deck"); >0) {</Command>
<Command>						yDatabaseNext("p1deck");</Command>
<Command>						yAddToDatabase("p2deck", "p1deck");</Command>
<Command>						yAddUpdateVar("p2deck", "spell", yGetVar("p1deck", "spell"));</Command>
<Command>						yAddUpdateVar("p2deck", "proto", yGetVar("p1deck", "proto"));</Command>
<Command>					}</Command>
<Command><![CDATA[					for(x=0;<6) {]]></Command>
<Command>						addCardToDeck(2, "Theris");</Command>
<Command>						addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>					}</Command>
<Command>					trQuestVarCopy("p2class1", "p1class1");</Command>
<Command>					trQuestVarCopy("p2class2", "p1class2");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case CLASS_SPACE:</Command>
<Command>		{</Command>
<Command>			switch(mission)</Command>
<Command>			{</Command>
<Command>				case 1:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "Swordsman");</Command>
<Command>						addCardToDeck(2, "Jarl");</Command>
<Command>						addCardToDeck(2, "Mountain Giant");</Command>
<Command>						addCardToDeck(2, "Hero Greek Hippolyta");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 2:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "Prisoner");</Command>
<Command>						addCardToDeck(2, "Fire Giant");</Command>
<Command>						addCardToDeck(2, "", SPELL_COPY_HOMEWORK);</Command>
<Command>						addCardToDeck(2, "Chimera");</Command>
<Command>						addCardToDeck(2, "Hero Greek Bellerophon");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 3:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_WATER_CANNON);</Command>
<Command>						addCardToDeck(2, "Kraken");</Command>
<Command>						addCardToDeck(2, "Hydra");</Command>
<Command>						addCardToDeck(2, "Scylla");</Command>
<Command>						addCardToDeck(2, "Sea Turtle");</Command>
<Command>						addCardToDeck(2, "Leviathan");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 4:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_REWIND);</Command>
<Command>						addCardToDeck(2, "", SPELL_SONG_OF_REST);</Command>
<Command>						addCardToDeck(2, "Automaton SPC");</Command>
<Command>						addCardToDeck(2, "Ballista");</Command>
<Command>						addCardToDeck(2, "Battle Boar");</Command>
<Command>						addCardToDeck(2, "Colossus");</Command>
<Command>						addCardToDeck(2, "Tower Mirror");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 5:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<80){]]></Command>
<Command>						addCardToDeck(2, "Guardian");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				case 6:</Command>
<Command>				{</Command>
<Command>					trPaintTerrain(0, 0, 60, 60, 5, 4, false); // Black</Command>
<Command>					trQuestVarSet("dimension", 8);</Command>
<Command>					trQuestVarSet("zenoMakeRandomStuffPlease", -1);</Command>
<Command>					trQuestVarSet("p2commanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command><![CDATA[					for(x=0;<10){]]></Command>
<Command>						addCardToDeck(2, "", SPELL_REFRESH_MANA);</Command>
<Command>						addCardToDeck(2, "", SPELL_PETTY_LASER);</Command>
<Command>						addCardToDeck(2, "", SPELL_NICKS_PORTAL);</Command>
<Command>						addCardToDeck(1, "", SPELL_SPACE_VENT);</Command>
<Command>						addCardToDeck(2, "Trireme");</Command>
<Command>						addCardToDeck(2, "Siege Ship Greek");</Command>
<Command>						addCardToDeck(2, "Siege Ship Atlantean");</Command>
<Command>						addCardToDeck(2, "Catapult");</Command>
<Command>						addCardToDeck(2, "Hero Greek Argo");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	shuffleDeck(2);</Command>
<Command>}</Command>

<Command>void CleanBoard(){</Command>
<Command>	xsDisableRule("gameplay_select_show_keywords");</Command>
<Command>	unitTransform("Shockwave stun effect", "Cinematic Block");</Command>
<Command>	unitTransform("UI Range Indicator Norse SFX", "Cinematic Block");</Command>
<Command>	unitTransform("Poison SFX", "Cinematic Block");</Command>
<Command>	unitTransform("Chaos effect", "Cinematic Block");</Command>
<Command>	unitTransform("Healing SFX", "Cinematic Block");</Command>
<Command>	unitTransform("Sky Passage", "Cinematic Block");</Command>
<Command>	trCounterAbort("counter");</Command>
<Command>	trCounterAbort("mana");</Command>
<Command>	trClearCounterDisplay();</Command>
<Command>	trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>	uiClearSelection();</Command>
<Command>	trQuestVarSet("apocalypse", 0);</Command>
<Command>	trQuestVarSet("maxMana", 0);</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		trCounterAbort("mana"+p);</Command>
<Command>		trCounterAbort("handAndDeck"+p);</Command>
<Command>		trQuestVarSet("p"+p+"mana", 0);</Command>
<Command>		trQuestVarSet("p"+p+"manaTax", 0);</Command>
<Command>		trQuestVarSet("p"+p+"manaflow", 0);</Command>
<Command>		trQuestVarSet("p"+p+"extraManaflow", 0);</Command>
<Command>		trQuestVarSet("p"+p+"spellDamageNonOracle", 0);</Command>
<Command>		trQuestVarSet("p"+p+"yeebbonus", 0);</Command>
<Command>		trQuestVarSet("p"+p+"roxasHealth", 0);</Command>
<Command>		trQuestVarSet("p"+p+"guardianOfTheSea", 0);</Command>
<Command>		for(x=zGetBankCount("p"+p+"handPos"); >0) {</Command>
<Command>			zBankNext("p"+p+"handPos");</Command>
<Command>			zSetVar("p"+p+"handPos", "occupied", 0);</Command>
<Command>		}</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"hand", true);</Command>
<Command>			mSetVarByQV("p"+p+"hand", "played", 0);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>		}</Command>
<Command>		yClearDatabase("p"+p+"hand");</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>	}</Command>
<Command>	yClearDatabase("customBoard");</Command>
<Command><![CDATA[	for(i=trQuestVarGet("idsEyecandyStart");<trQuestVarGet("idsEyecandyEnd")){]]></Command>
<Command>		trUnitSelectClear();trUnitSelect(""+i);</Command>
<Command>		trUnitDestroy();</Command>
<Command>	}</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command>		mSetVarByQV("allUnits", "played", 0);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>		tileGuard(1*mGetVarByQV("allUnits", "tile"), false);</Command>
<Command>		zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("allUnits", "tile"), 0);</Command>
<Command>	}</Command>
<Command>	yClearDatabase("allUnits");</Command>
<Command>}</Command>

<Command>rule MissionBegin</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 1){</Command>
<Command>		trSoundPlayFN("default","1",-1,"Loading:","icons\god power reverse time icons 64");</Command>
<Command>		trPlayerKillAllGodPowers(1);</Command>
<Command>		trTechGodPower(1, "animal magnetism", 1);</Command>
<Command>		trTechGodPower(1, "create gold", 1);</Command>
<Command>		trUIFadeToColor(0,0,0,1000,1000,false);</Command>
<Command>		trSetFogAndBlackmap(true, true);</Command>
<Command>		trOverlayTextColour(255, 255, 0);</Command>
<Command>		if(collectionMission == ""){</Command>
<Command>			trOverlayText("Tutorial", 4.7, 500, 200, 1000);</Command>
<Command>			xsEnableRule("StoryTutorial0");</Command>
<Command><![CDATA[			for(i = 0;<180){]]></Command>
<Command>				setCardCountDeck(i, 0);</Command>
<Command>				setCardCountCollection(i, 0);</Command>
<Command>			}</Command>
<Command><![CDATA[			for(i = 0;<6){]]></Command>
<Command>				setCardCountDeck(i, 3);</Command>
<Command>				setCardCountDeck(i + 30, 3);</Command>
<Command>			}</Command>
<Command>			setCardCountDeck(6, 2);</Command>
<Command>			setCardCountCollection(6, 3);</Command>
<Command>			setCardCountDeck(36, 2);</Command>
<Command>			setCardCountCollection(36, 3);</Command>
<Command>			setClassProgress(CLASS_ADVENTURER, 1);</Command>
<Command>			setClassProgress(CLASS_ARCANE, 1);</Command>
<Command>			setClassProgress(CLASS_NAGA, 0);</Command>
<Command>			setClassProgress(CLASS_CLOCKWORK, 0);</Command>
<Command>			setClassProgress(CLASS_EVIL, 0);</Command>
<Command>			setClassProgress(CLASS_SPACE, 0);</Command>
<Command>			setDeckCommander(0);</Command>
<Command>		} else {</Command>
<Command>			trOverlayText(collectionMission, 4.7, 500, 200, 1000);</Command>
<Command>			xsEnableRule("StoryClass" + 1*trQuestVarGet("missionClass") + "Mission" + 1*trQuestVarGet("missionSelection"));</Command>
<Command><![CDATA[			if(trQuestVarGet("missionClass") == 0 && trQuestVarGet("missionSelection") == 3){]]></Command>
<Command>				xsEnableRule("StoryClass0Mission3_");</Command>
<Command>			}</Command>
<Command>			xsEnableRule("SelectCommander");</Command>
<Command>		}</Command>
<Command>		yClearDatabase("p1deck");</Command>
<Command><![CDATA[		for(i=0;<180){]]></Command>
<Command><![CDATA[			for(x=0;<getCardCountDeck(i)){]]></Command>
<Command>				addCardToDeckByIndex(1, i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		shuffleDeck(1);</Command>

<Command>		SetupMission(trQuestVarGet("missionClass"), trQuestVarGet("missionSelection"));</Command>
<Command>		trQuestVarSet("missionComplete", 0);</Command>
<Command>		xsEnableRule("initializeBoard");</Command>
<Command>		xsDisableRule("MissionBegin");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool PlayerDefeated(int p = 1){</Command>
<Command>	return (trQuestVarGet("p"+p+"defeated") == 1);</Command>
<Command>}</Command>

<Command>rule MissionEnd</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>

<Command>	bool defeat = PlayerDefeated(1);</Command>
<Command>	bool victory = PlayerDefeated(2);</Command>
<Command><![CDATA[	if (defeat || victory){]]></Command>
<Command>		trPlayerKillAllGodPowers(1);</Command>
<Command>		trPlayerKillAllGodPowers(2);</Command>
<Command>		trUIFadeToColor(0,0,0,1000,1000,true);</Command>
<Command>		xsDisableRule("Bot1");</Command>
<Command>		xsDisableRule("gameplay_01_select");</Command>
<Command>		xsDisableRule("gameplay_02_work");</Command>
<Command>		xsDisableRule("gameplay_03_moveComplete");</Command>
<Command>		xsDisableRule("gameplay_04_attack");</Command>
<Command>		xsDisableRule("gameplay_05_attackComplete");</Command>
<Command>		xsDisableRule("gameplay_10_summon");</Command>
<Command>		xsDisableRule("MissionEnd");</Command>
<Command>		xsDisableRule("turn_00_start");</Command>
<Command>		xsDisableRule("turn_01_resolve_turn_start");</Command>
<Command>		xsDisableRule("turn_02_end");</Command>
<Command>		xsDisableRule("SelectCommander");</Command>
<Command>		for(x=zGetBankCount("tiles"); >0) {</Command>
<Command>			highlightTile(zBankNext("tiles"), 0.1);</Command>
<Command>		}</Command>
<Command><![CDATA[		if(defeat && victory){]]></Command>
<Command>			trOverlayTextColour(255, 255, 0);</Command>
<Command>			trOverlayText("~ TIE ~", 4.7, 500, 200, 1000);</Command>
<Command>			trSoundPlayFN("xlose.wav","1",-1,"","");</Command>
<Command>		} else if(defeat){</Command>
<Command>			trOverlayTextColour(255, 0, 0);</Command>
<Command>			trOverlayText("~ DEFEAT ~", 4.7, 500, 200, 1000);</Command>
<Command>			trSoundPlayFN("xlose.wav","1",-1,"","");</Command>
<Command>		} else {</Command>
<Command>			trOverlayTextColour(0, 0, 255);</Command>
<Command>			trOverlayText("~ VICTORY ~", 4.7, 500, 200, 1000);</Command>
<Command>			trSoundPlayFN("xwin.wav","1",-1,"","");</Command>
<Command>			trQuestVarSet("newCards", 1);</Command>
<Command>		}</Command>
<Command><![CDATA[		if(defeat && collectionMission == ""){]]></Command>
<Command>			trQuestVarSet("restartMission", 1);</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("restartMission", 0);</Command>
<Command>		}</Command>
<Command>		xsEnableRule("MissionEnd1");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void CommanderUnlockLine(int class = -1, bool first = false){</Command>
<Command>	if(first){</Command>
<Command>		switch(class)</Command>
<Command>		{</Command>
<Command>			case CLASS_ADVENTURER:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\hero g jason icon 64", "phdorogers4: Well, here we go again!");</Command>
<Command>				trSoundPlayFN("gha1.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_ARCANE:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\infantry x Oracle hero icons 64", "Nanodude: You must be pretty good to finish the tutorial. Mind if I tag along?");</Command>
<Command>				trSoundPlayFN("ahs4.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_NAGA:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\infantry x fanatic hero icons 64", "Out Reach: You look sexy, wanna catch an eel later?");</Command>
<Command>				trSoundPlayFN("aha2.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_CLOCKWORK:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\scenario arkantos icon 64", "Roxas: I don't even know who you are!");</Command>
<Command>				trSoundPlayFN("arkantos2attack1.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_EVIL:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\hero g perseus icon 64", "Anraheir: And... ACTION! And some juice please, film making is like super hard and stuff.");</Command>
<Command>				trSoundPlayFN("gha3.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_SPACE:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\hero g odysseus icon 64", "Nickonhawk: You have recruited all the forumers! Well done!");</Command>
<Command>				trSoundPlayFN("gha2.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		switch(class)</Command>
<Command>		{</Command>
<Command>			case CLASS_ADVENTURER:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\cavalry x Lancer hero icons 64", "Venlesh: Sorry you had to come all this way, I was working on LOME. Now what's all this about?");</Command>
<Command>				trSoundPlayFN("aha1.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_ARCANE:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\Special G Minotaur Icon 64", "nottud: Ah! You found me! I'll join you but I won't be using my super powers, that would make things too easy.");</Command>
<Command>				trSoundPlayFN("minotaurgore.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_NAGA:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\archer x arcus hero icons 64", "scragins: It's scragins time!");</Command>
<Command>				trSoundPlayFN("aha2.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_CLOCKWORK:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\Special E Son of Osiris Icon 64", "Yeebaagooon: BOW BEFORE YEEBAAGOOON!");</Command>
<Command>				trSoundPlayFN("soopattack.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_EVIL:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("icons\Infantry G Hoplite Icon 64", "Zenophobia: Why is Nick taking so long with this map?");</Command>
<Command>				trSoundPlayFN("mummydie.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>			case CLASS_SPACE:</Command>
<Command>			{</Command>
<Command>				trShowImageDialog("Zenophobia\SFA\Nick", "God: Pew-pew!");</Command>
<Command>				trSoundPlayFN("llamamove2.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule MissionEnd1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) >= 3){</Command>
<Command>		trSetLighting("default", 0.1);</Command>
<Command>		CleanBoard();</Command>
<Command>		if(trQuestVarGet("newCards") == 1){</Command>
<Command>			trQuestVarSet("missionComplete", 1);</Command>
<Command><![CDATA[			if(trQuestVarGet("missionSelection") < 0){]]></Command>
<Command>				xsDisableRule("StoryTutorial1");</Command>
<Command>				xsDisableRule("StoryTutorial2");</Command>
<Command>				xsDisableRule("StoryTutorial3");</Command>
<Command>				xsDisableRule("StoryTutorial4");</Command>
<Command>				xsDisableRule("StoryTutorial5");</Command>
<Command>				trQuestVarSet("newCards", 0);</Command>
<Command>				trQuestVarSet("newCommanderType", kbGetProtoUnitID("Oracle Hero"));</Command>
<Command>				xsEnableRule("NewCommander0");</Command>
<Command>				CommanderUnlockLine(CLASS_ARCANE, true);</Command>
<Command>				trDelayedRuleActivation("ClassUnlockMessage_1");</Command>
<Command>				trQuestVarSet("class1", CLASS_ADVENTURER);</Command>
<Command>				trQuestVarSet("class2", CLASS_ARCANE);</Command>
<Command><![CDATA[				for(i = 0;<6){]]></Command>
<Command>					setCardCountDeck(i, 3);</Command>
<Command>					setCardCountDeck(i + 30, 3);</Command>
<Command>					setCardCountCollection(i, 0);</Command>
<Command>					setCardCountCollection(i + 30, 0);</Command>
<Command>				}</Command>
<Command>				setCardCountDeck(6, 2);</Command>
<Command>				setCardCountCollection(6, 3);</Command>
<Command>				setCardCountDeck(36, 2);</Command>
<Command>				setCardCountCollection(36, 3);</Command>
<Command>				setClassProgress(CLASS_ADVENTURER, 1);</Command>
<Command>				setClassProgress(CLASS_ARCANE, 1);</Command>
<Command>			} else {</Command>
<Command>				int storiesFinished = 0;</Command>
<Command>				if(getClassProgress(CLASS_ADVENTURER) > 6){</Command>
<Command>					storiesFinished = storiesFinished + 1;</Command>
<Command>				}</Command>
<Command>				if(getClassProgress(CLASS_ARCANE) > 6){</Command>
<Command>					storiesFinished = storiesFinished + 1;</Command>
<Command>				}</Command>
<Command>				if(getClassProgress(CLASS_NAGA) > 6){</Command>
<Command>					storiesFinished = storiesFinished + 1;</Command>
<Command>				}</Command>
<Command>				if(getClassProgress(CLASS_CLOCKWORK) > 6){</Command>
<Command>					storiesFinished = storiesFinished + 1;</Command>
<Command>				}</Command>
<Command>				if(getClassProgress(CLASS_EVIL) > 6){</Command>
<Command>					storiesFinished = storiesFinished + 1;</Command>
<Command>				}</Command>

<Command>				if(trQuestVarGet("missionHardmode") == 0){</Command>
<Command>					setClassProgress(1*trQuestVarGet("missionClass"), getClassProgress(1*trQuestVarGet("missionClass")) + 1);</Command>
<Command>					if(getClassProgress(1*trQuestVarGet("missionClass")) > 6){</Command>
<Command>						trQuestVarSet("newCommanderType", CommanderToProtounit(1+(2*trQuestVarGet("missionClass"))));</Command>
<Command>						xsEnableRule("NewCommander0");</Command>
<Command>						CommanderUnlockLine(trQuestVarGet("missionClass"));</Command>

<Command>						storiesFinished = storiesFinished + 1;</Command>
<Command>						if(getClassProgress(CLASS_NAGA) == 0){</Command>
<Command>							trQuestVarSet("unlockMore", CLASS_NAGA);</Command>
<Command><![CDATA[						} else if(storiesFinished > 4 && getClassProgress(CLASS_SPACE) == 0) {]]></Command>
<Command>							trQuestVarSet("unlockMore", CLASS_SPACE);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				trVectorQuestVarSet("packPos", xsVectorSet(105, 0, 1));</Command>
<Command>				trQuestVarSet("newCardsCount", 2 + trQuestVarGet("missionSelection"));</Command>
<Command>				trVectorQuestVarSet("packPos", xsVectorSet(trVectorQuestVarGetX("packPos")+(8-trQuestVarGet("newCardsCount")),0,trVectorQuestVarGetZ("packPos")+(8-trQuestVarGet("newCardsCount"))));</Command>

<Command>				int playerLegendaries = 0;</Command>
<Command><![CDATA[				for(i=0;<6){]]></Command>
<Command>					playerLegendaries = playerLegendaries + getCardCountCollection(14 + 30 * i);</Command>
<Command>					playerLegendaries = playerLegendaries + getCardCountCollection(29 + 30 * i);</Command>
<Command>				}</Command>
<Command>				xsEnableRule("NewCards0");</Command>
<Command>				xsEnableRule("CollectionClick");</Command>
<Command><![CDATA[				for(i=0;<trQuestVarGet("newCardsCount")){]]></Command>
<Command>					int reward = 0;</Command>
<Command>					int legendary = 0;</Command>
<Command>					trQuestVarSet("packReward" + i, -1);</Command>
<Command><![CDATA[					for(k=0;<9){]]></Command>
<Command>						legendary = 0;</Command>
<Command>						trQuestVarSetFromRand("reward", 7, 29, true);</Command>
<Command><![CDATA[						if(((1*trQuestVarGet("reward") == 14) || (1*trQuestVarGet("reward") == 29)) && storiesFinished <= playerLegendaries){]]></Command>
<Command>							trQuestVarSetFromRand("reward", 7, 29, true);</Command>
<Command>						}</Command>

<Command>						int maxCopies = 3;</Command>
<Command><![CDATA[						if((1*trQuestVarGet("reward") == 14) || (1*trQuestVarGet("reward") == 29)){]]></Command>
<Command>							maxCopies = 1;</Command>
<Command>							legendary = 1;</Command>
<Command>							playerLegendaries = playerLegendaries + 1;</Command>
<Command>						}</Command>

<Command>						int class = trQuestVarGet("missionClass");</Command>

<Command>						if(trQuestVarGet("missionHardmode") > 0){</Command>
<Command>							if(getClassProgress(CLASS_SPACE) > 0){</Command>
<Command>								trQuestVarSetFromRand("temp", 0, 5, true);</Command>
<Command>							} else {</Command>
<Command>								trQuestVarSetFromRand("temp", 0, 4, true);</Command>
<Command>							}</Command>
<Command>							class = trQuestVarGet("temp");</Command>
<Command>						}</Command>

<Command>						reward = 1*trQuestVarGet("reward") + 30 * class;</Command>

<Command><![CDATA[						if((getCardCountDeck(reward) + getCardCountCollection(reward)) < maxCopies){]]></Command>
<Command>							setCardCountCollection(reward, getCardCountDeck(reward) + getCardCountCollection(reward) + 1);</Command>
<Command>							trQuestVarSet("packReward" + i, reward);</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("next", trGetNextUnitScenarioNameNumber());</Command>
<Command>					trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("packPos"),0,trVectorQuestVarGetZ("packPos"),315,true);</Command>
<Command>					trVectorQuestVarSet("packPos", xsVectorSet(trVectorQuestVarGetX("packPos") + 2, 0, trVectorQuestVarGetZ("packPos") + 2));</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>					trUnitChangeProtoUnit("Cinematic Block");</Command>
<Command>					trSetSelectedScale(0.7, 0.2, 1.0);</Command>
<Command>					trUnitChangeName("?");</Command>
<Command>					yAddToDatabase("allUnits", "next");</Command>
<Command>					yAddUpdateVar("allUnits", "player", 1);</Command>
<Command>					yAddUpdateVar("allUnits", "pos", i);</Command>
<Command>					yAddUpdateVar("allUnits", "legendary", legendary);</Command>
<Command>					yAddUpdateVar("allUnits", "proto", CardToProto(reward));</Command>
<Command>					yAddUpdateVar("allUnits", "spell", CardToSpell(reward));</Command>
<Command>					trModifyProtounit(kbGetProtoUnitName(CardToProto(reward)), 1, 1, 9999999999999999999.0);</Command>
<Command>					trModifyProtounit(kbGetProtoUnitName(CardToProto(reward)), 1, 1, -9999999999999999999.0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			dataSave();</Command>
<Command>		}</Command>
<Command>		xsDisableRule("MissionEnd1");</Command>
<Command>		xsEnableRule("MissionEnd2");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule MissionEnd2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("newCards") == 0 && trQuestVarGet("newCommanderType") == 0){]]></Command>
<Command>		trFadeOutAllSounds(0.0);</Command>
<Command>		trFadeOutMusic(0.0);</Command>
<Command>		trUIFadeToColor(0,0,0,1000,1000,false);</Command>
<Command>		xsDisableRule("MissionEnd2");</Command>
<Command>		if(trQuestVarGet("restartMission") == 1){</Command>
<Command>			xsEnableRule("MissionBegin");</Command>
<Command>		} else {</Command>
<Command>			if(true){</Command>
<Command>				dataSave();</Command>
<Command>				subModeEnter("Simulation", "Editor");</Command>
<Command>				uiMessageBox("moo","restartCurrentGame()");</Command>
<Command>				uiCycleCurrentActivate();</Command>
<Command>				subModeLeave("Simulation", "Editor");</Command>
<Command>				modeEnter("pregame");</Command>
<Command>				modeEnter("Simulation");</Command>
<Command>			} else {</Command>
<Command>				xsEnableRule("Collection");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCards0</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("newCommanderType") == 0 && (trTime()-cActivationTime) > 2){]]></Command>
<Command>		trCounterAbort("counter");</Command>
<Command>		trCounterAbort("mana");</Command>
<Command>		trChatHistoryClear();</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		uiClearSelection();</Command>
<Command>		xsDisableRule("NewCards0");</Command>
<Command>		xsEnableRule("NewCards1");</Command>
<Command>		trFadeOutAllSounds(0.0);</Command>
<Command>		trFadeOutMusic(0.0);</Command>
<Command>		MusicLow();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCards1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 2){</Command>
<Command>		trPaintTerrain(0, 0, 60, 60, 5, 4, false);</Command>
<Command>		trSetFogAndBlackmap(false, false);</Command>
<Command>		trUIFadeToColor(0,0,0,100,100,false);</Command>
<Command>		trCameraCut(vector(85.849754,59.475327,36.041752), vector(0.374977,-0.843302,-0.385012), vector(0.588380,0.537438,-0.604126), vector(-0.716381,0.0,-0.697709));</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		trSoundPlayFN("plentybirth.wav", "1", -1, "","");</Command>
<Command>		xsEnableRule("NewCardsEffect_");</Command>
<Command>		trQuestVarSet("newCardsSelection", -1);</Command>
<Command>		xsDisableRule("NewCards1");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCardsEffect</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int id = yDatabaseNext("allUnits", true);</Command>
<Command>	if(kbGetUnitBaseTypeID(id) != kbGetProtoUnitID("Atlantis Wall Connector")){</Command>
<Command>		trUnitChangeProtoUnit("Atlantis Wall Connector");</Command>
<Command>		trSetSelectedScale(0.7, 0.2, 1.0);</Command>
<Command>		if(yGetVar("allUnits","legendary") == 1){</Command>
<Command>			trSoundPlayFN("xpack\xtaunts\en\009 oooh.mp3", "2", -1, "","");</Command>
<Command>			trVectorSetUnitPos("temp", "allUnits");</Command>
<Command>			DeploySober("Gaia Forest effect", "temp");</Command>
<Command>		}</Command>
<Command>		trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>		trQuestVarSet("timermstimer", trTimeMS() + 200);</Command>
<Command>		xsEnableRule("NewCardsEffect_");</Command>
<Command>	} else {</Command>
<Command>		xsEnableRule("NewCardsClick");</Command>
<Command>	}</Command>
<Command>	xsDisableRule("NewCardsEffect");</Command>
<Command>}</Command>

<Command>rule NewCardsEffect_</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTimeMS() > trQuestVarGet("timermstimer")){</Command>
<Command>		xsDisableRule("NewCardsEffect_");</Command>
<Command>		xsEnableRule("NewCardsEffect");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCardsClick</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if(true){</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[			if(trUnitIsSelected() && trQuestVarGet("newCardsSelection") != trQuestVarGet("allUnits")){]]></Command>
<Command>				trQuestVarSet("newCardsSelection", trQuestVarGet("allUnits"));</Command>
<Command>				int proto = yGetVar("allUnits","proto");</Command>
<Command>				int spell = yGetVar("allUnits","spell");</Command>
<Command>				if(trUnitTypeIsSelected("Atlantis Wall Connector")){</Command>
<Command>					if (spell == 0) {</Command>
<Command>						trUnitChangeName(trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>						trUnitChangeProtoUnit(kbGetProtoUnitName(proto));</Command>
<Command>					} else {</Command>
<Command>						trUnitChangeName(trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>						trUnitChangeProtoUnit("Statue of Lightning");</Command>
<Command>						trSetSelectedScale(0.75, 0.2 + xsSqrt(trQuestVarGet("spell_" + spell + "_cost")) * 0.4, 0.75);</Command>
<Command>						trUnitSetAnimationPath(""+1*trQuestVarGet("spell_"+spell+"_animation") + ",0,0,0,0");</Command>
<Command>					}</Command>
<Command>					if(trQuestVarGet("packReward" + 1*yGetVar("allUnits","pos")) == -1){</Command>
<Command>						trDamageUnitPercent(100);</Command>
<Command>						trMessageSetText("You already have all the copies of this card!", -1);</Command>
<Command>					}</Command>
<Command>					if(yGetVar("allUnits","legendary") == 1){</Command>
<Command>						trCameraShake(1.0, 0.1);</Command>
<Command>						trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>						trVectorSetUnitPos("temp", "allUnits");</Command>
<Command>						DeploySober("Meteor Impact Ground", "temp");</Command>
<Command>						trSoundPlayFN("Heaven Games\legendary.wav", "3", -1, "","");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("newCardsCount", trQuestVarGet("newCardsCount") - 1);</Command>
<Command><![CDATA[					if(trQuestVarGet("newCardsCount") < 1){]]></Command>
<Command>						trCounterAddTime("tooltipEnter", -1, -9999999, "(Press ENTER to continue)");</Command>
<Command>						trPlayerKillAllGodPowers(1);</Command>
<Command>						trTechGodPower(1, "nidhogg", 1);</Command>
<Command>						xsEnableRule("NewCardsEnter");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				displayCardDetails(proto, spell);</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCardsEnter</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trPlayerUnitCountSpecific(1, "Nidhogg") > 0) {</Command>
<Command>		if (yFindLatestReverse("nidhoggNext", "Nidhogg", 1) > 0) {</Command>
<Command>			trUnitDestroy();</Command>
<Command>			uiClearSelection();</Command>
<Command>			trCounterAbort("tooltipEnter");</Command>
<Command>			trPlayerKillAllGodPowers(1);</Command>
<Command>			trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>			trQuestVarSet("newCards", 0);</Command>
<Command>			unitTransform("Gaia Forest effect", "Cinematic Block");</Command>
<Command>			xsDisableRule("NewCardsClick");</Command>
<Command>			xsDisableRule("NewCardsEnter");</Command>
<Command>		} else {</Command>
<Command>			ThrowError();</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule NewCommander0</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 2){</Command>
<Command>		uiClearSelection();</Command>
<Command>		trLetterBox(true);</Command>
<Command>		xsDisableRule("NewCommander0");</Command>
<Command>		xsEnableRule("NewCommander1");</Command>
<Command>		trFadeOutAllSounds(0.0);</Command>
<Command>		trFadeOutMusic(0.0);</Command>
<Command>		MusicMedium();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCommander1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 2){</Command>
<Command>		trPaintTerrain(0, 0, 60, 60, 5, 4, false);</Command>
<Command>		trRenderSky(true, "DefaultSkyBox");</Command>
<Command>		trSetFogAndBlackmap(false, false);</Command>
<Command>		trUIFadeToColor(0,0,0,500,500,false);</Command>
<Command>		trQuestVarSet("temp", trGetNextUnitScenarioNameNumber());</Command>
<Command>		trArmyDispatch("1,10", "Implode Sphere Effect", 1, 107.5, 0.00, 10, 0, true);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("temp"), true);</Command>
<Command>		trDamageUnitPercent(100);</Command>
<Command>		trQuestVarSet("newCommander", trGetNextUnitScenarioNameNumber());</Command>
<Command>		trQuestVarSet("newCommanderHeading", 0);</Command>
<Command>		trArmyDispatch("1,10", kbGetProtoUnitName(trQuestVarGet("newCommanderType")), 1, 107.5, 0.00, 10, 0, true);</Command>
<Command>		trCameraCut(vector(89.639015,9.863803,26.737341), vector(0.713514,-0.328201,-0.619017), vector(0.247909,0.944608,-0.215076), vector(-0.655317,0.0,-0.755354));</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, "Commander Unlocked:" + trStringQuestVarGet("card_" + 1*trQuestVarGet("newCommanderType") + "_Name"), "");</Command>
<Command>		trSoundPlayFN("arkantosarrive.wav", "1", -1, "","");</Command>
<Command>		trSoundPlayFN("lightthunder.wav", "1", -1, "","");</Command>
<Command>		xsDisableRule("NewCommander1");</Command>
<Command>		xsEnableRule("NewCommanderRotate");</Command>
<Command>		xsEnableRule("NewCommander2");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCommander2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 6){</Command>
<Command>		trUIFadeToColor(0,0,0,1000,0,true);</Command>
<Command>		xsDisableRule("NewCommander2");</Command>
<Command>		xsEnableRule("NewCommander3");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void UnlockClass(int class = 0){</Command>
<Command>	CommanderUnlockLine(class, true);</Command>
<Command>	trDelayedRuleActivation("ClassUnlockMessage_" + class);</Command>
<Command>	setClassProgress(class, 1);</Command>
<Command><![CDATA[	for (x=0; < 7) {]]></Command>
<Command>		setCardCountCollection(x + 30 * class, 3);</Command>
<Command>	}</Command>
<Command>	dataSave();</Command>
<Command>}</Command>

<Command>rule NewCommander3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 1){</Command>
<Command>		trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>		trLetterBox(false);</Command>
<Command>		trSetFogAndBlackmap(true, true);</Command>
<Command>		trUIFadeToColor(0,0,0,1000,0,false);</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("newCommander"), true);</Command>
<Command>		trUnitDestroy();</Command>
<Command>		xsDisableRule("NewCommander3");</Command>
<Command>		if(1*trQuestVarGet("unlockMore") == 0){</Command>
<Command>			trQuestVarSet("newCommander", 0);</Command>
<Command>			trQuestVarSet("newCommanderType", 0);</Command>
<Command>		} else if(1*trQuestVarGet("unlockMore") == CLASS_NAGA) {</Command>
<Command>			xsEnableRule("NewCommander0");</Command>
<Command>			trQuestVarSet("newCommanderType", kbGetProtoUnitID("Royal Guard Hero"));</Command>
<Command>			UnlockClass(CLASS_NAGA);</Command>
<Command>			trQuestVarSet("unlockMore", CLASS_CLOCKWORK);</Command>
<Command>		} else if(1*trQuestVarGet("unlockMore") == CLASS_CLOCKWORK) {</Command>
<Command>			xsEnableRule("NewCommander0");</Command>
<Command>			trQuestVarSet("newCommanderType", kbGetProtoUnitID("Arkantos God"));</Command>
<Command>			UnlockClass(CLASS_CLOCKWORK);</Command>
<Command>			trQuestVarSet("unlockMore", CLASS_EVIL);</Command>
<Command>		} else if(1*trQuestVarGet("unlockMore") == CLASS_EVIL) {</Command>
<Command>			xsEnableRule("NewCommander0");</Command>
<Command>			trQuestVarSet("newCommanderType", kbGetProtoUnitID("Hero Greek Perseus"));</Command>
<Command>			UnlockClass(CLASS_EVIL);</Command>
<Command>			trQuestVarSet("unlockMore", 0);</Command>
<Command>		} else if(1*trQuestVarGet("unlockMore") == CLASS_SPACE) {</Command>
<Command>			xsEnableRule("NewCommander0");</Command>
<Command>			trQuestVarSet("newCommanderType", kbGetProtoUnitID("Hero Greek Odysseus"));</Command>
<Command>			UnlockClass(CLASS_SPACE);</Command>
<Command>			trQuestVarSet("unlockMore", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule NewCommanderRotate</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("newCommander") > 0){</Command>
<Command>		trQuestVarSet("timermstimer", trTimeMS() + 2);</Command>
<Command>		trQuestVarSet("newCommanderHeading", trQuestVarGet("newCommanderHeading") + 2);</Command>
<Command>		if(trQuestVarGet("newCommanderHeading") > 360){</Command>
<Command>			trQuestVarSet("newCommanderHeading", 1);</Command>
<Command>		}</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("newCommander"), true);</Command>
<Command>		trUnitSetHeading(trQuestVarGet("newCommanderHeading"));</Command>
<Command>		xsEnableRule("NewCommanderRotate_");</Command>
<Command>	}</Command>
<Command>	xsDisableRule("NewCommanderRotate");</Command>
<Command>}</Command>

<Command>rule NewCommanderRotate_</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if(trTimeMS() > trQuestVarGet("timermstimer")){</Command>
<Command>		xsDisableRule("NewCommanderRotate_");</Command>
<Command>		xsEnableRule("NewCommanderRotate");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule SelectCommander</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("p2commander"), true);</Command>
<Command>	if(trUnitIsSelected()){</Command>
<Command>		trUnitSetHP(mGetVarByQV("p2commander", "health"));</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule Story_Cinematic_Play</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trQuestVarSet("cinematicStep", 1 + trQuestVarGet("cinematicStep"));</Command>
<Command>	int x = trQuestVarGet("cinematicStep");</Command>
<Command>	trShowImageDialog(trStringQuestVarGet("cinematicImage"+x), trStringQuestVarGet("cinematicText"+x));</Command>
<Command>	xsDisableSelf();</Command>
<Command>	trDelayedRuleActivation("Story_Cinematic_Next");</Command>
<Command>}</Command>

<Command>rule Story_Cinematic_Next</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("cinematicStep") < trQuestVarGet("cinematicLength")) {]]></Command>
<Command>		trDelayedRuleActivation("Story_Cinematic_Play");</Command>
<Command>	}</Command>
<Command>	xsDisableSelf();</Command>
<Command>}</Command>

<Command>rule StoryTutorial0</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryTutorial0");</Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "Zeno was supposed to make some pretty images for this tutorial but did he? Of course not!");</Command>
<Command>		trSoundPlayFN("llamaselect1.wav","1",-1,"","");</Command>
<Command>		xsEnableRule("StoryTutorial1");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryTutorial1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1drawCards") + trQuestVarGet("p2drawCards") == 0) {</Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "Anyway, this is the mulligan. Highlighted cards will be kept and the rest shuffled back in deck.");</Command>
<Command>		trSoundPlayFN("llamagrunt2.wav","1",-1,"","");</Command>
<Command>		xsDisableRule("StoryTutorial1");</Command>
<Command>		xsEnableRule("StoryTutorial2");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryTutorial2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1done") + trQuestVarGet("p2done") == 2){</Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "Left Click to select.");</Command>
<Command>		trSoundPlayFN("llamamove2.wav","1",-1,"","");</Command>
<Command>		xsDisableRule("StoryTutorial2");</Command>
<Command>		xsEnableRule("StoryTutorial3");</Command>
<Command>		xsEnableRule("StoryTutorial4");</Command>
<Command>		xsEnableRule("StoryTutorial5");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryTutorial3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("gameplayPhase") == GAMEPLAY_WORK){</Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "You selected a unit on the battlefield. Right Click to move or attack.");</Command>
<Command>		trSoundPlayFN("llamamove1.wav","1",-1,"","");</Command>
<Command>		xsDisableRule("StoryTutorial3");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryTutorial4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("gameplayPhase") == GAMEPLAY_SUMMONING || trQuestVarGet("gameplayPhase") == GAMEPLAY_SPELL_UNIT || trQuestVarGet("gameplayPhase") == GAMEPLAY_SPELL_TILE){]]></Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "You selected a card from hand. Left Click again to play or Right Click to cancel.");</Command>
<Command>		trSoundPlayFN("llamamove2.wav","1",-1,"","");</Command>
<Command>		xsDisableRule("StoryTutorial4");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryTutorial5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trCountUnitsInArea(""+1*trQuestVarGet("p2commander"),1,"Unit",27) > 0){</Command>
<Command>		trShowImageDialog("Zenophobia\SFA\Nick", "Commanders have that light effect. Kill the enemy Commander while keeping yours alive to win.");</Command>
<Command>		trSoundPlayFN("llamagrunt1.wav","1",-1,"","");</Command>
<Command>		xsDisableRule("StoryTutorial5");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission1");</Command>
<Command>		trShowImageDialog("icons\World Berry Bush icon 64", "Not long after starting your journey, a large figure comes running to greet you.");</Command>
<Command>		trSoundPlayFN("gaiatreesprout1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Wolf"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Wolf"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission2");</Command>
<Command>		trShowImageDialog("icons\scenario x general icons 64", "Hello civilian! We will take your money to fund the army. Standard procedure.");</Command>
<Command>		trSoundPlayFN("xpack\xdialog\en\xgen005.mp3", "2", -1, "","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			for (x=6; >0) {</Command>
<Command>				addCardToDeck(2, "Hero Greek Ajax");</Command>
<Command>			}</Command>
<Command>			summonAtTile(168, 2, kbGetProtoUnitID("Swordsman"));</Command>
<Command>			summonAtTile(169, 2, kbGetProtoUnitID("Swordsman"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission3");</Command>
<Command>		trShowImageDialog("icons\Special C Qilin Icon", "I am the Protector of this forest. How dare you walk into my domain?");</Command>
<Command>		trSoundPlayFN("qilin_select1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(168, 2, kbGetProtoUnitID("Hetairoi"));</Command>
<Command>			summonAtTile(169, 2, kbGetProtoUnitID("Hetairoi"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission3_</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("p2commander"), true);</Command>
<Command>	if (trUnitPercentDamaged() > 50){</Command>
<Command>		if(PlayerDefeated(1) == false){</Command>
<Command>			xsDisableRule("StoryClass0Mission3_");</Command>
<Command>			if(kbGetUnitBaseTypeID(kbGetBlockID(""+1*trQuestVarGet("p2commander"))) == kbGetProtoUnitID("Qilin")){</Command>
<Command>				trShowImageDialog("icons\Special C Qilin Icon", "Oh right, I uhhh... left the stove on! Please excuse me!");</Command>
<Command>				trSoundPlayFN("qilin_select2.wav","1",-1,"","");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("p2commander"), true);</Command>
<Command>				trUnitChangeProtoUnit("Victory Marker");</Command>
<Command>				trDamageUnitPercent(100);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission4");</Command>
<Command>		trShowImageDialog("icons\Scenario Kemsyt Icon 64", "Ah perfect, something to plunder! We got stuck in this swamp and we were getting bored!");</Command>
<Command>		trSoundPlayFN("kemsytattack1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Bondi"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Bondi"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission5");</Command>
<Command>		trShowImageDialog("icons\god power audrey icons 64", "*plant noises*");</Command>
<Command>		trSoundPlayFN("carnivorabirth.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Wolf"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Bear"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass0Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass0Mission6");</Command>
<Command>		trShowImageDialog("icons\Special C Qilin Icon", "The stove incident has been resolved. This time let's fight for real!");</Command>
<Command>		trSoundPlayFN("qilin_select2.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Hetairoi"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Hero Chinese Immortal"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission1");</Command>
<Command>		trShowImageDialog("icons\improvement granite blood icon 64", "As you approach the Arcane Tower, you notice something blocking the way. It moves.");</Command>
<Command>		trSoundPlayFN("medusastone.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(168, 2, kbGetProtoUnitID("Prisoner"));</Command>
<Command>			summonAtTile(169, 2, kbGetProtoUnitID("Monument"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission2");</Command>
<Command>		trShowImageDialog("icons\Special E Pharaoh Icon 64", "Welcome to the Arcane Tower! I shall be your first challenger, the great Fire Mage!");</Command>
<Command>		trSoundPlayFN("pha1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Oracle Scout"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Monument 2"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission3");</Command>
<Command>		trShowImageDialog("icons\scenario x folstag icons 64", "Yo! Frost Mage here!");</Command>
<Command>		trSoundPlayFN("mountaingiantattack1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Frost Giant"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Monument 3"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission4");</Command>
<Command>		trShowImageDialog("icons\Animal Boar icon 64", "Hey I have to be somewhere, can we do this challenge thing in the elevator? Thanks.");</Command>
<Command>		trSoundPlayFN("pigambient.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(0, 2, kbGetProtoUnitID("Maceman"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission5");</Command>
<Command>		trShowImageDialog("icons\Special E Setna Icon 64", "Impressive. But you are no match for the Archmage!");</Command>
<Command>		trSoundPlayFN("setnaattack1.wav","1",-1,"","");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Golem"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Monument 4"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass1Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableRule("StoryClass1Mission6");</Command>
<Command>		trShowImageDialog("icons\Special G Circe Icon 64", "*You feel a large amount of fear!*");</Command>
<Command>		trSoundPlayFN("xattackwarning.wav","1",-1,"","");</Command>
<Command>		trPaintTerrain(0, 0, 60, 60, 0, 50, false);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Fire Giant"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Monument 5"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\building specialist icons 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Wolf"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Wolf"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\improvement focus icons 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 25);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Phoenix Egg"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Phoenix Egg"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\improvement poseidons secret icons 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 30);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Servant"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Servant"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\improvement engineers icon 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 35);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Eitri"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Eitri"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\god power ancestors icon 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 40);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Guardian"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Guardian"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass5Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 0){</Command>
<Command>		xsDisableSelf();</Command>
<Command>		trShowImageDialog("icons\god power eclipse icon 64", "");</Command>
<Command>		trSoundPlayFN("visionswoosh.wav", "1", -1, "","");</Command>
<Command>		mSetVarByQV("p2commander", "health", 45);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Minotaur"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Hoplite"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>// Clockwork Missions</Command>

<Command>rule StoryClass3Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Insert image of clockwork landscape.");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "Next up is Yeebaagooon...");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Did you just say Yeebaagooon? What business do you have with that villain?");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "Villain? The Yeebaagooon I know isn't a villain.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Oh, you must be working for him then. Die!");</Command>
<Command>		CinematicStart();</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass3Mission1_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission1_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Dammit! How could this be?");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "I'm not going to kill you. Just explain this villain business.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "What? Aren't you here to assassinate me?");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "No! I just need Yeebaagooon's help with something.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Does that involve Yeebaagooon leaving to join you?");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "Uh, probably.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Excellent! I will help you reach Yeebaagooon.");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "This land was once a lush green valley. But then Yeebaagooon came and estabilshed the Evil Profit Company.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Now, it is a wasteland filled with factories that build his robot army.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "But strangely, some of us have gained sentience and have formed a resistance. This is one of our bases.");</Command>
<Command>		CinematicAdd("HeavenGames\robot", "Commander Roxas! We have trouble! The Profit Patrol are attacking!");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "What? To battle stations!");</Command>
<Command>		CinematicStart();</Command>
<Command>		teleportToTile(1*trQuestVarGet("p1commander"), 132);</Command>
<Command>		teleportToTile(1*trQuestVarGet("p2commander"), 152);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command><![CDATA[			for(x=0; <6) {]]></Command>
<Command>				addCardToDeck(2, "", SPELL_METEOR);</Command>
<Command>				addCardToDeck(2, "Crossbowman");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass3Mission2_deploy");</Command>
<Command>		xsEnableRule("StoryClass3Mission2_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission2_deploy</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2mana") > trQuestVarGet("storyMissionBotMana")) {</Command>
<Command>		trQuestVarCopy("storyMissionBotMana", "p2mana");</Command>
<Command>		if (trQuestVarGet("storyMissionBotMana") == 5) {</Command>
<Command>			if (zGetVarByIndex("tiles", "occupant", 255) == 0) {</Command>
<Command>				int siphon = summonAtTile(255, 2, kbGetProtoUnitID("Fire Siphon"));</Command>
<Command>				mSetVar(siphon, "laserDirx", -70710);</Command>
<Command>				mSetVar(siphon, "laserDirz", -70710);</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+siphon);</Command>
<Command>				trSetUnitOrientation(xsVectorSet(-0.707107,0,0.707107), xsVectorSet(0,1,0), true);</Command>
<Command><![CDATA[				ChatLog(1, "<color=1.0,0,0>Opponent:</color> Deploy the Laser Cannon!");]]></Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trQuestVarSetFromRand("rand", 1, 1*trQuestVarGet("storyMissionBotMana"), true);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 0) {</Command>
<Command>			trQuestVarSetFromRand("rand2", 1, 1*trQuestVarGet("storyMissionBotMana"), true);</Command>
<Command><![CDATA[			if (trQuestVarGet("rand2") < trQuestVarGet("rand")) {]]></Command>
<Command>				trQuestVarCopy("rand", "rand2");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		for(x=trQuestVarGet("rand"); >0) {</Command>
<Command>			trQuestVarSetFromRand("tile", 255, 296, true);</Command>
<Command>			if (zGetVarByIndex("tiles", "occupant", 1*trQuestVarGet("tile")) == 0) {</Command>
<Command>				if (x == 4) {</Command>
<Command>					summonAtTile(1*trQuestVarGet("tile"), 2, kbGetProtoUnitID("Javelin Cavalry"));</Command>
<Command>				} else if (x == 5) {</Command>
<Command>					summonAtTile(1*trQuestVarGet("tile"), 2, kbGetProtoUnitID("Chieroballista"));</Command>
<Command>				} else if (x == 6) {</Command>
<Command>					summonAtTile(1*trQuestVarGet("tile"), 2, kbGetProtoUnitID("Colossus"));</Command>
<Command>				} else {</Command>
<Command>					summonAtTile(1*trQuestVarGet("tile"), 2, kbGetProtoUnitID("Maceman Hero"));</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission2_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2mana") >= 10) {</Command>
<Command>		damageUnit(1*trQuestVarGet("p2commander"), 999);</Command>
<Command>		removeDeadUnits();</Command>
<Command>		xsDisableSelf();</Command>
<Command>		xsDisableRule("StoryClass3Mission2_deploy");</Command>
<Command><![CDATA[	} else if (mGetVarByQV("objectiveObelisk", "health") <= 0) {]]></Command>
<Command>		damageUnit(1*trQuestVarGet("p1commander"), 999);</Command>
<Command>		removeDeadUnits();</Command>
<Command>		xsDisableSelf();</Command>
<Command>		xsDisableRule("StoryClass3Mission2_deploy");</Command>
<Command><![CDATA[	} else if (mGetVarByQV("p1commander", "health") <= 0) {]]></Command>
<Command>		xsDisableSelf();</Command>
<Command>		xsDisableRule("StoryClass3Mission2_deploy");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "You have proven your strength and honesty. I will lead you to Yeebaagooon.");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Insert image of the tower entrance.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "This is the incinerator of the Evil Profit Company.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "No one guards this place. We can sneak in if we're careful.");</Command>
<Command>		CinematicStart();</Command>
<Command>		teleportToTile(1*trQuestVarGet("p2commander"), 233);</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Insert panel introducing throwaway villain");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(128, 2, kbGetProtoUnitID("Tower Mirror"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass3Mission4_end");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission4_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\underling", "Boss! The tower has been infiltrated by a robot and a swordsman!");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Hm, that swordsman looks familiar. What was his name again? Royce? Ronald?");</Command>
<Command>		CinematicAdd("HeavenGames\underling", "Are they your guests sir?");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "No. But let's send them an invitation anyway.");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "insert image of yeebaagooon screen");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Welcome, Ronald! And you, robot man, whatever your name is.");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "It's Rogers, actually.");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "You bastard! Show yourself instead of hiding behind that screen!");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "How rude. I'm inviting you to a match of Minigames Z. Enjoy!");</Command>
<Command>		CinematicStart();</Command>
<Command>		damageUnit(1*trQuestVarGet("p1commander"), 18);</Command>
<Command>		zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p2commander", "tile"), 0);</Command>
<Command>		teleportToTile(1*trQuestVarGet("p2commander"), 219);</Command>
<Command>		xsEnableRule("StoryClass3Mission5_1");</Command>
<Command>		xsEnableRule("StoryClass3Mission5_end");</Command>
<Command>		xsEnableRule("StoryClass3Mission5_story");</Command>
<Command>		trQuestVarSet("storyMissionBotMana", 0);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission5_1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trQuestVarSet("p1drawCards", 0);</Command>
<Command><![CDATA[	if ((trQuestVarGet("maxmana") > trQuestVarGet("storyMissionBotMana")) &&]]></Command>
<Command><![CDATA[		(yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + yGetDatabaseCount("pushes") == 0) &&]]></Command>
<Command>		(trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop"))) {</Command>
<Command>		trQuestVarCopy("storyMissionBotMana", "maxmana");</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (mGetVarByQV("allUnits", "spell") == SPELL_NONE) {</Command>
<Command>				mSetVarByQV("allUnits", "OnDeath", 0);</Command>
<Command>				damageUnit(1*trQuestVarGet("allUnits"), 999);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		trSoundPlayFN("favordump.wav","1",-1,"","");</Command>
<Command>		removeDeadUnits();</Command>
<Command>		trMessageSetText("Survive this turn!", -1);</Command>
<Command>		switch(1*trQuestVarGet("storyMissionBotMana"))</Command>
<Command>		{</Command>
<Command>			case 1:</Command>
<Command>			{</Command>
<Command>				SummonLaser(135, 129);</Command>
<Command>			}</Command>
<Command>			case 2:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 128);</Command>
<Command>				SummonLaser(139, 130);</Command>
<Command>				SummonLaser(141, 131);</Command>
<Command>				SummonLaser(146, 134);</Command>
<Command>				SummonLaser(137, 134);</Command>
<Command>				SummonLaser(143, 132);</Command>
<Command>				SummonLaser(145, 134);</Command>
<Command>			}</Command>
<Command>			case 3:</Command>
<Command>			{</Command>
<Command>				trMessageSetText("Survive this turn! (Check your hand)", -1);</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 128);</Command>
<Command>				SummonLaser(146, 145);</Command>
<Command>				SummonLaser(137, 134);</Command>
<Command>				SummonLaser(135, 129);</Command>
<Command>				SummonLaser(136, 130);</Command>
<Command>				SummonLaser(138, 139);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>			}</Command>
<Command>			case 4:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 145);</Command>
<Command>				SummonLaser(146, 145);</Command>
<Command>				SummonLaser(137, 134);</Command>
<Command>				SummonLaser(135, 129);</Command>
<Command>				SummonLaser(136, 130);</Command>

<Command>				SummonLaser(144, 145);</Command>
<Command>				SummonLaser(143, 133);</Command>
<Command>				SummonLaser(142, 132);</Command>
<Command>				SummonLaser(141, 131);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>			}</Command>
<Command>			case 5:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 132);</Command>
<Command>				SummonLaser(144, 145);</Command>
<Command>				SummonLaser(137, 134);</Command>
<Command>				SummonLaser(129, 128);</Command>
<Command>				SummonLaser(136, 130);</Command>
<Command>				SummonLaser(140, 139);</Command>
<Command>				mSetVar(summonAtTile(130, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(141, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(146, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Battle Boar"), 0, true);</Command>
<Command>			}</Command>
<Command>			case 6:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 128);</Command>
<Command>				SummonLaser(146, 145);</Command>
<Command>				for (x=145; >=134) {</Command>
<Command>					mSetVar(summonAtTile(x, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				}</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Sphinx"), 0, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>			}</Command>
<Command>			case 7:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 142);</Command>
<Command>				SummonLaser(137, 134);</Command>
<Command>				SummonLaser(136, 130);</Command>
<Command>				mSetVar(summonAtTile(135, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>

<Command>				mSetVar(summonAtTile(133, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(143, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(131, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(141, 2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Ape of Set"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Battle Boar"), 0, true);</Command>
<Command>			}</Command>
<Command>			case 8:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 135);</Command>
<Command>				mSetVar(summonAtTile(129,2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(136,2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				mSetVar(summonAtTile(137,2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				SummonLaser(146, 137);</Command>
<Command>				SummonLaser(138, 136);</Command>
<Command>				SummonLaser(142, 132);</Command>
<Command>				mSetVar(summonAtTile(128, 1, kbGetProtoUnitID("Throwing Axeman")), "action", ACTION_READY);</Command>

<Command>				addCardToHand(1, 0, SPELL_EXPLOSION, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_DOUBLEBLAST, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Oracle Scout"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Oracle Scout"), 0, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_ZENOS_PARADOX, true);</Command>
<Command>			}</Command>
<Command>			case 9:</Command>
<Command>			{</Command>
<Command>				zSetVarByIndex("tiles", "occupant", 1*mGetVarByQV("p1commander", "tile"), 0);</Command>
<Command>				teleportToTile(1*trQuestVarGet("p1commander"), 132);</Command>
<Command>				SummonLaser(135, 132);</Command>
<Command>				SummonLaser(129, 132);</Command>
<Command>				SummonLaser(128, 132);</Command>
<Command>				for (x=146; >=136) {</Command>
<Command>					mSetVar(summonAtTile(x,2, kbGetProtoUnitID("Ape of Set")), "attack", 3);</Command>
<Command>				}</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Minion"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Ape of Set"), 0, true);</Command>
<Command>				addCardToHand(1, kbGetProtoUnitID("Battle Boar"), 0, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_DUEL, true);</Command>
<Command>				addCardToHand(1, 0, SPELL_BLOOD_PRICE, true);</Command>
<Command>			}</Command>
<Command>			case 10:</Command>
<Command>			{</Command>
<Command>				xsDisableSelf();</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		for(x=yGetDatabaseCount("p1hand"); >0) {</Command>
<Command>			yDatabaseNext("p1hand");</Command>
<Command>			mSetVarByQV("p1hand", "keywords", SetBit(1*mGetVarByQV("p1hand", "keywords"), FLEETING));</Command>
<Command>		}</Command>
<Command>		updateHandPlayable(1);</Command>
<Command>		trDelayedRuleActivation("StoryClass3Mission5_2");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission5_2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTime() > cActivationTime) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		unitTransform("Generic Corpse", "Cinematic Block");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission5_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		xsDisableRule("StoryClass3Mission5_1");</Command>
<Command>		xsDisableRule("StoryClass3Mission5_2");</Command>
<Command>	} else if (trQuestVarGet("maxMana") == 10) {</Command>
<Command>		damageUnit(1*trQuestVarGet("p2commander"), 9999);</Command>
<Command>		xsDisableSelf();</Command>
<Command>		xsDisableRule("StoryClass3Mission5_1");</Command>
<Command>		xsDisableRule("StoryClass3Mission5_2");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission5_story</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Well done! You can take the elevator straight to the presidential suite.");</Command>
<Command>		CinematicStart();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass3Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Welcome, Royce!");</Command>
<Command>		CinematicAdd("HeavenGames\roxas", "Yeebaagooon! At last, I will topple your rein-");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Insert image of yeeb zapping roxas");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Dispose of him.");</Command>
<Command>		CinematicAdd("HeavenGames\underling", "Yessir");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "What? Wait! Don't kill him! He's a playable character!");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Foolish. Not even playable characters are safe from me.");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "If you want me to spare him, then prove yourself.");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 30);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 1);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			for(x=6; >0) {</Command>
<Command>				addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>				addCardToDeck(2, "", SPELL_BANHAMMER);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass3Mission6_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass3Mission6_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Congratulations. The annoying robot lives another day.");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "Alright. Will you hear me out now? I need your help to save the world.");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Saving the world? From what?");</Command>
<Command>		CinematicAdd("HeavenGames\rogers", "Insert thing we are trying to stop here");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "Well this won't do. Can't have some upstart trying to destroy the world before I do.");</Command>
<Command>		CinematicAdd("HeavenGames\yeebaagooon", "I shall assist you in this endeavor. Rejoice.");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>// Otherworld Missions</Command>

<Command>rule StoryClass4Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "They said I could find Zenophobia here, but is he really in this dreary place?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "Halt! State your business!");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "What? Who are you?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "I am Anraheir, guardian of these lands. Now state your business!");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "I am Rogers. I need to meet with Zenophobia and request his help.");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "Zenophobia you say? Well you're in luck. I'm one of his agents. I can guide you to him.");</Command>
<Command>		CinematicStart();</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			addCardToDeck(2, "", SPELL_TAVERN_BRAWL);</Command>
<Command>			addCardToDeck(2, "", SPELL_TAVERN_BRAWL);</Command>
<Command>			addCardToDeck(2, "", SPELL_TAVERN_BRAWL);</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass4Mission1_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission1_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "What were those? Creepy!");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "They are Zombie Trees. This forest is home to many denizens of the Otherworld.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "The Otherworld? What's that?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "It is the realm where madness and nightmares reside. Sometimes they cross over to our dimension.");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "Fortunately, Zenophobia has established a barrier around this forest to contain them.");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "So where is Zenophobia?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "He is in the Otherworld.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "What?! We have to go there to meet him?!");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "That is correct.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "Can't he come out here instead? I really don't want to face more of those things.");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "It depends on his mood, really.");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 12);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 1);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON));</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			for(x=3; >0) {</Command>
<Command>				trQuestVarSetFromRand("temp", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend") - 1, true);</Command>
<Command>				int tile = trQuestVarGet("temp");</Command>
<Command>				while (zGetVarByIndex("tiles", "occupant", tile) + zGetVarByIndex("tiles", "terrain", tile) > 0) {</Command>
<Command>					trQuestVarSetFromRand("temp", trQuestVarGet("ztilesstart"), trQuestVarGet("ztilesend") - 1, true);</Command>
<Command>					tile = trQuestVarGet("temp");</Command>
<Command>				}</Command>
<Command>				summonAtTile(tile, 2, kbGetProtoUnitID("Spider Egg"));</Command>
<Command>				addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			}</Command>
<Command>			shuffleDeck(2);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "This is bad. Night approaches. We must hurry.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "What happens when night falls?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "You don't want to know. Let's just get to the portal as soon as possible.");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 2);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON));</Command>
<Command>		trSetLighting("dusk", 0.1);</Command>
<Command>		xsEnableRule("StoryClass4Mission3_Decay");</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			for(x=3; >0) {</Command>
<Command>				addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>				addCardToDeck(2, "Tartarian Gate");</Command>
<Command>			}</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Argus"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Argus"));</Command>
<Command>			shuffleDeck(2);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission3_Decay</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("activePlayer") == 2) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		OnPlay(1*trQuestVarGet("p2commander"));</Command>
<Command><![CDATA[		ChatLog(1, "<color={Playercolor(2)}>You have been inflicted with Decay!</color>");]]></Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass4Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "Uhh, Anraheir? It's night time!");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "The portal is just up ahead! Let's go!");</Command>
<Command>		CinematicStart();</Command>
<Command>		trSetLighting("night", 0.1);</Command>
<Command>		teleportToTile(1*trQuestVarGet("p2commander"), 128);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(230, 2, kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command>			summonAtTile(254, 2, kbGetProtoUnitID("Tartarian Gate"));</Command>
<Command>			for(x=20; >0) {</Command>
<Command>				addCardToDeck(2, "Theris");</Command>
<Command>			}</Command>
<Command>			shuffleDeck(2);</Command>
<Command>		}</Command>

<Command>		deployAtTile(0, "Well of Urd", 128);</Command>
<Command>		trQuestVarSet("idsEyecandyEnd", trGetNextUnitScenarioNameNumber());</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule StoryClass4Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "This is the Otherworld?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "Yes. Try not to make sense of anything. This place is filled with madness, after all.");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Yo, Anraheir! Got time for a playtest?");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "It's Zenophobia!");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "No, that's a fake! He never asks me to playtest!");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 30);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Bireme"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Bireme"));</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			shuffleDeck(2);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "No, that's a fake! He never asks me to playtest!");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "It's Zenophobia!");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Yo, Anraheir! Got time for a playtest?");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "Yes. Try not to make sense of anything. This place is filled with madness, after all.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "This is the Otherworld?");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 30);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Bireme"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Bireme"));</Command>
<Command><![CDATA[			for(x=0;<6) {]]></Command>
<Command>				addCardToDeck(2, "Theris");</Command>
<Command>				addCardToDeck(2, "", SPELL_DOMINANCE);</Command>
<Command>			}</Command>
<Command>			shuffleDeck(2);</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass4Mission6_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass4Mission6_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Whew! Thank goodness you broke that paradox! I've been trapped for months!");</Command>
<Command>		CinematicAdd("icons\hero g perseus icon 64", "That's a lie. You were just too lazy to get out.");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Perhaps. But in any case, I know why you're here.");</Command>
<Command>		CinematicAdd("icons\hero g jason icon 64", "You do? Will you help me then?");</Command>
<Command>		CinematicAdd("icons\infantry g hoplite icon 64", "Certainly. It's an excellent distraction from all my unfinished work.");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>// Naga Missions</Command>

<Command>rule StoryClass2Mission1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_02", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_03", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_04", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 4);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON) + Keyword(FURIOUS));</Command>
<Command>		mSetVarByQV("p2commander", "spell", SPELL_COMMANDER);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(222, 2, kbGetProtoUnitID("Nereid"));</Command>
<Command>			summonAtTile(223, 2, kbGetProtoUnitID("Nereid"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass2Mission1_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission1_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		trFadeOutAllSounds(0.0);</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_05", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_06", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_07", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_08", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_09", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_10", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m1_11", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m2_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m2_02", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m2_03", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 3);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON) + Keyword(LIGHTNING));</Command>
<Command>		mSetVarByQV("p2commander", "spell", SPELL_COMMANDER);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(139, 2, kbGetProtoUnitID("Man O War"));</Command>
<Command>			summonAtTile(145, 2, kbGetProtoUnitID("Man O War"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass2Mission2_mes");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission2_mes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1mana") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		uiMessageBox("You are underwater. Here's an Oxygen Tank.","");</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		xsEnableRule("StoryClass2Mission2_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission2_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m2_04", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission3</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m3_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m3_02", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 4);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON));</Command>
<Command>		mSetVarByQV("p2commander", "spell", SPELL_COMMANDER);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(168, 2, kbGetProtoUnitID("Wadjet"));</Command>
<Command>			summonAtTile(169, 2, kbGetProtoUnitID("Wadjet"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass2Mission3_mes");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission3_mes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1mana") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		uiMessageBox("Two Oxygen Tanks for current depth.","");</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		xsEnableRule("StoryClass2Mission3_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission3_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("missionComplete") == 1) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m3_03", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	} else if (PlayerDefeated(1)) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission4</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m4_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m4_02", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m4_03", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m4_04", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 20);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 1);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON) + Keyword(REGENERATE));</Command>
<Command>		mSetVarByQV("p2commander", "spell", SPELL_COMMANDER);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(150, 2, kbGetProtoUnitID("Sea Turtle"));</Command>
<Command>			summonAtTile(151, 2, kbGetProtoUnitID("Sea Turtle"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass2Mission4_mes");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission4_mes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1mana") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		uiMessageBox("Three Oxygen Tanks for current depth.","");</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission5</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m5_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m5_02", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m5_03", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m5_04", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m5_05", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		mSetVarByQV("p2commander", "health", 40);</Command>
<Command>		mSetVarByQV("p2commander", "attack", 2);</Command>
<Command>		mSetVarByQV("p2commander", "keywords", Keyword(BEACON) + Keyword(ETHEREAL));</Command>
<Command>		mSetVarByQV("p2commander", "spell", SPELL_COMMANDER);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(192, 2, kbGetProtoUnitID("Leviathan"));</Command>
<Command>			summonAtTile(193, 2, kbGetProtoUnitID("Leviathan"));</Command>
<Command>		}</Command>
<Command>		xsEnableRule("StoryClass2Mission5_mes");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission5_mes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1mana") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		uiMessageBox("Four Oxygen Tanks for current depth.","");</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>		addCardToHand(1, 0, SPELL_OXYGEN_TANK, false);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission6</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p2drawCards") > 0) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_01", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_02", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_03", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_04", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_05", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_06", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_07", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_08", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_09", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_10", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_11", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_12", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_13", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_14", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_15", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_16", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_17", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_18", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_19", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_20", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_21", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_22", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		trQuestVarSet("companion", summonAtTile(283, 1, kbGetProtoUnitID("Archer Atlantean Hero")));</Command>
<Command>		teleportToTile(1*trQuestVarGet("p1commander"), 281);</Command>
<Command>		teleportToTile(1*trQuestVarGet("p2commander"), 255);</Command>
<Command>		zSetVarByIndex("tiles", "occupant", 282, 0);</Command>
<Command>		zSetVarByIndex("tiles", "occupant", 219, 0);</Command>
<Command>		deployAtTile(0, "Sky Passage", 255);</Command>
<Command>		if (trQuestVarGet("missionHardmode") == 1) {</Command>
<Command>			summonAtTile(129, 2, kbGetProtoUnitID("Tower Mirror"));</Command>
<Command>			summonAtTile(133, 2, kbGetProtoUnitID("Tower Mirror"));</Command>
<Command>			summonAtTile(131, 2, kbGetProtoUnitID("Tower Mirror"));</Command>
<Command>			summonAtTile(134, 2, kbGetProtoUnitID("Oracle Scout"));</Command>
<Command>			summonAtTile(130, 2, kbGetProtoUnitID("Oracle Scout"));</Command>
<Command>			summonAtTile(128, 2, kbGetProtoUnitID("Priest"));</Command>
<Command>			summonAtTile(132, 2, kbGetProtoUnitID("Priest"));</Command>
<Command>			summonAtTile(268, 2, kbGetProtoUnitID("Golem"));</Command>
<Command>			summonAtTile(289, 2, kbGetProtoUnitID("Golem"));</Command>
<Command>			summonAtTile(296, 2, kbGetProtoUnitID("Golem"));</Command>
<Command>			summonAtTile(275, 2, kbGetProtoUnitID("Golem"));</Command>
<Command>		} else {</Command>
<Command>			summonAtTile(128, 2, kbGetProtoUnitID("Tower Mirror"));</Command>
<Command>			summonAtTile(133, 2, kbGetProtoUnitID("Oracle Scout"));</Command>
<Command>			summonAtTile(131, 2, kbGetProtoUnitID("Priest"));</Command>
<Command>			summonAtTile(268, 2, kbGetProtoUnitID("Nemean Lion"));</Command>
<Command>			summonAtTile(289, 2, kbGetProtoUnitID("Nemean Lion"));</Command>
<Command>			summonAtTile(296, 2, kbGetProtoUnitID("Nemean Lion"));</Command>
<Command>			summonAtTile(275, 2, kbGetProtoUnitID("Nemean Lion"));</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("idsEyecandyEnd", trGetNextUnitScenarioNameNumber());</Command>
<Command>		xsEnableRule("StoryClass2Mission6_mes");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission6_mes</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1mana") == 1) {</Command>
<Command>		xsDisableSelf();</Command>
<Command>		uiMessageBox("Objective: Out Reach and Scragins must survive and get near the exit.","");</Command>
<Command>		xsEnableRule("StoryClass2Mission6_end");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission6_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*trQuestVarGet("p2commander")));</Command>
<Command><![CDATA[	if (trDistanceToVectorSquared("p1commander", "pos") < 64 && trDistanceToVectorSquared("companion", "pos") < 64) {]]></Command>
<Command>		damageUnit(1*trQuestVarGet("p2commander"), 999);</Command>
<Command>		removeDeadUnits();</Command>
<Command>		trQuestVarSet("p2defeated", 1);</Command>
<Command>		xsEnableRule("match_end");</Command>
<Command>		trUIFadeToColor(0,0,0,900,0,true);</Command>
<Command>		xsEnableRule("StoryClass2Mission6_end2");</Command>
<Command>		xsDisableSelf();</Command>
<Command><![CDATA[	} else if (mGetVarByQV("companion", "health") <= 0) {]]></Command>
<Command>		damageUnit(1*trQuestVarGet("p1commander"), 999);</Command>
<Command>		removeDeadUnits();</Command>
<Command>		xsDisableSelf();</Command>
<Command><![CDATA[	} else if (mGetVarByQV("p1commander", "health") <= 0) {]]></Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule StoryClass2Mission6_end2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if ((trTime()-cActivationTime) > 2) {</Command>
<Command>		CinematicReset();</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_23", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_24", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_25", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_26", "");</Command>
<Command>		CinematicAdd("HeavenGames\c2m6_27", "");</Command>
<Command>		CinematicStart();</Command>
<Command>		xsDisableSelf();</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>rule zenowashere</Command>
<Command>inactive</Command>
<Command>highFrequency</Command>
<Command>{</Command>
<Command>if(true) {</Command>
<Command>xsDisableSelf();</Command>
</Effect>
</Effects>
</trigger>