<?xml version = "1.0"?>
<trigger version="2">

<!-- Z DUSK Triggers -->

<Conditions>
	<Condition name="$$22289$$Always">
		<Expression>true</Expression>
	</Condition>

</Conditions>

<Effects>
	<Effect name="$$22355$$SetIdleProcessing">
    	<Param name="IdleProc" dispName="$$22356$$Process Idle:" varType="bool">true</Param>
    	<Command>trSetUnitIdleProcessing(%mod%IdleProc%mod%);</Command>
	</Effect>

<Effect name=" Card Game">
<Command>bool Multiplayer = false;</Command>

<Command>bool playerIsPlaying(int p = 0) {</Command>
<Command><![CDATA[	return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);]]></Command>
<Command>}</Command>

<Command>void trVectorSetUnitPos(string v = "", string db = "", bool reverse = true) {</Command>
<Command>	trVectorQuestVarSet(v, kbGetBlockPosition(""+1*trQuestVarGet(db), reverse));</Command>
<Command>}</Command>


<Command>void trUnitMoveToVector(string v = "", bool attack = false) {</Command>
<Command>	trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);</Command>
<Command>}</Command>

<Command>void trVectorScale(string db = "", float s = 1.0) {</Command>
<Command>	trQuestVarSet(db+"x", trQuestVarGet(db+"x") * s);</Command>
<Command>	trQuestVarSet(db+"z", trQuestVarGet(db+"z") * s);</Command>
<Command>}</Command>


<Command>void vectorSnapToGrid(string qv = "") {</Command>
<Command>	int x = trQuestVarGet(qv+"x") / 2;</Command>
<Command>	int z = trQuestVarGet(qv+"z") / 2;</Command>
<Command>	trQuestVarSet(qv+"x", x * 2 + 1);</Command>
<Command>	trQuestVarSet(qv+"z", z * 2 + 1);</Command>
<Command>}</Command>

<Command>int zModulo(int mod = 10, float val = 0) {</Command>
<Command>	int m = 0 + mod;</Command>
<Command>	int v = xsRound(val);</Command>
<Command>	return(v - xsFloor(val / m) * m);</Command>
<Command>}</Command>

<Command>float fModulo(float mod = 0, float val = 0) {</Command>
<Command>	int c = 0;</Command>
<Command>	if (val > 0) {</Command>
<Command>		c = val / mod;</Command>
<Command>	} else {</Command>
<Command>		c = val / mod - 1;</Command>
<Command>	}</Command>
<Command>	return(0.0 + val - mod * c);</Command>
<Command>}</Command>


<Command>void zUnitHeading(float a = 0) {</Command>
<Command>	trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);</Command>
<Command>}</Command>

<Command>void zInitProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>	trQuestVarSet("p"+p+"pf"+kbGetProtoUnitID(r)+"f"+f, v);</Command>
<Command>}</Command>

<Command>void zSetProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>	for(zsps=0; >1){}</Command>
<Command>	zsps = kbGetProtoUnitID(r);</Command>
<Command>	trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet("p"+p+"pf"+zsps+"f"+f));</Command>
<Command>	trQuestVarSet("p"+p+"pf"+zsps+"f"+f, 0.0 + v);</Command>
<Command>}</Command>

<Command>void vectorToGrid(string from = "", string to = ""){</Command>
<Command>	int x = 0 + trQuestVarGet(from+"x") / 2;</Command>
<Command>	int z = 0 + trQuestVarGet(from+"z") / 2;</Command>
<Command>	trQuestVarSet(to+"x", x);</Command>
<Command>	trQuestVarSet(to+"z", z);</Command>
<Command>}</Command>

<Command>void gridToVector(string from = "", string to = "") {</Command>
<Command>	trQuestVarSet(to+"x", trQuestVarGet(from+"x") * 2 + 1);</Command>
<Command>	trQuestVarSet(to+"z", trQuestVarGet(from+"z") * 2 + 1);</Command>
<Command>}</Command>

<Command>float gridDistanceSquared(string from = "", string to = "") {</Command>
<Command>	float xdiff = trQuestVarGet(to+"x") - trQuestVarGet(from+"x");</Command>
<Command>	float zdiff = trQuestVarGet(to+"z") - trQuestVarGet(from+"z");</Command>
<Command>	return(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>}</Command>

<Command>void zSquareVar(string qv = "") {</Command>
<Command>	trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));</Command>
<Command>}</Command>

<Command>float zDistanceBetweenVectorsSquared(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xdiff * xdiff + zdiff * zdiff;</Command>
<Command>	return(dist);</Command>
<Command>}</Command>



<Command>float zDistanceBetweenVectors(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float zDistanceBetweenVectors3d(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float ydiff = trQuestVarGet(end + "Y") - trQuestVarGet(start + "Y");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float zDistanceToVectorSquared(string qv = "", string v = "") {</Command>
<Command>	trVectorQuestVarSet("abcd", kbGetBlockPosition(""+1*trQuestVarGet(qv), true));</Command>
<Command>	return(zDistanceBetweenVectorsSquared("abcd", v));</Command>
<Command>}</Command>

<Command>float zDistanceToVector(string qv = "", string v = "") {</Command>
<Command>	trVectorQuestVarSet("abcd", kbGetBlockPosition(""+1*trQuestVarGet(qv), true));</Command>
<Command>	return(zDistanceBetweenVectors("abcd", v));</Command>
<Command>}</Command>

<Command>void trVectorSetFromAngle(string qv = "", float angle = 0) {</Command>
<Command>	trVectorQuestVarSet(qv,xsVectorSet(Math_sin(angle), 0, Math_cos(angle)));</Command>
<Command>}</Command>

<Command>float angleBetweenVectors(string from = "", string to = "") {</Command>
<Command>	float a = Math_atan((trQuestVarGet(to+"X")-trQuestVarGet(from+"X"))/(trQuestVarGet(to+"Z")-trQuestVarGet(from+"Z")));</Command>
<Command>	if (trVectorQuestVarGetZ(from) > trVectorQuestVarGetZ(to)) {</Command>
<Command>	    if (trVectorQuestVarGetX(from) > trVectorQuestVarGetX(to)) {</Command>
<Command>			a = a - PI;</Command>
<Command>	    } else {</Command>
<Command>			a = a + PI;</Command>
<Command>	    }</Command>
<Command>  	}</Command>
<Command>  	return(a);</Command>
<Command>}</Command>

<Command>vector zGetUnitVector(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>	vector ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector zGetUnitVector3d(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float ydiff = trQuestVarGet(end + "Y") - trQuestVarGet(start + "Y");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);</Command>
<Command>	vector ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector crossProduct(string a = "", string b = "") {</Command>
<Command>	float x = trQuestVarGet(a + "y") * trQuestVarGet(b + "z") - trQuestVarGet(a + "z") * trQuestVarGet(b + "y");</Command>
<Command>	float y = trQuestVarGet(a + "z") * trQuestVarGet(b + "x") - trQuestVarGet(a + "x") * trQuestVarGet(b + "z");</Command>
<Command>	float z = trQuestVarGet(a + "x") * trQuestVarGet(b + "y") - trQuestVarGet(a + "y") * trQuestVarGet(b + "x");</Command>
<Command>	vector ret = xsVectorSet(x, y, z);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector intersectionWithCircle(string start = "", string end = "", string center = "", float radius = 0) {</Command>
<Command>	trVectorQuestVarSet("iDir", zGetUnitVector(start, end));</Command>
<Command>	float x = 0;</Command>
<Command>	float z = 0;</Command>
<Command>	float dist = 0;</Command>
<Command>	float len = radius * 2;</Command>
<Command>	float lenmod = radius;</Command>
<Command>	for(i=8; >0) {</Command>
<Command>		x = trQuestVarGet(start+"x") + trQuestVarGet("iDirx") * len;</Command>
<Command>		z = trQuestVarGet(start+"z") + trQuestVarGet("iDirz") * len;</Command>
<Command>		dist = xsPow(x - trQuestVarGet(center+"x"), 2) + xsPow(z - trQuestVarGet(center+"z"), 2);</Command>
<Command>		if (dist > radius * radius) {</Command>
<Command>			len = len - lenmod;</Command>
<Command>		} else {</Command>
<Command>			len = len + lenmod;</Command>
<Command>		}</Command>
<Command>		lenmod = lenmod * 0.5;</Command>
<Command>	}</Command>
<Command>	return(xsVectorSet(x,0,z));</Command>
<Command>}</Command>

<Command>void modularCounterInit(string name = "", int size = 0) {</Command>
<Command>	trQuestVarSet("counter" + name + "size", size);</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	trQuestVarSet(name, 1);</Command>
<Command>}</Command>

<Command>int modularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "pointer") > trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	}</Command>
<Command>	trQuestVarCopy(name, "counter" + name + "pointer");</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>}</Command>

<Command>int peekModularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "fake", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "fake") >= trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "fake", 1);</Command>
<Command>	}</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "fake"));</Command>
<Command>}</Command>

<Command>void zBankInit(string name = "", int start = 0, int length = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"start", start);</Command>
<Command>	trQuestVarSet("z"+name+"end", start + length);</Command>
<Command>	trQuestVarSet("z"+name+"pointer", start);</Command>
<Command>	trQuestVarSet(name, start);</Command>
<Command>}</Command>

<Command>int zBankNext(string name = "", bool select = false) {</Command>
<Command>	trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"pointer") + 1);</Command>
<Command>	if (trQuestVarGet("z"+name+"pointer") >= trQuestVarGet("z"+name+"end")) {</Command>
<Command>		trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"start"));</Command>
<Command>	}</Command>
<Command>	trQuestVarCopy(name, "z"+name+"pointer");</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(1*trQuestVarGet(name));</Command>
<Command>	}</Command>
<Command>	return(1*trQuestVarGet(name));</Command>
<Command>}</Command>

<Command>void zSetVar(string name = "", string var = "", float val = 0) {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>void zSetVarByIndex(string name = "", string var = "", int index = 0, float val = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>float zGetVar(string name = "", string var = "") {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>float zGetVarByIndex(string name = "", string var = "", int index = 0) {</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>int zGetBankCount(string name = "") {</Command>
<Command>	return(trQuestVarGet("z"+name+"end") - trQuestVarGet("z"+name+"start"));</Command>
<Command>}</Command>

<Command>void yAddToDatabase(string to = "", string from = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + to + "count");</Command>
<Command>   	trQuestVarSet("zdatalite" + to + "index"+zdatacount, trQuestVarGet(from));</Command>
<Command>   	trQuestVarSet("zdatalite" + to + "count", zdatacount+1);</Command>
<Command>}</Command>

<Command>int yGetDatabaseCount(string db = "") {</Command>
<Command>	return(trQuestVarGet("zdatalite" + db + "count"));</Command>
<Command>}</Command>

<Command>int yDatabaseNext(string db = "", bool select = false) {</Command>
<Command>	for(zdatapointer=0;>1){}</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "pointer")-1);</Command>
<Command>	if (0 > trQuestVarGet("zdatalite" + db + "pointer")) {</Command>
<Command>		trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "count")-1);</Command>
<Command>	}</Command>
<Command>	if (trQuestVarGet("zdatalite" + db + "pointer") >= trQuestVarGet("zdatalite" + db + "count")) {</Command>
<Command>		trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "count")-1);</Command>
<Command>	}</Command>
<Command>	zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet(db, trQuestVarGet("zdatalite" + db + "index"+zdatapointer));</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet(db), true);</Command>
<Command>		return(kbGetBlockID(""+1*trQuestVarGet(db), true));</Command>
<Command>	}</Command>
<Command>	return(trQuestVarGet(db));</Command>
<Command>}</Command>

<Command>void yDatabaseSelectAll(string db = "") {</Command>
<Command>	trUnitSelectClear();</Command>
<Command><![CDATA[	for(zdatapointer=0; <yGetDatabaseCount(db)) {]]></Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("zdatalite"+db+"index"+zdatapointer), true);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool yDatabaseContains(string db = "", int index = 0) {</Command>
<Command>	for (x=yGetDatabaseCount(db) - 1; >=0) {</Command>
<Command>		if (xsRound(trQuestVarGet("zdatalite" + db + "index" + x)) == index) {</Command>
<Command>			trQuestVarSet("zdatalite" + db + "pointer", x);</Command>
<Command>			trQuestVarSet(db, index);</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+index, true);</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(false);</Command>
<Command>}</Command>


<Command>void yDatabasePointerDefault(string db = "") {</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", 0);</Command>
<Command>}</Command>

<Command>void yRemoveFromDatabase(string db = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count") - 1;</Command>
<Command>	int zdataremove = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "index"+zdataremove,</Command>
<Command>		trQuestVarGet("zdatalite" + db + "index"+zdatacount));</Command>
<Command>	trQuestVarSet("zdatalite" + db + "count", zdatacount);</Command>
<Command>}</Command>

<Command>void yRemoveUpdateString(string db = "", string attr = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count");</Command>
<Command>	int zdataremove = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trStringQuestVarSet("zdatalite" + db + "" + zdataremove + "" + attr,</Command>
<Command>		trStringQuestVarGet("zdatalite" + db + "" + zdatacount + "" + attr));</Command>
<Command>	trStringQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, " ");</Command>
<Command>}</Command>

<Command>void yRemoveUpdateVar(string db = "", string attr = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count");</Command>
<Command>	int zdataremove = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdataremove + "" + attr,</Command>
<Command>		trQuestVarGet("zdatalite" + db + "" + zdatacount + "" + attr));</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, 0);</Command>
<Command>}</Command>

<Command>void yTransferUpdateVar(string to = "", string from = "", string attr = "") {</Command>
<Command>	int zdatato = trQuestVarGet("zdatalite" + to + "count") - 1;</Command>
<Command>	int zdatafrom = trQuestVarGet("zdatalite" + from + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + to + ""  + zdatato + "" + attr,</Command>
<Command>		trQuestVarGet("zdatalite" + from + ""  + zdatafrom + "" + attr));</Command>
<Command>}</Command>

<Command>void yTransferUpdateString(string to = "", string from = "", string attr = "") {</Command>
<Command>	int zdatato = trQuestVarGet("zdatalite" + to + "count") - 1;</Command>
<Command>	int zdatafrom = trQuestVarGet("zdatalite" + from + "pointer");</Command>
<Command>	trStringQuestVarSet("zdatalite" + to + ""  + zdatato + "" + attr,</Command>
<Command>		trStringQuestVarGet("zdatalite" + from + ""  + zdatafrom + "" + attr));</Command>
<Command>}</Command>

<Command>void yAddUpdateString(string db = "", string attr = "", string value = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count") - 1;</Command>
<Command>	trStringQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, value);</Command>
<Command>}</Command>

<Command>void yAddUpdateVar(string db = "", string attr = "", float value = 0.0) {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count") - 1;</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, value);</Command>
<Command>}</Command>

<Command>string yGetString(string db = "", string attr = "") {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	return(trStringQuestVarGet("zdatalite" + db + "" + zdatapointer + "" + attr));</Command>
<Command>}</Command>

<Command>float yGetVar(string db = "", string attr = "") {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	return(trQuestVarGet("zdatalite" + db + "" + zdatapointer + "" + attr));</Command>
<Command>}</Command>

<Command>string yGetStringByIndex(string db = "", string attr = "", int index = 0) {</Command>
<Command>	return(trStringQuestVarGet("zdatalite" + db + "" + index + "" + attr));</Command>
<Command>}</Command>

<Command>float yGetVarByIndex(string db = "", string attr = "", int index = 0) {</Command>
<Command>	return(trQuestVarGet("zdatalite" + db + "" + index + "" + attr));</Command>
<Command>}</Command>

<Command>void ySetString(string db = "", string attr = "", string value = "") {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trStringQuestVarSet("zdatalite" + db + "" + zdatapointer + "" + attr, value);</Command>
<Command>}</Command>

<Command>void ySetVar(string db = "", string attr = "", float value = 0.0) {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatapointer + "" + attr, value);</Command>
<Command>}</Command>

<Command>void ySetStringByIndex(string db = "", string attr = "", int index = 0, string value = "") {</Command>
<Command>	trStringQuestVarSet("zdatalite" + db + "" + index + "" + attr, value);</Command>
<Command>}</Command>

<Command>void ySetVarByIndex(string db = "", string attr = "", int index = 0, float value = 0.0) {</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + index + "" + attr, value);</Command>
<Command>}</Command>

<Command>int yGetUnitAtIndex(string db = "", int index = 0) {</Command>
<Command>	return(trQuestVarGet("zdatalite"+db+"index"+index));</Command>
<Command>}</Command>

<Command>int ySetUnitAtIndex(string db = "", int index = 0, int value = 0) {</Command>
<Command>	trQuestVarSet("zdatalite"+db+"index"+index, value);</Command>
<Command>}</Command>

<Command>int yGetPointer(string db = "") {</Command>
<Command>	return(trQuestVarGet("zdatalite"+db+"pointer"));</Command>
<Command>}</Command>

<Command>void ySetPointer(string db = "", int val = 0) {</Command>
<Command>	trQuestVarSet("zdatalite"+db+"pointer", val);</Command>
<Command>	trQuestVarSet(db, trQuestVarGet("zdatalite" + db + "index"+val));</Command>
<Command>}</Command>

<Command>void yClearDatabase(string db = "") {</Command>
<Command>	trQuestVarSet("zdatalite" + db + "count", 0);</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", 0);</Command>
<Command>	trQuestVarSet(db, 0);</Command>
<Command>}</Command>


<Command>int yFindLatestReverse(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {</Command>
<Command>		int i = kbGetBlockID(""+x, true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				trQuestVarSet(qv, x);</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>int yFindLatest(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trQuestVarSet("next",trGetNextUnitScenarioNameNumber() - 1);</Command>
<Command>	while(trQuestVarGet("next") > trQuestVarGet(qv)) {</Command>
<Command>		trQuestVarSet(qv, 1 + trQuestVarGet(qv));</Command>
<Command>		int i = kbGetBlockID(""+1*trQuestVarGet(qv), true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>
<Command>void DeploySober(string p="", string v=""){</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber();</Command>
<Command>	trArmyDispatch("1,10",p,1,trVectorQuestVarGetX(v), trVectorQuestVarGetY(v), trVectorQuestVarGetZ(v),0,true);</Command>
<Command>	trUnitSelectClear();trUnitSelect(""+next, true);</Command>
<Command>	trUnitTeleport(trVectorQuestVarGetX(v),trVectorQuestVarGetY(v),trVectorQuestVarGetZ(v));</Command>
<Command>}</Command>

<Command>void ChatLogShow(int p = 1){</Command>
<Command>	if (trCurrentPlayer() == p) {</Command>
<Command>		trChatHistoryClear();</Command>
<Command>	}</Command>
<Command>	for (i = 10; >0) {</Command>
<Command>		trChatSendToPlayer(0, p, trStringQuestVarGet("chat" + p + "Log" + modularCounterNext("chat"+p+"log")));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void ChatLog(int p = 1, string message = ""){</Command>
<Command>	trStringQuestVarSet("chat" + p + "Log" + modularCounterNext("chat" + p + "Log"), message);</Command>
<Command>	ChatLogShow(p);</Command>
<Command>}</Command>

<Command>bool GetBit(int n=0, int p=0){</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command>		if(i==p){</Command>
<Command>			return (zModulo(2,n)==1);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (false);</Command>
<Command>}</Command>

<Command>int SetBit(int n=0, int p=0){</Command>
<Command>	int r = 0;</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command><![CDATA[		if(zModulo(2,n)==1||i==p){]]></Command>
<Command>			r=r+xsPow(2,i);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (r);</Command>
<Command>}</Command>

<Command>int ClearBit(int n=0, int p=0){</Command>
<Command>	int r = 0;</Command>
<Command><![CDATA[	for(i=0;<30){]]></Command>
<Command><![CDATA[		if(zModulo(2,n)==1&&i!=p){]]></Command>
<Command>			r=r+xsPow(2,i);</Command>
<Command>		}</Command>
<Command>		n=n/2;</Command>
<Command>	}</Command>
<Command>	return (r);</Command>
<Command>}</Command>

<Command>rule initializeEverything</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	// Set idle processing to false so the game doesn't lag from trying to process 128 murmillos</Command>
<Command>	trSetUnitIdleProcessing(false);</Command>
<Command>    trSetObscuredUnits(false);</Command>
<Command>	trSetCivAndCulture(1, 9, 3); // Set P1 to Kronos</Command>
<Command>	trSetCivAndCulture(2, 9, 3); // Set P2 to Kronos</Command>

<Command>	for(p=2; >0) {</Command>
<Command>		modularCounterInit("chat" + p + "Log", 10);</Command>
<Command>	}</Command>

<Command>	Multiplayer = aiIsMultiplayer(); 	// nottud is smart</Command>
<Command><![CDATA[	if(Multiplayer && kbIsPlayerHuman(2) == false){]]></Command>
<Command>		Multiplayer = false; // or kick?</Command>
<Command>	}</Command>
<Command>	if(Multiplayer){</Command>
<Command>		ChatLog(1, "Mode:Multiplayer");</Command>
<Command>		ChatLog(2, "Mode:Multiplayer");</Command>
<Command>	} else {</Command>
<Command>		ChatLog(1, "Mode:Singleplayer");</Command>
<Command>		// Cards will probably be unlocked in order, so I'm assuming the player has not played before if the first value is zero</Command>
<Command>		bool virgin = trGetScenarioUserData(0);</Command>
<Command>		virgin = false; // testing</Command>
<Command>		ChatLog(1, "Checking if played before...");</Command>
<Command><![CDATA[		if(virgin && trQuestVarGet("chad") == 0){]]></Command>
<Command>			xsEnableRule("CinPrologue00");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	modularCounterInit("lightningPop", 40);</Command>
<Command>	modularCounterInit("lightningPush", 40);</Command>
<Command>	modularCounterInit("lightningActivate", 40);</Command>

<Command>	modularCounterInit("spyFind", 40);</Command>
<Command>	modularCounterInit("spyFound", 40);</Command>


<Command>	// Modify vision revealer pop count</Command>
<Command>	trModifyProtounit("Vision Revealer", 1, 6, 9999);</Command>
<Command>	trModifyProtounit("Vision Revealer", 2, 6, 9999);</Command>

<Command>	trModifyProtounit("Vision Revealer", 1, 2, -9999);</Command>
<Command>	trModifyProtounit("Vision Revealer", 2, 2, -9999);</Command>
<Command>	// Modify vision sfx hp</Command>
<Command>	trModifyProtounit("Vision SFX", 1, 0, -9999);</Command>
<Command>	trModifyProtounit("Vision SFX", 2, 0, -9999);</Command>
<Command>	// Modify animal attractor flying</Command>
<Command>	trModifyProtounit("Animal Attractor", 1, 55, 4);</Command>
<Command>	trModifyProtounit("Animal Attractor", 2, 55, 4);</Command>


<Command>	// Disable god powers</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(1, false);</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(2, false);</Command>

<Command>	// omniscience for p0</Command>
<Command>	trTechSetStatus(0, 304, 4);</Command>

<Command>	trPlayerSetDiplomacy(0, 1, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(0, 2, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(1, 0, "Neutral");</Command>
<Command>	trPlayerSetDiplomacy(2, 0, "Neutral");</Command>
<Command>	trPlayerSetDiplomacy(2, 1, "Enemy");</Command>
<Command>	trPlayerSetDiplomacy(1, 2, "Enemy");</Command>

<Command>	xsDisableRule("initializeEverything");</Command>
<Command>}</Command>


<Command>rule PlsStopHardcodingCrapYouNoobs</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 1){</Command>
<Command>      trModifyProtounit("Hero Greek Jason", 1, 27, 4.0);</Command>
<Command>      trModifyProtounit("Hero Greek Jason", 2, 27, 4.0);</Command>
<Command>      trModifyProtounit("Hero Greek Ajax", 1, 27, 3.0);</Command>
<Command>      trModifyProtounit("Hero Greek Ajax", 2, 27, 3.0);</Command>
<Command>      trModifyProtounit("Hero Greek Theseus", 1, 27, 4.0);</Command>
<Command>      trModifyProtounit("Hero Greek Theseus", 2, 27, 4.0);</Command>
<Command>      xsDisableRule("PlsStopHardcodingCrapYouNoobs");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>const int TILE_EMPTY = 0;</Command>
<Command>const int TILE_IMPASSABLE = 1;</Command>
<Command>const int TILE_OCCUPIED = 2;</Command>

<Command>int deployAtTile(int p = 0, string proto = "", int tile = 0) {</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber();</Command>
<Command>	trArmyDispatch("1,10","Dwarf",1,119,0,1,0,true);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+next, true);</Command>
<Command>	trUnitConvert(0);</Command>
<Command>	trImmediateUnitGarrison(""+tile);</Command>
<Command>	trUnitConvert(p);</Command>
<Command>	trUnitChangeProtoUnit(proto);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>	return(next);</Command>
<Command>}</Command>

<Command>void tileGuard(int tile = 0, bool on = true) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=zGetVarByIndex("tiles", "borderCount", tile) - 1; >=0) {</Command>
<Command>		trUnitSelectByID(1*zGetVarByIndex("tiles", "border"+x, tile));</Command>
<Command>	}</Command>
<Command>	if (on) {</Command>
<Command>		trSetSelectedScale(3.1, 0.1, 0.6);</Command>
<Command>	} else {</Command>
<Command>		trSetSelectedScale(3.1, 0.1, 0.2);</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void setupBoard() {</Command>
<Command>	unitTransform("Statue of Automaton Base", "Victory Marker");</Command>

<Command>	trQuestVarSet("borders", trQuestVarGet("zbordersend") - 2);</Command>
<Command>	bool allborders = false;</Command>
<Command>	int count = 0;</Command>
<Command>	int statue = kbGetProtoUnitID("Statue of Automaton Base");</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		trVectorSetUnitPos("currentPos", "tiles", false);</Command>
<Command>		if (allborders == false) {</Command>
<Command>			for(y=6; >0) {</Command>
<Command>				zBankNext("borders");</Command>
<Command>				yAddToDatabase("borderSearch", "borders");</Command>
<Command>				if (trQuestVarGet("borders") == trQuestVarGet("zbordersend") - 2) {</Command>
<Command>					allborders = true;</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>


<Command>		// Assigning neighbors to the tile</Command>
<Command>		for (y=yGetDatabaseCount("neighbors"); >0) {</Command>
<Command>			yDatabaseNext("neighbors");</Command>
<Command>			if (zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors")) == 6) {</Command>
<Command>				yRemoveFromDatabase("neighbors");</Command>
<Command>			} else {</Command>
<Command>				// Tiles have radius 3 and are 6 units apart.</Command>
<Command>				// Add this tile to the neighborlist of adjacent tiles and add adjacent neighbors to this tile's neighborlist</Command>
<Command><![CDATA[				if (zDistanceToVectorSquared("neighbors", "currentPos") < 40) {]]></Command>
<Command>					count = zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"));</Command>
<Command>					zSetVarByIndex("tiles", "neighbor"+count, 1*trQuestVarGet("neighbors"), trQuestVarGet("tiles"));</Command>
<Command>					zSetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"), count + 1);</Command>

<Command>					count = zGetVar("tiles", "neighborCount");</Command>
<Command>					zSetVar("tiles", "neighbor"+count, trQuestVarGet("neighbors"));</Command>
<Command>					zSetVar("tiles", "neighborCount", count + 1);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yAddToDatabase("neighbors", "tiles");</Command>

<Command>		// Assigning borders to the tile</Command>
<Command>		for (y=yGetDatabaseCount("borderSearch"); >0) {</Command>
<Command>			yDatabaseNext("borderSearch");</Command>
<Command>			if (yGetVar("borderSearch", "count") == 2) {</Command>
<Command>				yRemoveFromDatabase("borderSearch");</Command>
<Command>				yRemoveUpdateVar("borderSearch", "count");</Command>
<Command>			} else {</Command>
<Command><![CDATA[				if (zDistanceToVectorSquared("borderSearch", "currentPos") < 10) {]]></Command>
<Command>					count = zGetVar("tiles", "borderCount");</Command>
<Command>					zSetVar("tiles", "border"+count, trQuestVarGet("borderSearch"));</Command>
<Command>					zSetVar("tiles", "borderCount", count + 1);</Command>
<Command>					ySetVar("borderSearch", "count", yGetVar("borderSearch", "count") + 1);</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelectByID(1*trQuestVarGet("borderSearch"));</Command>
<Command>					trMutateSelected(statue);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		zBankNext("tiles");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>int findNearestTile(string v = "") {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command><![CDATA[		if (zDistanceToVectorSquared("tiles", v) < 9) {]]></Command>
<Command>			return(1*trQuestVarGet("tiles"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>void findAvailableTiles(int id = 0, int distance = 1, string db = "", bool ghost = false) {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command>		zSetVar("tiles", "searched", 0);</Command>
<Command>	}</Command>
<Command>	int push = 0;</Command>
<Command>	int pop = -1;</Command>
<Command>	int tile = 0;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	trQuestVarSet("search"+push+"tile", id);</Command>
<Command>	trQuestVarSet("search"+push+"distance", distance);</Command>
<Command><![CDATA[	while (pop < push) {]]></Command>
<Command>		pop = pop + 1;</Command>
<Command>		tile = trQuestVarGet("search"+pop+"tile");</Command>
<Command>		// Add it to the db if it is not occupied</Command>
<Command><![CDATA[		if (zGetVarByIndex("tiles", "occupied", tile) < TILE_OCCUPIED) {]]></Command>
<Command>			yAddToDatabase(db, "search"+pop+"tile");</Command>
<Command>		}</Command>
<Command>		// Search neighbors</Command>
<Command>		if (trQuestVarGet("search"+pop+"distance") > 0) {</Command>
<Command><![CDATA[			for (x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>				neighbor = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>				if (zGetVarByIndex("tiles", "searched", neighbor) == 0) {</Command>
<Command>					zSetVarByIndex("tiles", "searched", neighbor, 1);</Command>
<Command>					// Add to fringe if it can be moved through.</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "occupied", neighbor) == TILE_EMPTY || ghost) {]]></Command>
<Command>						push = push + 1;</Command>
<Command>						trQuestVarSet("search"+push+"tile", neighbor);</Command>
<Command>						trQuestVarSet("search"+push+"distance", trQuestVarGet("search"+pop+"distance") - 1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void highlightTile(int tile = 0, float duration = 0.1) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command><![CDATA[	for (x=0; < zGetVarByIndex("tiles", "borderCount", tile)) {]]></Command>
<Command>		trUnitSelectByID(zGetVarByIndex("tiles", "border"+x, tile));</Command>
<Command>	}</Command>
<Command>	trUnitHighlight(duration, false);</Command>
<Command>}</Command>

<Command>rule initializeBoard</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("dimension") <= 1) {]]></Command>
<Command>		trQuestVarSetFromRand("dimension", 6, 8, true);</Command>
<Command>	}</Command>
<Command>	int tiles = 1 + 3 * (xsPow(trQuestVarGet("dimension"), 2) - trQuestVarGet("dimension"));</Command>
<Command>	// Number of tiles in a hexagonal grid of X*X*X dimensions:</Command>
<Command>	// 3*(X^2-X) + 1</Command>
<Command>	zBankInit("tiles", 128, tiles);</Command>
<Command>	zBankInit("borders", 297, 552);</Command>

<Command>	setupBoard();</Command>
<Command>	trQuestVarSet("p1startPosx", 60.0 - 4.24 * (trQuestVarGet("dimension") - 1));</Command>
<Command>	trQuestVarCopy("p1startPosz", "p1startposx");</Command>
<Command>	// Since p2 goes second, they start one tile closer to the center</Command>
<Command>	trQuestVarSet("p2startPosx", 60.0 + 4.24 * (trQuestVarGet("dimension") - 2));</Command>
<Command>	trQuestVarCopy("p2startposz", "p2startposx");</Command>

<Command>	trQuestVarSet("p1startTile", findNearestTile("p1StartPos"));</Command>
<Command>	trQuestVarSet("p2startTile", findNearestTile("p2StartPos"));</Command>

<Command>	trModifyProtounit("Revealer", 0, 2, 6 * trQuestVarGet("dimension") - 6);</Command>
<Command>	trModifyProtounit("Revealer to Player", 1, 2, 6);</Command>
<Command>	trModifyProtounit("Revealer to Player", 2, 2, 6);</Command>

<Command>	xsDisableRule("initializeBoard");</Command>
<Command>}</Command>
<Command>void MusicHigh(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\8_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\9_out\music.mp3", "29", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\23_out\music 2.mp3", "30", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\8_in\music.mp3", "56", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicMedium(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\05_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\31_out\music.mp3", "34", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\22_in\music 2.mp3", "14", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\7_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicLow(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\26_out\music.mp3", "37", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\21_in\music.mp3", "51", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\04_in\music 1.mp3", "13", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("cinematics\26_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue00</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trChangeTerrainHeight(0, 0, 60, 60, 0, false);</Command>
<Command>	trPaintTerrain(0, 0, 60, 60, 5, 4, false); //Black</Command>
<Command>	trPaintTerrain(30, 30, 60, 60, 0, 9, false); //GaiaCreepASnow</Command>
<Command>    trPaintTerrain(0, 30, 30, 60, 0, 5, false); //CliffGreekB</Command>
<Command>    trLetterBox(true);</Command>
<Command>    trSoundPlayDialog("default", "1", -1, false, " :It was a fine day for Rogers.", "");</Command>
<Command>    trUIFadeToColor(0,0,0,1000,1000,false);</Command>
<Command>	trCameraCut(vector(-21.635717,32.595444,96.573792), vector(0.707104,-0.707109,-0.001133),</Command>
<Command>		vector(0.707104,0.707109,-0.001133), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>    trSetFogAndBlackmap(false, false);</Command>
<Command>    trQuestVarSet("idsStart", trGetNextUnitScenarioNameNumber());</Command>
<Command>    trArmyDispatch("1,10", "Hero Greek Jason", 1, -0.19, 0.00, 97.42, 0, true);</Command>
<Command>	unitTransform("Hero Birth","Cinematic Block");</Command>
<Command>    trArmySelect("1,10");</Command>
<Command>    trUnitMoveToPoint(24.06, 0.00, 97.19, -1, false);</Command>
<Command>    trQuestVarSet("otherRogers", trGetNextUnitScenarioNameNumber());</Command>
<Command>    trArmyDispatch("1,10", "Hero Greek Jason", 1, 73.67, 0.00, 105.90, 270, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 71.27, -0.00, 109.91, 47, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 77.61, 0.00, 102.63, 333, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 72.03, 0.00, 101.51, 111, true);</Command>
<Command>    trArmyDispatch("1,10", "Skeleton", 1, 78.01, 0.00, 109.91, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 70.03, 0.00, 101.93, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 74.71, 0.00, 109.70, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 77.57, 0.00, 103.82, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 11.34, 0.00, 104.54, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 15.13, 0.00, 82.10, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 7.41, 0.00, 86.42, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 7.99, 0.00, 93.50, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 9.34, 0.00, 108.28, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 17.80, 0.00, 103.35, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 25.46, -0.00, 107.95, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 32.37, 0.00, 113.47, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 45.28, 0.00, 108.99, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 48.73, 0.00, 90.59, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 30.57, 0.00, 92.07, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 34.31, 0.00, 95.09, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.62, 0.00, 94.96, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 29.75, 0.00, 107.86, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.11, 0.00, 107.56, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 18.63, 0.00, 91.59, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rain", 1, 32.11, 0.00, 91.33, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rain", 1, 42.46, 0.00, 95.41, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Gate", 1, 119.84, 0.00, 100.72, 270, true);</Command>
<Command>    trArmySelect("1,10");</Command>
<Command>    trSetSelectedScale(2.5, 1.5, 2.5);</Command>
<Command>    trTechSetStatus(1, 413, 4);</Command>
<Command>    MusicLow();</Command>
<Command>    xsDisableRule("CinPrologue00");</Command>
<Command>	xsEnableRule("CinPrologue01");</Command>
<Command>}</Command>

<Command>rule CinPrologue01</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :He finished work and was heading home feeling good.", "");</Command>
<Command>      trRenderSky(true, "SkyBlue");</Command>
<Command>      xsDisableRule("CinPrologue01");</Command>
<Command>	  xsEnableRule("CinPrologue02");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue02</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :However fate was about to intervene...", "");</Command>
<Command>      trCameraCut(vector(115.395638,-62.376621,13.212063), vector(-0.913248,0.407394,0.002918),</Command>
<Command>      	vector(0.407396,0.913250,-0.001302), vector(0.003194,0.000000,0.999995));</Command>
<Command>      trSoundPlayFN("lightthunder.wav", "14", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue02");</Command>
<Command>	  xsEnableRule("CinPrologue03");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue03</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trFadeOutAllSounds(0.0);</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike2.wav", "2", -1, "","");</Command>
<Command>      trRenderSky(true, "SkyStormy");</Command>
<Command>      trSoundPlayFN("lightningbirth.wav", "4", -1, "","");</Command>
<Command>	  MusicHigh();</Command>
<Command>      xsDisableRule("CinPrologue03");</Command>
<Command>	  xsEnableRule("CinPrologue04");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue04</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trCameraCut(vector(15.341919,89.480629,24.112017), vector(0.000398,-1.000000,-0.000003),</Command>
<Command>      	vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(23.99, 0.00, 34.41));</Command>
<Command><![CDATA[	  for(x=0;<20){]]></Command>
<Command>		  trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V"),trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")-1));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command><![CDATA[	  for(x=0;<12){]]></Command>
<Command>		  trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")-0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")+0.75));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command><![CDATA[	  for(x=0;<12){]]></Command>
<Command>		  trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")-0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")-0.75));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command>      trSoundPlayFN("lightningstrike1.wav", "2", -1, "","");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trOverlayText("Zenophobia presents...", 4.0, -1, -1, -1);</Command>
<Command>      trSoundPlayFN("godpower.wav", "6", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue04");</Command>
<Command>	  xsEnableRule("CinPrologue05");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue05</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :Spooked by the sudden storm, Rogers picked up the pace!", "");</Command>
<Command>      trCameraCut(vector(34.321800,34.885281,60.436821), vector(0.004775,-0.665678,0.746224),</Command>
<Command>      	vector(0.004259,0.746244,0.665658), vector(0.999979,0.000000,-0.006399));</Command>
<Command>	  trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>	  trUnitMoveToPoint(58.63, 0.00, 101.83, -1, false);</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue05");</Command>
<Command>	  xsEnableRule("CinPrologue06");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue06</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :Inevitably, he stumbled and fell.", "");</Command>
<Command>      trUnitSelectClear();</Command>
<Command>      trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>      trDamageUnitPercent(100);</Command>
<Command>	  trUnitSetAnimation("default",false,-1);</Command>
<Command>      xsDisableRule("CinPrologue06");</Command>
<Command>	  xsEnableRule("CinPrologue07");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue07</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike4.wav", "5", -1, "","");</Command>
<Command>      trSoundPlayFN("vortexstart.wav", "3", -1, "","");</Command>
<Command>      trCameraCut(vector(16.595451,124.640816,14.744846), vector(0.000398,-1.000000,-0.000003),</Command>
<Command>      	vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>      trOverlayText("...in collaboration with Nickonhawk...", 4.0, 450, 600, 1000);</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(7.98, 0.00, 2.24));</Command>
<Command>	  string n = "Curse SFX";</Command>
<Command>	  string g = "Increase Prosperity Small";</Command>
<Command><![CDATA[	  for(z=0;<26){]]></Command>
<Command><![CDATA[		  for(x=0;<24){]]></Command>
<Command>			  string p = "";</Command>
<Command><![CDATA[			  if(z==0 && x>14 && x<17){p=n;}]]></Command>
<Command><![CDATA[			  if(z==1 && (x>3 && x<6 || x>11 && x<19)){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==2 && x<19){ if(x>14){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==3 && x<19){ if(x>11 && x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==4){ if(x>10 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==5){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==6){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==7 && x<22){ if(x>8&&x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==8 && x<19 && x!=12){ if(x>12){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==9 && x<19 && x!=12 && x!=13){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==10 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==11 && x>0 && x<15){p=n;}]]></Command>
<Command><![CDATA[			  if(z==12 && x>0 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==13 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==14 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==15 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==16 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==17 && x<13){p=n;}]]></Command>
<Command><![CDATA[			  if(z==18 && x<15){p=n;}]]></Command>
<Command><![CDATA[			  if(z==19 && x<17){p=n;}]]></Command>
<Command><![CDATA[			  if(z==20 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==21 && x>2 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==22 && x>4 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==23 && x>14 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==24 && x>14 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==25 && x>14 && x<17){p=n;}]]></Command>
<Command>			  if(p!=""){</Command>
<Command>				  trArmyDispatch("1,10",p,1,trVectorQuestVarGetX("V")+x,0,trVectorQuestVarGetZ("V")+z,0,true);</Command>
<Command>			}</Command>
<Command>		}}</Command>
<Command>      xsDisableRule("CinPrologue07");</Command>
<Command>	  xsEnableRule("CinPrologue08");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue08</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,true);</Command>
<Command>      trFadeOutAllSounds(3.0);</Command>
<Command>      trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(74.62, 0.00, 119.92));</Command>
<Command>      trVectorQuestVarSet("U", trVectorQuestVarGet("V"));</Command>
<Command>      trVectorQuestVarSet("U", xsVectorSet(trVectorQuestVarGetX("U"),trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U") - 28));</Command>
<Command><![CDATA[	  for(x=0;<18){]]></Command>
<Command>		  trVectorQuestVarSet("V",xsVectorSet(trVectorQuestVarGetX("V")+8,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")));</Command>
<Command>		  trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("V"),trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V"),270,true);</Command>
<Command>		  trVectorQuestVarSet("U",xsVectorSet(trVectorQuestVarGetX("U")+8,trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U")));</Command>
<Command>		  trArmyDispatch("1,10","Dwarf",1,trVectorQuestVarGetX("U"),trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U"),90,true);</Command>
<Command>	  }</Command>
<Command>      unitTransform("Dwarf","Palace");</Command>
<Command>      xsDisableRule("CinPrologue08");</Command>
<Command>	  xsEnableRule("CinPrologue09");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue09</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 2){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : When Rogers woke up, he found himself in a different place.", "");</Command>
<Command>      trUIFadeToColor(255,255,255,2000,0,false);</Command>
<Command>      trSoundPlayFN("visionswoosh.wav", "4", -1, "","");</Command>
<Command>      trSoundPlayFN("skypassageout.wav", "1", -1, "","");</Command>
<Command>	  trCameraCut(vector(54.713875,7.545822,105.967346), vector(0.930725,-0.365716,-0.001491),</Command>
<Command>	  	vector(0.365710,0.930729,-0.000586), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>      xsDisableRule("CinPrologue09");</Command>
<Command>	  xsEnableRule("CinPrologue10");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue10</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      unitTransform("Mist Olympus","Cinematic Block");</Command>
<Command>	  trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("otherRogers"));</Command>
<Command>	  trUnitMoveToPoint(75, 0.00, 104.7, -1, false);</Command>
<Command>      trCamTrackLoad("Prologue");</Command>
<Command>      trCamTrackPlay(-1, -1);</Command>
<Command>      xsDisableRule("CinPrologue10");</Command>
<Command>	  xsEnableRule("CinPrologue11");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue11</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>	  trOverlayText("G A M E S   O F   H E A V E N", 4.7, 500, 200, 1000);</Command>
<Command>      trSoundPlayFN("xsentinelbirth.wav", "3", -1, "","");</Command>
<Command>      trSoundPlayFN("cinematics\32_in\music.mp3", "15", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue11");</Command>
<Command>	  xsEnableRule("CinPrologue12");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue12</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 7){</Command>
<Command>      trPaintTerrain(0, 0, 100, 100, 5, 4, false); //Black</Command>
<Command>	  int next = trGetNextUnitScenarioNameNumber();</Command>
<Command><![CDATA[	  for(i=trQuestVarGet("idsStart");<next){]]></Command>
<Command>		  trUnitSelectClear();trUnitSelect(""+i);</Command>
<Command>		  trUnitDestroy();</Command>
<Command>	  }</Command>
<Command>      trLetterBox(false);</Command>
<Command>      xsDisableRule("CinPrologue12");</Command>
<Command>   }</Command>
<Command>}</Command>
<Command>const int RIGHT_CLICK = 2;</Command>
<Command>const int LEFT_CLICK = 1;</Command>

<Command>rule detectClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	for (p=2; >0) {</Command>
<Command>		if (trPlayerGetPopulation(p) > 9000) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			yFindLatestReverse("vision"+p, "Vision Revealer", p);</Command>
<Command>			trVectorSetUnitPos("p"+p+"clickPos", "vision"+p, true);</Command>
<Command>			trQuestVarSet("p"+p+"click", RIGHT_CLICK);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			trTechGodPower(p, "Vision", 1);</Command>
<Command>			ChatLogShow(1);</Command>
<Command>			ChatLogShow(2);</Command>
<Command>		} else if (trPlayerUnitCountSpecific(p, "Animal Attractor") >= 1) {</Command>
<Command>			yFindLatest("magnet"+p, "Animal Attractor", p);</Command>
<Command>			trVectorSetUnitPos("p"+p+"clickPos", "magnet"+p, true);</Command>
<Command>			trQuestVarSet("p"+p+"click", LEFT_CLICK);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			trTechGodPower(p, "Animal magnetism", 1);</Command>
<Command>			ChatLogShow(1);</Command>
<Command>			ChatLogShow(2);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	trTechGodPower(1, "Animal magnetism", 1);</Command>
<Command>	trTechGodPower(2, "Animal magnetism", 1);</Command>
<Command>	trTechGodPower(1, "Vision", 1);</Command>
<Command>	trTechGodPower(2, "Vision", 1);</Command>
<Command>	map("mouse1down", "game", "uiSetSpecialPower(227) uiSpecialPowerAtPointer");</Command>
<Command>	map("mouse2up", "game", "uiSetSpecialPower(220) uiSpecialPowerAtPointer");</Command>
<Command>	map("mouse2doubleup", "game", "uiSetSpecialPower(220) uiSpecialPowerAtPointer");</Command>
<Command>	map("mouse2doubleup", "game", "uiSetSpecialPower(220) uiSpecialPowerAtPointer");</Command>
<Command>	map("space", "game", "uiSetSpecialPower(156) uiSpecialPowerAtPointer");</Command>
<Command>	xsDisableRule("initializeClick");</Command>
<Command>}</Command>

<Command>void ThrowError(string message = "Zeno you made bug again!"){</Command>
<Command>	trShowWinLose(message, "xpack\xtaunts\en\999 theme.mp3");</Command>
<Command>}</Command>


<Command>const int SPELL_NONE = 0;</Command>
<Command>const int SPELL_COMMANDER = 1; // Since the "spell" variable is unused on normal minions, we use it here to mark a unit as the Commander</Command>

<Command>const int SPELL_SPARK = 2;</Command>
<Command>const int SPELL_FOOD = 3;</Command>
<Command>const int SPELL_SING = 4;</Command>


<Command>const int ATTACK_DRAW_CARD = 0;</Command>
<Command>const int ATTACK_STUN_TARGET = 1;</Command>
<Command>const int ATTACK_GET_WINDSONG = 2;</Command>
<Command>const int ATTACK_BLOCK_DEATH = 3;</Command>

<Command>const int ATTACK_EVENT_COUNT = 4;</Command>

<Command>const int PLAY_FOOD = 0;</Command>
<Command>const int PLAY_GET_TRAP = 1;</Command>
<Command>const int PLAY_GET_SPARK = 2;</Command>
<Command>const int PLAY_DOUBLEBLADE = 3;</Command>
<Command>const int PLAY_LEGENDARY = 4;</Command>

<Command>const int PLAY_EVENT_COUNT = 5;</Command>

<Command>const int DEATH_DRAW_CARD = 0;</Command>
<Command>const int DEATH_OPPONENT_DRAW_CARD = 1;</Command>
<Command>const int DEATH_BOOM_SMALL = 2;</Command>
<Command>const int DEATH_BOOM_MEDIUM = 3;</Command>
<Command>const int DEATH_BOOM_BIG = 4;</Command>

<Command>const int DEATH_EVENT_COUNT = 5;</Command>

<Command>const int CHARGE = 0;			// Action is ready when summoned</Command>
<Command>const int GUARD = 1;			// If an adjacent ally is attacked, swap spaces with it before combat occurs.</Command>
<Command>const int AIRDROP = 2;			// Doesn't have to be summoned next to the commander.</Command>
<Command>const int FURIOUS = 3;			// Two attacks each turn.</Command>
<Command>const int LIGHTNING = 4;		// Attack will chain through connected enemies.</Command>
<Command>const int REGENERATE = 5;		// Restores to full health at the start of your turn.</Command>
<Command>const int DEADLY = 6;</Command>
<Command>const int ETHEREAL = 7;			// Can pass through units and impassable terrain.</Command>
<Command>const int ARMORED = 8;			// Unit regenerates to full health after combat</Command>
<Command>const int WARD = 9;				// Unit is immune to spells</Command>
<Command>const int BEACON = 10;			// Allies can be summoned next to this unit.</Command>
<Command>const int AMBUSH = 11;			// When initiating combat, unit attacks first.</Command>
<Command>const int FLEETING = 12; 		// The card is discarded from hand at the end of the turn.</Command>

<Command>const int NUM_KEYWORDS = 13;</Command>


<Command>string GetKeywordName(int bitPosition=0){</Command>
<Command>	switch(bitPosition){</Command>
<Command>		case CHARGE: return ("Charge");</Command>
<Command>		case GUARD: return ("Guard");</Command>
<Command>		case AIRDROP: return ("Airdrop");</Command>
<Command>		case FURIOUS: return ("Furious");</Command>
<Command>		case LIGHTNING: return ("Lightning");</Command>
<Command>		case REGENERATE: return ("Regenerate");</Command>
<Command>		case DEADLY: return ("Deadly");</Command>
<Command>		case ETHEREAL: return ("Pathfinder");</Command>
<Command>		case ARMORED: return ("Armored");</Command>
<Command>		case WARD: return ("Ward");</Command>
<Command>		case BEACON: return ("Beacon");</Command>
<Command>		case AMBUSH: return ("Ambush");</Command>
<Command>		case FLEETING: return ("Fleeting");</Command>
<Command>	}</Command>
<Command>	ThrowError("Invalid keyword id. Method: GetKeywordName");</Command>
<Command>	return ("");</Command>
<Command>}</Command>

<Command>int Keyword(int bitPos = 0) {</Command>
<Command>	return(1*xsPow(2, bitPos));</Command>
<Command>}</Command>


<Command>bool HasKeyword(int key = 0, int keywords = 0) {</Command>
<Command>	return(GetBit(keywords, key));</Command>
<Command>}</Command>

<Command>void displayCardKeywordsAndDescription(string db = "", int index = 0) {</Command>
<Command>	string bonus = " ";</Command>
<Command>	string dialog = "";</Command>
<Command>	string message = "";</Command>
<Command>	int proto = yGetVarByIndex(db, "proto", index);</Command>
<Command>	int keywords = yGetVarByIndex(db, "keywords", index);</Command>
<Command>	bool multiple = false;</Command>
<Command>	if (yGetVarByIndex(db, "stunTime", index) > 0) {</Command>
<Command>		dialog = "Stunned";</Command>
<Command>		multiple = true;</Command>
<Command>	}</Command>
<Command>	if(keywords>0){</Command>
<Command>		int current = xsPow(2, NUM_KEYWORDS - 1);</Command>
<Command>		for(k=NUM_KEYWORDS - 1; >=0){</Command>
<Command>			if (keywords >= current) {</Command>
<Command>				if(multiple){</Command>
<Command>					dialog = dialog + ", ";</Command>
<Command>				}</Command>
<Command>				multiple = true;</Command>
<Command>				dialog = dialog + GetKeywordName(k);</Command>
<Command>				keywords = keywords - current;</Command>
<Command>			}</Command>
<Command>			current = current / 2;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	message = yGetStringByIndex(db, "ability", index);</Command>

<Command>	int old = xsGetContextPlayer();</Command>
<Command><![CDATA[	if (yGetVarByIndex(db, "spell", index) <= SPELL_COMMANDER) {]]></Command>
<Command>		gadgetUnreal("DetailedHelpButton");</Command>
<Command>		if(HasKeyword(ARMORED, keywords)){</Command>
<Command>			gadgetUnreal("NormalArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-normalArmor");</Command>
<Command>		}</Command>
<Command>		if(HasKeyword(WARD, keywords)){</Command>
<Command>			gadgetUnreal("PierceArmorTextDisplay");</Command>
<Command>		} else {</Command>
<Command>			gadgetUnreal("unitStatPanel-stat-pierceArmor");</Command>
<Command>		}</Command>

<Command>		xsSetContextPlayer(1*yGetVarByIndex(db, "player", index));</Command>
<Command>		int diff = 1*yGetVarByIndex(db, "health", index) - kbUnitGetCurrentHitpoints(kbGetBlockID(""+1*yGetUnitAtIndex(db, index), true));</Command>
<Command>		if (diff > 0) {</Command>
<Command>			bonus = bonus + "HP +" + diff;</Command>
<Command>		}</Command>

<Command>		diff = yGetVarByIndex(db, "attack", index) - trQuestVarGet("card_" + proto + "_Attack");</Command>
<Command>		if (diff > 0) {</Command>
<Command>			bonus = bonus + " ATK +" + diff;</Command>
<Command><![CDATA[		} else if (diff < 0) {]]></Command>
<Command>			bonus = bonus + " ATK " + diff;</Command>
<Command>		}</Command>

<Command>		diff = yGetVarByIndex(db, "speed", index) - trQuestVarGet("card_" + proto + "_Speed");</Command>
<Command>		if (diff > 0) {</Command>
<Command>			bonus = bonus + " SPD +" + diff;</Command>
<Command><![CDATA[		} else if (diff < 0) {]]></Command>
<Command>			bonus = bonus + " SPD " + diff;</Command>
<Command>		}</Command>
<Command>	}</Command>


<Command>	trSoundPlayDialog("default", "1", -1, false, bonus + ": " + dialog, "");</Command>
<Command>	trSetCounterDisplay(message);</Command>

<Command>	xsSetContextPlayer(old);</Command>
<Command>}</Command>

<Command>void SpellSetup(string name = "", int cost = 0, int spell = 0) {</Command>
<Command>	trStringQuestVarSet("spell_"+spell+"_name", name);</Command>
<Command>	trQuestVarSet("spell_"+spell+"_cost", cost);</Command>
<Command>}</Command>

<Command>void CardEvents(string protoName = "", int onPlay = 0, int onAttack = 0, int onDeath = 0, string ability="") {</Command>
<Command>	int proto = kbGetProtoUnitID(protoName);</Command>
<Command>	trQuestVarSet("card_" + proto + "_OnPlay",onPlay);</Command>
<Command>	trQuestVarSet("card_" + proto + "_OnAttack",onAttack);</Command>
<Command>	trQuestVarSet("card_" + proto + "_OnDeath",onDeath);</Command>
<Command>	trStringQuestVarSet("card_" + proto + "_Ability",ability);</Command>
<Command>}</Command>

<Command>void CardSetup(string protoName="", int cost=1, string name="", int attack=1, int health=1, int speed=1, int range=0, int keywords=0){</Command>
<Command>	int proto = kbGetProtoUnitID(protoName);</Command>
<Command><![CDATA[	if(proto<0){]]></Command>
<Command>		ThrowError("That's not a unit. Method: CardSetup");</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("cardProtos_" + 1*trQuestVarGet("cardProtosIndex"), proto);</Command>
<Command>	trQuestVarSet("cardProtosIndex", trQuestVarGet("cardProtosIndex") + 1);</Command>
<Command>	trStringQuestVarSet("card_" + proto + "_Name",name);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Cost",cost);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Attack",attack);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Health",health);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Speed",speed);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Range",range);</Command>
<Command>	trQuestVarSet("card_" + proto + "_Keywords",keywords);</Command>

<Command><![CDATA[	for(p=1;<cNumberPlayers){]]></Command>
<Command>		trModifyProtounit(protoName, p, 16, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 16, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 16, 0); // Cost Gold</Command>
<Command>		trModifyProtounit(protoName, p, 17, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 17, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 17, 0); // Cost Wood</Command>
<Command>		trModifyProtounit(protoName, p, 18, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 18, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 18, 0); // Cost Food</Command>
<Command>		trModifyProtounit(protoName, p, 19, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 19, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 19, cost); // Cost Favor</Command>
<Command>		if(range==1){</Command>
<Command>			trModifyProtounit(protoName, p, 27, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 27, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 27, attack); // Hand Attack Hack</Command>
<Command>			trModifyProtounit(protoName, p, 28, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 28, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 28, 0); // Hand Attack Pierce</Command>
<Command>			trModifyProtounit(protoName, p, 29, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 29, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 29, 0); // Hand Attack Crush</Command>
<Command>		} else {</Command>
<Command>			trModifyProtounit(protoName, p, 30, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 30, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 30, 0); // Ranged Attack Hack</Command>
<Command>			trModifyProtounit(protoName, p, 31, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 31, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 31, attack); // Ranged Attack Pierce</Command>
<Command>			trModifyProtounit(protoName, p, 32, 9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 32, -9999999999999999999.0);</Command>
<Command>			trModifyProtounit(protoName, p, 32, 0); // Ranged Attack Crush</Command>
<Command>		}</Command>
<Command>		trModifyProtounit(protoName, p, 0, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 0, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 0, health); // Hitpoints</Command>

<Command>		trModifyProtounit(protoName, p, 11, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 11, -9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 11, range); // Range</Command>

<Command>		trModifyProtounit(protoName, p, 1, 10); // Just give everything +10 speed</Command>

<Command>		// 0 LOS</Command>
<Command>		trModifyProtounit(protoName, p, 2, 9999999999999999999.0);</Command>
<Command>		trModifyProtounit(protoName, p, 2, -9999999999999999999.0);</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void CardLoad(bool firstBit = false, bool secondBit = false, int index = 0){</Command>
<Command>	int copies = 0;</Command>
<Command>	if(firstBit){</Command>
<Command>		if(secondBit){</Command>
<Command>			copies = 3;</Command>
<Command>		} else {</Command>
<Command>			copies = 1;</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		if(secondBit){</Command>
<Command>			copies = 2;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if(copies>0){</Command>
<Command>		trChatSend(0, "Player has " + copies + " copies of " + trStringQuestVarGet("card_" + 1*trQuestVarGet("cardProtos_"+index) + "_Name"));</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeCards</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command><![CDATA[	for(p=1;<cNumberPlayers){]]></Command>
<Command>		trForbidProtounit(p, "Archer Atlantean Hero");</Command>
<Command>		trForbidProtounit(p, "Javelin Cavalry Hero");</Command>
<Command>		trForbidProtounit(p, "Lancer Hero");</Command>
<Command>		trForbidProtounit(p, "Maceman Hero");</Command>
<Command>		trForbidProtounit(p, "Oracle Hero");</Command>
<Command>		trForbidProtounit(p, "Royal Guard Hero");</Command>
<Command>		trForbidProtounit(p, "Swordsman Hero");</Command>
<Command>		trForbidProtounit(p, "Trident Soldier Hero");</Command>
<Command>		trForbidProtounit(p, "Villager Atlantean Hero");</Command>
<Command>		trForbidProtounit(p, "Settlement Level 1");</Command>
<Command>		trForbidProtounit(p, "Guild");</Command>
<Command>		trForbidProtounit(p, "Manor");</Command>
<Command>		trForbidProtounit(p, "Dock");</Command>
<Command>		trForbidProtounit(p, "Wall Connector");</Command>
<Command>		trForbidProtounit(p, "Temple");</Command>
<Command>	}</Command>

<Command>	//Pick a card. Any card.</Command>
<Command>	CardSetup("Statue of Lightning",	0, "Spell",				0, 1, 0, 0);</Command>
<Command>	CardSetup("Hero Greek Jason",		0, "phdorogers4", 		2, 20, 2, 1, Keyword(BEACON) + Keyword(ETHEREAL));</Command>

<Command>	CardSetup("Swordsman", 				1, "New Recruit", 		1, 3, 2, 1, Keyword(ETHEREAL));</Command>
<Command>	CardSetup("Petrobolos",				1, "Bear Trap",			1, 1, 0, 1, Keyword(AIRDROP) + Keyword(GUARD));</Command>
<Command>	CardSetup("Khopesh", 				2, "Thief", 			1, 2, 2, 1);</Command>
<Command>	CardSetup("Maceman", 				2, "School Guard",		2, 3, 2, 1, Keyword(GUARD));</Command>
<Command>	CardSetup("Skraeling", 				2, "Trapper", 			1, 2, 2, 1);</Command>
<Command>	CardSetup("Slinger", 				2, "Apprentice", 		1, 1, 2, 2);</Command>
<Command>	CardSetup("Toxotes", 				2, "Sharpshooter",	 	2, 2, 2, 2);</Command>
<Command>	CardSetup("Villager Atlantean",		2, "Traveling Chef",	1, 3, 2, 1);</Command>
<Command>	CardSetup("Hero Greek Ajax", 		3, "Party Leader", 		3, 4, 2, 1, Keyword(ETHEREAL));</Command>
<Command>	CardSetup("Raiding Cavalry",		3, "Reckless Rider", 	3, 2, 3, 1, Keyword(AMBUSH));</Command>
<Command>	CardSetup("Trident Soldier",		4, "Shieldbearer", 		2, 7, 1, 1, Keyword(GUARD));</Command>
<Command>	CardSetup("Jarl", 					4, "Wanderer", 			1, 3, 3, 1, Keyword(DEADLY));</Command>
<Command>	CardSetup("Behemoth", 				5, "Behemoth", 			2, 4, 1, 1, Keyword(ARMORED));</Command>
<Command>	CardSetup("Avenger", 				6, "Doubleblade", 		5, 5, 2, 1, Keyword(AIRDROP));</Command>
<Command>	CardSetup("Archer Atlantean Hero", 	7, "Ace", 				4, 2, 2, 2, Keyword(FURIOUS) + Keyword(AMBUSH) + Keyword(CHARGE));</Command>

<Command>	CardSetup("Scout",					1, "Sameday Courier", 	2, 1, 4, 1); // Death: Opponent draws a card.</Command>
<Command>	CardSetup("Prodromos",				3, "Loot'n Horse", 		2, 2, 3, 1); // Death: Draw a card.</Command>
<Command>	CardSetup("Promethean Small",		2, "Boom Goblin", 		1, 2, 1, 1); // Death: Deal 2 Damage in 1 Range.</Command>
<Command>	CardSetup("Promethean",				4, "Boom Goblin Champ", 2, 4, 1, 1); // Death: Deal 4 Damage in 1 Range and 2 Damage in 2 Range.</Command>
<Command>	CardSetup("Hero Greek Chiron",		8, "Donut", 			3, 6, 3, 2); // Death: 6 Dmg 1 Rng, 4 Dmg 2 Rng, 2 Dmg 3 Rng and make tile Impassable.</Command>
<Command>	CardSetup("Hero Greek Theseus", 	4, "Silent Paladin", 	4, 6, 2, 1); // Minions I kill don't trigger their Death effect.</Command>

<Command>	CardEvents("Hero Greek Jason", 0, Keyword(ATTACK_GET_WINDSONG), 0, "Attack: Add a Windsong to your hand. Discard it when turn ends.");</Command>
<Command>	CardEvents("Khopesh", 0, Keyword(ATTACK_DRAW_CARD), 0, "Attack: Draw a card.");</Command>
<Command>	CardEvents("Skraeling", Keyword(PLAY_GET_TRAP), 0, 0, "Play: Add a Bear Trap to your hand.");</Command>
<Command>	CardEvents("Slinger", Keyword(PLAY_GET_SPARK), 0, 0, "Play: Add a Spark to your hand.");</Command>
<Command>	CardEvents("Avenger", Keyword(PLAY_DOUBLEBLADE), 0, 0, "Play: Deal 1 damage to all adjacent enemies.");</Command>
<Command>	CardEvents("Villager Atlantean", Keyword(PLAY_FOOD), 0, 0, "Play: Grant an allied minion +1 attack and health.");</Command>
<Command>	CardEvents("Petrobolos", 0, Keyword(ATTACK_STUN_TARGET), 0, "Attack: Stun my target.");</Command>
<Command>	CardEvents("Archer Atlantean Hero", Keyword(PLAY_LEGENDARY), 0, 0);</Command>
<Command>	CardEvents("Scout", 0, 0, Keyword(DEATH_OPPONENT_DRAW_CARD), "Death: Opponent draws a card.");</Command>
<Command>	CardEvents("Prodromos", 0, 0, Keyword(DEATH_DRAW_CARD), "Death: Draw a card.");</Command>
<Command>	CardEvents("Promethean Small", 0, 0, Keyword(DEATH_BOOM_SMALL), "Death: Deal 2 Damage in 1 Range.");</Command>
<Command>	CardEvents("Promethean", 0, 0, Keyword(DEATH_BOOM_MEDIUM), "Death: Deal 4 Damage in 1 Range and 2 Damage in 2 Range.");</Command>
<Command>	CardEvents("Hero Greek Chiron", 0, 0, Keyword(DEATH_BOOM_BIG), "Death: 6 Dmg 1 Rng, 4 Dmg 2 Rng, 2 Dmg 3 Rng and make tile Impassable.");</Command>
<Command>	CardEvents("Hero Greek Theseus", 0, Keyword(ATTACK_BLOCK_DEATH), 0, "Minions I kill don't trigger their Death effect.");</Command>
<Command>	SpellSetup("Spark", 1, SPELL_SPARK);</Command>
<Command>	SpellSetup("Windsong", 2, SPELL_SING);</Command>




<Command>	//Loading player collection</Command>
<Command>	int cardIndex = 0;</Command>
<Command><![CDATA[	for(i=0;<16){]]></Command>
<Command>		int n = trGetScenarioUserData(i);</Command>
<Command><![CDATA[		CardLoad((n<0), (zModulo(2,n)==1), cardIndex);]]></Command>
<Command>		n=n/2;</Command>
<Command>		cardIndex = cardIndex + 1;</Command>
<Command>		int j=1;</Command>
<Command><![CDATA[		while(j<29){]]></Command>
<Command>			bool firstBit = (zModulo(2,n)==1);</Command>
<Command>			n=n/2;</Command>
<Command>			bool secondBit = (zModulo(2,n)==1);</Command>
<Command>			n=n/2;</Command>
<Command>			CardLoad(firstBit, secondBit, cardIndex);</Command>
<Command>			cardIndex = cardIndex + 1;</Command>
<Command>			j=j+2;</Command>
<Command>		}</Command>
<Command>	}</Command>


<Command>	xsDisableRule("initializeCards");</Command>
<Command>}</Command>

<Command>const int ACTION_READY = 0;</Command>
<Command>const int ACTION_MOVED = 1;</Command>
<Command>const int ACTION_DONE = 2;</Command>
<Command>const int ACTION_FURY = 3;</Command>
<Command>const int ACTION_SLEEPING = 4;</Command>
<Command>const int ACTION_STUNNED = 5;</Command>

<Command>const int ATTACK_START = 0;</Command>
<Command>const int ATTACK_ANIMATE = 1;</Command>
<Command>const int ATTACK_DONE = 2;</Command>




<Command>void updateMana() {</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	trCounterAbort("mana");</Command>
<Command>	trCounterAddTime("mana", -1, -91,</Command>
<Command><![CDATA[			"<color={Playercolor("+p+")}>Mana: "+1*trQuestVarGet("p"+p+"mana") + "/" + 1*trQuestVarGet("maxMana"),-1);]]></Command>
<Command>}</Command>


<Command>void refreshGuardAll() {</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		if (HasKeyword(GUARD, 1*yGetVar("allUnits", "keywords"))) {</Command>
<Command>			tileGuard(1*yGetVar("allUnits", "tile"), true);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void removeUnit(string db = "allUnits") {</Command>
<Command>	yRemoveFromDatabase(db);</Command>
<Command>	yRemoveUpdateString(db, "ability");</Command>
<Command>	yRemoveUpdateVar(db, "cost");</Command>
<Command>	yRemoveUpdateVar(db, "pos");</Command>
<Command>	yRemoveUpdateVar(db, "health");</Command>
<Command>	yRemoveUpdateVar(db, "attack");</Command>
<Command>	yRemoveUpdateVar(db, "range");</Command>
<Command>	yRemoveUpdateVar(db, "speed");</Command>
<Command>	yRemoveUpdateVar(db, "proto");</Command>
<Command>	yRemoveUpdateVar(db, "player");</Command>
<Command>	yRemoveUpdateVar(db, "ready");</Command>
<Command>	yRemoveUpdateVar(db, "keywords");</Command>
<Command>	yRemoveUpdateVar(db, "tile");</Command>
<Command>	yRemoveUpdateVar(db, "spell");</Command>
<Command>	yRemoveUpdateVar(db, "action");</Command>
<Command>	yRemoveUpdateVar(db, "onPlay");</Command>
<Command>	yRemoveUpdateVar(db, "onAttack");</Command>
<Command>	yRemoveUpdateVar(db, "onDeath");</Command>
<Command>	yRemoveUpdateVar(db, "stunTime");</Command>
<Command>	yRemoveUpdateVar(db, "stunSFX");</Command>
<Command>	yRemoveUpdateVar(db, "stunIndex");</Command>
<Command>}</Command>

<Command>void transferUnit(string to = "", string from = "") {</Command>
<Command>	yAddToDatabase(to, from);</Command>
<Command>	yTransferUpdateString(to, from, "ability");</Command>
<Command>	yTransferUpdateVar(to, from, "cost");</Command>
<Command>	yTransferUpdateVar(to, from, "pos");</Command>
<Command>	yTransferUpdateVar(to, from, "health");</Command>
<Command>	yTransferUpdateVar(to, from, "attack");</Command>
<Command>	yTransferUpdateVar(to, from, "range");</Command>
<Command>	yTransferUpdateVar(to, from, "speed");</Command>
<Command>	yTransferUpdateVar(to, from, "proto");</Command>
<Command>	yTransferUpdateVar(to, from, "player");</Command>
<Command>	yTransferUpdateVar(to, from, "ready");</Command>
<Command>	yTransferUpdateVar(to, from, "keywords");</Command>
<Command>	yTransferUpdateVar(to, from, "tile");</Command>
<Command>	yTransferUpdateVar(to, from, "spell");</Command>
<Command>	yTransferUpdateVar(to, from, "action");</Command>
<Command>	yTransferUpdateVar(to, from, "onPlay");</Command>
<Command>	yTransferUpdateVar(to, from, "onAttack");</Command>
<Command>	yTransferUpdateVar(to, from, "onDeath");</Command>
<Command>	yTransferUpdateVar(to, from, "stunTime");</Command>
<Command>	yTransferUpdateVar(to, from, "stunSFX");</Command>
<Command>	yTransferUpdateVar(to, from, "stunIndex");</Command>
<Command>}</Command>



<Command>void teleportToTile(string db = "", int tile = 0, int index = -1) {</Command>
<Command>	int p = yGetVar(db, "player");</Command>
<Command>	if (index == -1) {</Command>
<Command>		index = yGetPointer(db);</Command>
<Command>	}</Command>

<Command>	if (HasKeyword(GUARD, 1*yGetVarByIndex(db, "keywords", index))) {</Command>
<Command>		if (yGetVarByIndex(db, "tile", index) > 0) {</Command>
<Command>			tileGuard(1*yGetVarByIndex(db, "tile", index), false);</Command>
<Command>		}</Command>
<Command>		tileGuard(tile, true);</Command>
<Command>	}</Command>


<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trUnitConvert(p);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*yGetUnitAtIndex(db, index), true);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Dwarf"));</Command>
<Command>	trImmediateUnitGarrison(""+tile);</Command>
<Command>	trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVarByIndex(db, "proto", index)));</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(tile);</Command>
<Command>	trUnitConvert(0);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>	ySetVarByIndex(db, "tile", index, tile);</Command>
<Command>}</Command>




<Command>int findNearestUnit(string qv = "", float radius = 1) {</Command>
<Command>	int id = 0;</Command>
<Command>	for (x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		id = yDatabaseNext("allUnits", true);</Command>
<Command>		if (id == -1) {</Command>
<Command>			removeUnit();</Command>
<Command>		} else {</Command>
<Command><![CDATA[			if (zDistanceToVectorSquared("allUnits", qv) < radius) {]]></Command>
<Command>				return(yGetPointer("allUnits"));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>




<Command>void highlightReachable(int index = 0) {</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetUnitAtIndex("allUnits", index), true));</Command>
<Command>	int tile = findNearestTile("pos");</Command>
<Command>	findAvailableTiles(tile, yGetVarByIndex("allUnits", "speed", index),</Command>
<Command>		"reachable", HasKeyword(ETHEREAL, 1*yGetVarByIndex("allUnits", "keywords", index)));</Command>
<Command>	for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>		tile = yDatabaseNext("reachable");</Command>
<Command>		highlightTile(tile, 3600);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void highlightReady(float duration = 0.1) {</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[		if (yGetVar("allUnits", "action") == ACTION_READY && yGetVar("allUnits", "player") == p) {]]></Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				trUnitHighlight(duration, false);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void findTargets(int index = 0, string db = "") {</Command>
<Command>	float dist = xsPow(yGetVarByIndex("allUnits", "range", index) * 6 + 1, 2);</Command>
<Command>	int p = 3 - yGetVarByIndex("allUnits", "player", index);</Command>
<Command>	trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetUnitAtIndex("allUnits", index), true));</Command>
<Command>	for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		if (yGetVar("allUnits", "player") == p) {</Command>
<Command><![CDATA[			if (zDistanceToVectorSquared("allUnits", "pos") < dist) {]]></Command>
<Command>				yAddToDatabase(db, "allUnits");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void damageUnit(string db = "", int index = 0, float dmg = 0) {</Command>
<Command>	xsSetContextPlayer(1*yGetVarByIndex(db, "player", index));</Command>
<Command>	float health = kbUnitGetCurrentHitpoints(kbGetBlockID(""+1*yGetUnitAtIndex(db, index), true));</Command>
<Command>	ySetVarByIndex(db, "health", index, 1*yGetVarByIndex(db, "health", index) - dmg);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*yGetUnitAtIndex(db, index), true);</Command>
<Command>	trDamageUnit(health - yGetVarByIndex(db, "health", index));</Command>
<Command>}</Command>

<Command>void lightning(int index = 0, int damage = 0, bool deadly = false) {</Command>
<Command>	trQuestVarSetFromRand("rand", 1, 5, true);</Command>
<Command>	trSoundPlayFN("lightningstrike"+1*trQuestVarGet("rand")+".wav","1",-1,"","");</Command>
<Command>	int p = yGetVarByIndex("allUnits", "player", index);</Command>
<Command>	yClearDatabase("lightningTargets");</Command>
<Command>	for (x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits");</Command>
<Command>		if (yGetVar("allUnits", "player") == p) {</Command>
<Command>			trQuestVarSet("allUnitsIndex", yGetPointer("allUnits"));</Command>
<Command>			if ((trQuestVarGet("allUnitsIndex") == index) == false) {</Command>
<Command>				yAddToDatabase("lightningTargets", "allUnitsIndex");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if (deadly) {</Command>
<Command>		damage = -1;</Command>
<Command>	}</Command>
<Command>	// find lightning chain</Command>
<Command>	int pop = -1;</Command>
<Command>	int push = modularCounterNext("lightningPush");</Command>
<Command>	trQuestVarSet("lightning" + push, index);</Command>
<Command>	trQuestVarSet("lightning" + push + "damage", damage);</Command>
<Command>	while ((pop == push) == false) {</Command>
<Command>		pop = modularCounterNext("lightningPop");</Command>
<Command>		trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVarByIndex("allUnits", "tile", 1*trQuestVarGet("lightning" + pop))));</Command>
<Command>		for (x=yGetDatabaseCount("lightningTargets"); >0) {</Command>
<Command>			yDatabaseNext("lightningTargets");</Command>
<Command>			trQuestVarSet("lightningTargetUnit", yGetUnitAtIndex("allUnits", 1*trQuestVarGet("lightningTargets")));</Command>
<Command><![CDATA[			if (zDistanceToVectorSquared("lightningTargetUnit", "pos") <= 64) {]]></Command>
<Command>				push = modularCounterNext("lightningPush");</Command>
<Command>				trQuestVarCopy("lightning" + push, "lightningTargets");</Command>
<Command>				trQuestVarSet("lightning"+push+"damage", damage);</Command>
<Command>				yRemoveFromDatabase("lightningTargets");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void startAttack(int attacker = 0, int target = 0, bool first = false, bool animate = true) {</Command>
<Command>	string db = "attacks";</Command>
<Command>	if (first) {</Command>
<Command>		db = "ambushAttacks";</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("temp", attacker);</Command>
<Command>	yAddToDatabase(db, "temp");</Command>
<Command>	yAddUpdateVar(db, "target", target);</Command>
<Command>	if (animate) {</Command>
<Command>		yAddUpdateVar(db, "phase", ATTACK_START);</Command>
<Command>	} else {</Command>
<Command>		yAddUpdateVar(db, "phase", ATTACK_DONE);</Command>
<Command>	}</Command>
<Command>}</Command>



<Command>bool spyReady() {</Command>
<Command>	return(trQuestVarGet("spyFind") == trQuestVarGet("spyFound"));</Command>
<Command>}</Command>


<Command>int spyEffect(string proto = "") {</Command>
<Command>	int x = modularCounterNext("spyFind");</Command>
<Command>	trQuestVarSet("spyEye"+x+"proto", kbGetProtoUnitID(proto));</Command>
<Command>	trTechInvokeGodPower(0, "spy", xsVectorSet(1,1,1), xsVectorSet(1,1,1));</Command>
<Command>	return(x);</Command>
<Command>}</Command>

<Command>rule spy_find</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if (spyReady() == false) {</Command>
<Command>		while (yFindLatest("spyEye", "Spy Eye", 0) >= 0) {</Command>
<Command>			int x = modularCounterNext("spyFound");</Command>
<Command>			trQuestVarCopy("spyEye"+x, "spyEye");</Command>
<Command>			trMutateSelected(1*trQuestVarGet("spyEye"+x+"proto"));</Command>
<Command>			trQuestVarSet("spyTimeout", 0);</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("spyTimeout", trQuestVarGet("spyTimeout") + 1);</Command>
<Command>		if (trQuestVarGet("spyTimeout") >= 5) {</Command>
<Command>			trQuestVarCopy("spyFound", "spyFind");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void stunUnit(int index = 0) {</Command>
<Command>	if (yGetVarByIndex("allUnits", "health", index) > 0) {</Command>
<Command>		ySetVarByIndex("allUnits", "stunTime", index, 2);</Command>
<Command>		ySetVarByIndex("allUnits", "action", index, ACTION_STUNNED);</Command>
<Command>		if (yGetVarByIndex("allUnits", "stunSFX", index) == 0) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*yGetUnitAtIndex("allUnits", index), true);</Command>
<Command>			ySetVarByIndex("allUnits", "stunIndex", index, spyEffect("Shockwave stun effect"));</Command>
<Command>			xsEnableRule("spy_assign_new");</Command>
<Command>		} else {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*yGetVarByIndex("allUnits", "stunSFX", index), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Shockwave stun effect"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule spy_assign_new</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (spyReady())	{</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command><![CDATA[			if ((yGetVar("allUnits", "stunSFX") == 0) && (yGetVar("allUnits", "stunIndex") > 0)) {]]></Command>
<Command>				ySetVar("allUnits", "stunSFX", trQuestVarGet("spyEye"+1*yGetVar("allUnits", "stunIndex")));</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spy_assign_new");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void shuffleDeck(int p = 0) {</Command>
<Command>	int i = 0;</Command>
<Command>	for(x=yGetDatabaseCount("p"+p+"deck")-1; >=0) {</Command>
<Command>		trQuestVarSetFromRand("pos", 0, x, true);</Command>
<Command>		i = trQuestVarGet("pos");</Command>
<Command>		trQuestVarSet("tempProto", yGetUnitAtIndex("p"+p+"deck", i));</Command>
<Command>		trQuestVarSet("tempSpell", yGetVarByIndex("p"+p+"deck", "spell", i));</Command>

<Command>		ySetUnitAtIndex("p"+p+"deck", i, yGetUnitAtIndex("p"+p+"deck", x));</Command>
<Command>		ySetVarByIndex("p"+p+"deck", "spell", i, yGetVarByIndex("p"+p+"deck", "spell", x));</Command>

<Command>		ySetUnitAtIndex("p"+p+"deck", x, 1*trQuestVarGet("tempProto"));</Command>
<Command>		ySetVarByIndex("p"+p+"deck", "spell", x, trQuestVarGet("tempSpell"));</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void updateHandPlayable(int p = 0) {</Command>
<Command>	for(x=zGetBankCount("p"+p+"handPos"); >0) {</Command>
<Command>		zBankNext("p"+p+"handPos", true);</Command>
<Command>		trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>	}</Command>
<Command>	for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>		yDatabaseNext("p"+p+"hand");</Command>
<Command><![CDATA[		if (yGetVar("p"+p+"hand", "cost") <= trQuestVarGet("p"+p+"mana")) {]]></Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void addCardToDeck(int p = 0, string proto = "", int spell = 0) {</Command>
<Command>	if (spell == 0) {</Command>
<Command>		trQuestVarSet("proto", kbGetProtoUnitID(proto));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", 0);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("proto", kbGetProtoUnitID("Statue of Lightning"));</Command>
<Command>		yAddToDatabase("p"+p+"deck", "proto");</Command>
<Command>		yAddUpdateVar("p"+p+"deck", "spell", spell);</Command>
<Command>	}</Command>
<Command>}</Command>



<Command>void addCardToHand(int p = 0, int proto = 0, int spell = 0, bool fleeting = false) {</Command>
<Command>	trQuestVarSet("next", trGetNextUnitScenarioNameNumber());</Command>
<Command>	trArmyDispatch("1,10","Dwarf",1,trQuestVarGet("p"+p+"deckx"),0,trQuestVarGet("p"+p+"deckz"),0,true);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>	trUnitConvert(p);</Command>

<Command>	yAddToDatabase("p"+p+"hand", "next");</Command>
<Command><![CDATA[	if (spell == 0 || spell == SPELL_COMMANDER) {]]></Command>
<Command><![CDATA[		trUnitChangeName("("+1*trQuestVarGet("card_" + proto + "_Cost")+") "+trStringQuestVarGet("card_" + proto + "_Name")+" <"+1*trQuestVarGet("card_" + proto + "_Speed")+">");]]></Command>
<Command>		yAddUpdateVar("p"+p+"hand", "stunIndex", 0);</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "stunSFX", 0);</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "attack", trQuestVarGet("card_" + proto + "_Attack"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "health", trQuestVarGet("card_" + proto + "_Health"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "speed", trQuestVarGet("card_" + proto + "_Speed"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "range", trQuestVarGet("card_" + proto + "_Range"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "cost", trQuestVarGet("card_" + proto + "_Cost"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "keywords", trQuestVarGet("card_" + proto + "_Keywords"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "onPlay", trQuestVarGet("card_" + proto + "_OnPlay"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "onAttack", trQuestVarGet("card_" + proto + "_OnAttack"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "onDeath", trQuestVarGet("card_" + proto + "_OnDeath"));</Command>
<Command>		yAddUpdateString("p"+p+"hand", "ability", trStringQuestVarGet("card_" + proto + "_Ability"));</Command>
<Command>	} else {</Command>
<Command>		trUnitChangeName("("+1*trQuestVarGet("spell_" + spell + "_Cost")+") "+trStringQuestVarGet("spell_" + spell + "_Name"));</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "cost", trQuestVarGet("spell_" + spell + "_Cost"));</Command>
<Command>		proto = kbGetProtoUnitID("Statue of Lightning");</Command>
<Command>	}</Command>
<Command>	trUnitHighlight(3, true);</Command>

<Command>	if (fleeting) {</Command>
<Command>		yAddUpdateVar("p"+p+"hand", "keywords", SetBit(1*trQuestVarGet("card_" + proto + "_Keywords"), FLEETING));</Command>
<Command>	}</Command>

<Command>	yAddUpdateVar("p"+p+"hand", "proto", proto);</Command>



<Command>	yAddUpdateVar("p"+p+"hand", "player", p);</Command>
<Command>	yAddUpdateVar("p"+p+"hand", "spell", spell);</Command>

<Command>	// Find an empty position in the hand to place the unit.</Command>
<Command>	for(x=zGetBankCount("p"+p+"handPos"); >0) {</Command>
<Command>		if (trCountUnitsInArea(""+zBankNext("p"+p+"handPos"),p,"Unit",2) == 0) {</Command>
<Command>			yAddUpdateVar("p"+p+"hand", "pos", trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*trQuestVarGet("next"), true);</Command>
<Command>			trImmediateUnitGarrison(""+1*trQuestVarGet("p"+p+"handPos"));</Command>

<Command>			trUnitChangeProtoUnit(kbGetProtoUnitName(proto));</Command>


<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("p"+p+"handPos"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>			break;</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>void drawCard(int p = 0) {</Command>
<Command>	int proto = yDatabaseNext("p"+p+"deck");</Command>
<Command><![CDATA[	if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>			ChatLog(p, "Drew " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		} else {</Command>
<Command>			ChatLog(p, "Drew " + trStringQuestVarGet("spell_" + 1*yGetVar("p"+p+"deck", "spell") + "_Name"));</Command>
<Command>		}</Command>
<Command>		addCardToHand(p, proto, yGetVar("p"+p+"deck", "spell"));</Command>
<Command>	} else {</Command>
<Command>		if (trCurrentPlayer() == p) {</Command>
<Command>			trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		if (yGetVar("p"+p+"deck", "spell") == 0) {</Command>
<Command>			ChatLog(p, "Hand full! Burned " + trStringQuestVarGet("card_" + proto + "_Name"));</Command>
<Command>		} else {</Command>
<Command>			ChatLog(p, "Hand full! Burned " + trStringQuestVarGet("spell_" + 1*yGetVar("p"+p+"deck", "spell") + "_Name"));</Command>
<Command>		}</Command>

<Command>	}</Command>
<Command>	yRemoveFromDatabase("p"+p+"deck");</Command>
<Command>	yRemoveUpdateVar("p"+p+"deck", "spell");</Command>

<Command>	updateHandPlayable(p);</Command>
<Command>}</Command>


<Command>rule initializeHand</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	zBankInit("p1handPos", 849, 10);</Command>
<Command>	zBankInit("p2handPos", 859, 10);</Command>

<Command>	trVectorQuestVarSet("p1deck", xsVectorSet(1,0,1));</Command>
<Command>	trVectorQuestVarSet("p2deck", xsVectorSet(119,0,119));</Command>

<Command>	xsDisableRule("initializeHand");</Command>
<Command>}</Command>


<Command>rule card_draw</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	// We want to give the trCountUnitsInArea some time to update</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		if (trQuestVarGet("p"+p+"drawCards") > 0) {</Command>
<Command>			trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") - 1);</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>bool OnDeath(int event = -1){</Command>
<Command>	int savePointer = yGetPointer("allUnits");</Command>
<Command>	int p = yGetVar("allUnits", "player");</Command>
<Command>	bool checkAgain = false;</Command>
<Command>	switch(event)</Command>
<Command>	{</Command>
<Command>		case DEATH_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case DEATH_OPPONENT_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(3-p);</Command>
<Command>		}</Command>
<Command>		case DEATH_BOOM_SMALL:</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("allUnits", "tile")));</Command>
<Command>			yDatabasePointerDefault("allUnits");</Command>
<Command>			for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (zDistanceToVectorSquared("allUnits", "pos") > 2) { // yGetVar("allUnits", "player") == 3 - p</Command>
<Command><![CDATA[					if (zDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 2);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Ball of Fire impact", 1*yGetVar("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("meteorsmallhit.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case DEATH_BOOM_MEDIUM:</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Meteor", 1*yGetVar("allUnits", "tile"));</Command>
<Command>			deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("allUnits", "tile")));</Command>
<Command>			yDatabasePointerDefault("allUnits");</Command>
<Command>			for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (zDistanceToVectorSquared("allUnits", "pos") > 2) { // yGetVar("allUnits", "player") == 3 - p</Command>
<Command><![CDATA[					if (zDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 4);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command><![CDATA[					} else if (zDistanceToVectorSquared("allUnits", "pos") < 196) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 2);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Ball of Fire impact", 1*yGetVar("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("meteordustcloud.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case DEATH_BOOM_BIG:</Command>
<Command>		{</Command>
<Command>			deployAtTile(0, "Meteor", 1*yGetVar("allUnits", "tile"));</Command>
<Command>			deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command>			zSetVarByIndex("tiles", "occupied", 1*yGetVar("allUnits", "tile"), TILE_IMPASSABLE);</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVar("allUnits", "tile")));</Command>
<Command>			yDatabasePointerDefault("allUnits");</Command>
<Command>			for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (zDistanceToVectorSquared("allUnits", "pos") > 2) { // yGetVar("allUnits", "player") == 3 - p</Command>
<Command><![CDATA[					if (zDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 6);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command><![CDATA[					} else if (zDistanceToVectorSquared("allUnits", "pos") < 196) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 4);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Meteor Impact Ground", 1*yGetVar("allUnits", "tile"));</Command>
<Command><![CDATA[					} else if (zDistanceToVectorSquared("allUnits", "pos") < 400) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 2);</Command>
<Command>						checkAgain = true;</Command>
<Command>						deployAtTile(0, "Ball of Fire impact", 1*yGetVar("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("implodeexplode.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("meteorbighit.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("meteordustcloud.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	ySetPointer("allUnits", savePointer);</Command>
<Command>	return (checkAgain);</Command>
<Command>}</Command>

<Command>void removeDeadUnits() {</Command>
<Command>	bool checkAgain = true;</Command>
<Command>	while(checkAgain){</Command>
<Command>		checkAgain = false;</Command>
<Command>		yDatabasePointerDefault("allUnits");</Command>
<Command>		for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command><![CDATA[			if (yGetVar("allUnits", "health") <= 0 && yGetVar("allUnits", "OnDeath") > 0) {]]></Command>
<Command>				int events = 1*yGetVar("allUnits", "OnDeath");</Command>
<Command>				ySetVar("allUnits", "OnDeath", 0);</Command>
<Command>				int n = 1*xsPow(2, DEATH_EVENT_COUNT - 1);</Command>
<Command>				for(x=DEATH_EVENT_COUNT - 1; >=0) {</Command>
<Command>					if (events >= n) {</Command>
<Command><![CDATA[						checkAgain = OnDeath(x) || checkAgain;]]></Command>
<Command>						events = events - n;</Command>
<Command>					}</Command>
<Command>					n = n / 2;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	yDatabasePointerDefault("allUnits");</Command>
<Command>	for(y=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>		yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[		if (yGetVar("allUnits", "health") <= 0 && yGetVar("allUnits", "health") > -9000) {]]></Command>
<Command>			int tile = yGetVar("allUnits", "tile");</Command>
<Command>			zSetVarByIndex("tiles", "occupied", tile, xsMax(TILE_EMPTY, zGetVarByIndex("tiles", "terrain", tile)));</Command>
<Command>			trDamageUnitPercent(100);</Command>
<Command>			if (HasKeyword(GUARD, 1*yGetVar("allUnits", "keywords"))) {</Command>
<Command>				tileGuard(tile, false);</Command>
<Command>			}</Command>
<Command>			ySetVar("allUnits", "health", -9999);</Command>
<Command>			removeUnit("allUnits");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>const int CAST_UNIT = 0;</Command>
<Command>const int CAST_TARGET = 1;</Command>
<Command>const int CAST_SING = 2;</Command>

<Command>const int CAST_TILE = 10;</Command>
<Command>const int CAST_DIRECTION = 11;</Command>

<Command>const int CASTING_NOTHING = 0;</Command>
<Command>const int CASTING_IN_PROGRESS = 1;</Command>
<Command>const int CASTING_DONE = 2;</Command>
<Command>const int CASTING_CANCEL = 3;</Command>


<Command>void castReset() {</Command>
<Command>	trQuestVarSet("castPush", 0);</Command>
<Command>	trQuestVarSet("castPop", 0);</Command>
<Command>	trQuestVarSet("castDone", CASTING_NOTHING);</Command>
<Command>}</Command>


<Command>void castAddUnit(string qv = "", int p = 0, bool commander = true) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	if (commander) {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_COMMANDER);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"commander", SPELL_NONE);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("cast"+x+"type", CAST_UNIT);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddSing(string qv = "", int p = 0) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_SING);</Command>
<Command>	trQuestVarSet("cast"+x+"player", p);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddTile(string qv = "", bool ghost = false) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_TILE);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>	if (ghost) {</Command>
<Command>		trQuestVarSet("cast"+x+"terrain", 0);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"terrain", 1);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void castAddTarget(string qv = "", string attacker = "") {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_TARGET);</Command>
<Command>	trStringQuestVarSet("cast"+x+"start", attacker);</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>}</Command>

<Command>void castAddDirection(string qv = "", string start = "", bool unit = false) {</Command>
<Command>	trQuestVarSet("castPush", trQuestVarGet("castPush") + 1);</Command>
<Command>	int x = trQuestVarGet("castPush");</Command>

<Command>	trQuestVarSet("cast"+x+"type", CAST_DIRECTION);</Command>
<Command>	if (unit) {</Command>
<Command>		trQuestVarSet("cast"+x+"unit", 1);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("cast"+x+"unit", 0);</Command>
<Command>	}</Command>
<Command>	trStringQuestVarSet("cast"+x+"qv", qv);</Command>
<Command>	trStringQuestVarSet("cast"+x+"start", start);</Command>
<Command>}</Command>

<Command>void castStart() {</Command>
<Command>	trQuestVarSet("castDone", CASTING_IN_PROGRESS);</Command>
<Command>	xsEnableRule("spellcast_00_process");</Command>
<Command>}</Command>

<Command>void castEnd() {</Command>
<Command>	removeDeadUnits();</Command>
<Command>	refreshGuardAll();</Command>
<Command>	xsEnableRule("gameplay_01_select");</Command>
<Command>	highlightReady(999999);</Command>

<Command>	if (trQuestVarGet("selectedCard") >= 0) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*yGetUnitAtIndex("p"+p+"hand", 1*trQuestVarGet("selectedCard")), true);</Command>
<Command>		trUnitChangeProtoUnit("Hero Death");</Command>
<Command>		trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") - yGetVarByIndex("p"+p+"hand", "cost", 1*trQuestVarGet("selectedCard")));</Command>
<Command>		updateMana();</Command>
<Command>		ySetPointer("p"+p+"hand", 1*trQuestVarGet("selectedCard"));</Command>
<Command>		removeUnit("p"+p+"hand");</Command>

<Command>		updateHandPlayable(p);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("castDone", CASTING_NOTHING);</Command>
<Command>}</Command>


<Command>rule spellcast_00_process</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("castPop") < trQuestVarGet("castPush")) {]]></Command>
<Command>		trQuestVarSet("castPop", trQuestVarGet("castPop") + 1);</Command>
<Command>		int x = trQuestVarGet("castPop");</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		yClearDatabase("castTargets");</Command>
<Command>		yClearDatabase("castTiles");</Command>
<Command>		switch(1*trQuestVarGet("cast"+x+"type"))</Command>
<Command>		{</Command>
<Command>			case CAST_UNIT:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((yGetVar("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if (yGetVar("allUnits", "spell") <= trQuestVarGet("cast"+x+"commander")) {]]></Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>							trQuestVarSet("allUnitsIndex", yGetPointer("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnitsIndex");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_SING:</Command>
<Command>			{</Command>
<Command>				p = trQuestVarGet("cast"+x+"player");</Command>
<Command>				for(z=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>					yDatabaseNext("allUnits");</Command>
<Command><![CDATA[					if ((yGetVar("allUnits", "player") == p) || (p == 0)) {]]></Command>
<Command><![CDATA[						if ((yGetVar("allUnits", "action") >= ACTION_DONE) && (yGetVar("allUnits", "action") < ACTION_SLEEPING)) {]]></Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>							trQuestVarSet("allUnitsIndex", yGetPointer("allUnits"));</Command>
<Command>							yAddToDatabase("castTargets", "allUnitsIndex");</Command>
<Command>							if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>								trUnitHighlight(999999, false);</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_TILE:</Command>
<Command>			{</Command>
<Command>				for (z=zGetBankCount("tiles"); >0) {</Command>
<Command>					zBankNext("tiles");</Command>
<Command>					if (zGetVar("tiles", "terrain") * trQuestVarGet("cast"+x+"terrain") == 0) {</Command>
<Command>						yAddToDatabase("castTiles", "tiles");</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("tiles"), 999999);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_TARGET:</Command>
<Command>			{</Command>
<Command>				findTargets(1*trQuestVarGet(trStringQuestVarGet("cast"+x+"start")), "castTargets");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				yDatabaseSelectAll("castTargets");</Command>
<Command>				if (trCurrentPlayer() == p) {</Command>
<Command>					trUnitHighlight(999999, false);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case CAST_DIRECTION:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("cast"+x+"unit") == 1) {</Command>
<Command>					trQuestVarSet("start", yGetVarByIndex("allUnits", "tile", 1*trQuestVarGet(trStringQuestVarGet("cast"+x+"start"))));</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("start", trQuestVarGet(trStringQuestVarGet("cast"+x+"start")));</Command>
<Command>				}</Command>
<Command>				float angle = 0.785398;</Command>
<Command>				trVectorSetUnitPos("pos", "start");</Command>
<Command>				bool found = true;</Command>
<Command>				int tile = 0;</Command>
<Command>				// For each direction...</Command>
<Command>				for(d=6; >0) {</Command>
<Command>					trVectorSetFromAngle("step", angle);</Command>
<Command>					trVectorScale("step", 6.0);</Command>
<Command>					trQuestVarSet("posx", trQuestVarGet("posx") + trQuestVarGet("stepx"));</Command>
<Command>					trQuestVarSet("posz", trQuestVarGet("posx") + trQuestVarGet("stepz"));</Command>
<Command>					tile = trQuestVarGet("start");</Command>
<Command>					found = true;</Command>
<Command>					while(found) {</Command>
<Command>						found = false;</Command>
<Command>						// Travel down the line and highlight tiles</Command>
<Command><![CDATA[						for(z=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>							trVectorQuestVarSet("current", kbGetBlockPosition(""+1*zGetVarByIndex("tiles", "neighbor"+z, tile)));</Command>
<Command><![CDATA[							if (zDistanceBetweenVectorsSquared("current", "pos") < 1) {]]></Command>
<Command>								tile = zGetVarByIndex("tiles", "neighbor"+z, tile);</Command>
<Command>								trQuestVarSet("currentTile", tile);</Command>
<Command>								yAddToDatabase("castTiles", "currentTile");</Command>
<Command>								trQuestVarSet("posx", trQuestVarGet("posx") + trQuestVarGet("stepx"));</Command>
<Command>								trQuestVarSet("posz", trQuestVarGet("posz") + trQuestVarGet("stepz"));</Command>
<Command>								if (trCurrentPlayer() == p) {</Command>
<Command>									highlightTile(tile, 999999);</Command>
<Command>								}</Command>
<Command>								found = true;</Command>
<Command>								break;</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					angle = fModulo(6.283185, angle + 1.047197);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("spellcast_01_select");</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("castDone", CASTING_DONE);</Command>
<Command>	}</Command>


<Command>	xsDisableRule("spellcast_00_process");</Command>
<Command>}</Command>

<Command>void spellcastClearHighlights(int x = 0) {</Command>
<Command>	if (trCurrentPlayer() == 1*trQuestVarGet("activePlayer")) {</Command>
<Command>		if (trQuestVarGet("cast"+x+"type") >= CAST_TILE) {</Command>
<Command>			for(z=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>				yDatabaseNext("castTargets");</Command>
<Command>				highlightTile(1*trQuestVarGet("castTargets"), 0.1);</Command>
<Command>			}</Command>
<Command>		} else {</Command>
<Command>			for (z=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>				yDatabaseNext("castTargets");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*yGetUnitAtIndex("allUnits", 1*trQuestVarGet("castTargets")), true);</Command>
<Command>				trUnitHighlight(0.1, false);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	yClearDatabase("castTargets");</Command>
<Command>}</Command>


<Command>rule spellcast_01_select</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	int x = trQuestVarGet("castPop");</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		spellcastClearHighlights(x);</Command>
<Command>		castReset();</Command>
<Command>		trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>	} else {</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				bool selected = false;</Command>
<Command><![CDATA[				if (trQuestVarGet("cast"+x+"type") < CAST_TILE) {]]></Command>
<Command>					for(z=yGetDatabaseCount("castTargets"); >0) {</Command>
<Command>						yDatabaseNext("castTargets");</Command>
<Command>						trQuestVarCopy("castTargetUnit", "castTargets");</Command>

<Command>						trQuestVarSet("castTargetUnit", yGetUnitAtIndex("allUnits", 1*trQuestVarGet("castTargets")));</Command>

<Command><![CDATA[						if (zDistanceToVectorSquared("castTargetUnit", "p"+p+"clickPos") < 8) {]]></Command>
<Command>							trQuestVarCopy(trStringQuestVarGet("cast"+x+"qv"), "castTargets");</Command>
<Command>							selected = true;</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					for(z=yGetDatabaseCount("castTiles"); >0) {</Command>
<Command>						yDatabaseNext("castTiles");</Command>

<Command><![CDATA[						if (zDistanceToVectorSquared("castTiles", "p"+p+"clickPos") < 8) {]]></Command>
<Command>							trQuestVarCopy(trStringQuestVarGet("cast"+x+"qv"), "castTiles");</Command>
<Command>							selected = true;</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (selected) {</Command>
<Command>					spellcastClearHighlights(x);</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>					xsEnableRule("spellcast_00_process");</Command>
<Command>					xsDisableRule("spellcast_01_select");</Command>
<Command>				} else {</Command>
<Command>					for(z=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>						yDatabaseNext("p"+p+"hand");</Command>
<Command><![CDATA[						if (zDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos") < 2) {]]></Command>
<Command>							spellcastClearHighlights(x);</Command>
<Command>							castReset();</Command>
<Command>							trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>							xsEnableRule("gameplay_01_select");</Command>
<Command>							highlightReady(999999);</Command>
<Command>							xsDisableRule("spellcast_01_select");</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (z == 0) {</Command>
<Command>						trQuestVarSet("p"+p+"click", 0);</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				spellcastClearHighlights(x);</Command>
<Command>				castReset();</Command>
<Command>				trQuestVarSet("castDone", CASTING_CANCEL);</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(999999);</Command>
<Command>				xsDisableRule("spellcast_01_select");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void chooseSpell(int spell = 0, int card = -1) {</Command>
<Command>	trQuestVarSet("currentSpell", spell);</Command>
<Command>	trQuestVarSet("selectedCard", card);</Command>
<Command>	switch(spell)</Command>
<Command>	{</Command>
<Command>		case SPELL_SPARK:</Command>
<Command>		{</Command>
<Command>			if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>				trMessageSetText("(1)Spark: Deal 1 damage to a unit.", -1);</Command>
<Command>			}</Command>
<Command>			castReset();</Command>
<Command>			castAddUnit("spellTarget", 0);</Command>
<Command>			castStart();</Command>
<Command>			xsEnableRule("spell_cast");</Command>
<Command>		}</Command>
<Command>		case SPELL_FOOD:</Command>
<Command>		{</Command>
<Command>			if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>				trMessageSetText("Choose a unit to give +1 attack and health to.", -1);</Command>
<Command>			}</Command>
<Command>			castReset();</Command>
<Command>			castAddUnit("spellTarget", 1*trQuestVarGet("activePlayer"), false);</Command>
<Command>			castStart();</Command>
<Command>			xsEnableRule("spell_cast");</Command>
<Command>		}</Command>
<Command>		case SPELL_SING:</Command>
<Command>		{</Command>
<Command>			if (trCurrentPlayer() == trQuestVarGet("activePlayer")) {</Command>
<Command>				trMessageSetText("(2)Windsong: Select an ally that has already acted. Grant it another action.", -1);</Command>
<Command>			}</Command>
<Command>			castReset();</Command>
<Command>			castAddSing("spellTarget", 1*trQuestVarGet("activePlayer"));</Command>
<Command>			castStart();</Command>
<Command>			xsEnableRule("spell_cast");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule spell_cast</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("spell_cast");</Command>
<Command>	} else if (trQuestVarGet("castDone") == CASTING_DONE) {</Command>
<Command>		bool done = true;</Command>
<Command>		int target = 0;</Command>
<Command>		trSoundPlayFN("godpower.wav","1",-1,"","");</Command>
<Command>		switch(1*trQuestVarGet("currentSpell"))</Command>
<Command>		{</Command>
<Command>			case SPELL_SPARK:</Command>
<Command>			{</Command>
<Command>				damageUnit("allUnits", 1*trQuestVarGet("spellTarget"), 1);</Command>
<Command>				deployAtTile(0, "Tartarian Gate flame", 1*yGetVarByIndex("allUnits", "tile", 1*trQuestVarGet("spellTarget")));</Command>
<Command>				trMessageSetText("(1)Spark: Deal 1 damage to a unit.", -1);</Command>
<Command>			}</Command>
<Command>			case SPELL_FOOD:</Command>
<Command>			{</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				ySetVarByIndex("allUnits", "attack", target, 1 + yGetVarByIndex("allUnits", "attack", target));</Command>
<Command>				ySetVarByIndex("allUnits", "health", target, 1 + yGetVarByIndex("allUnits", "health", target));</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*yGetVarByIndex("allUnits", "tile", target));</Command>
<Command>				trSoundPlayFN("colossuseat.wav","1",-1,"","");</Command>
<Command>				trSoundPlayFN("researchcomplete.wav","1",-1,"","");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*yGetUnitAtIndex("allUnits", target), true);</Command>
<Command>				spyEffect("Einheriar Boost SFX");</Command>
<Command>			}</Command>
<Command>			case SPELL_SING:</Command>
<Command>			{</Command>
<Command>				target = 1*trQuestVarGet("spellTarget");</Command>
<Command>				ySetVarByIndex("allUnits", "action", target, ACTION_READY);</Command>
<Command>				deployAtTile(0, "Hero Birth", 1*yGetVarByIndex("allUnits", "tile", target));</Command>
<Command>				trSoundPlayFN("restorationbirth.wav","1",-1,"","");</Command>
<Command>				trMessageSetText("(2)Windsong: Select an ally that has already acted. Grant it another action.",-1);</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		if (done) {</Command>
<Command>			castEnd();</Command>
<Command>		}</Command>
<Command>		xsDisableRule("spell_cast");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void OnAttack(int attacker = 0, int target = 0, int event = 0) {</Command>
<Command>	int p = yGetVarByIndex("allUnits", "player", attacker);</Command>
<Command>	switch(event)</Command>
<Command>	{</Command>
<Command>		case ATTACK_DRAW_CARD:</Command>
<Command>		{</Command>
<Command>			drawCard(p);</Command>
<Command>		}</Command>
<Command>		case ATTACK_STUN_TARGET:</Command>
<Command>		{</Command>
<Command>			stunUnit(target);</Command>
<Command>			trQuestVarSetFromRand("sound", 1, 3, true);</Command>
<Command>			trSoundPlayFN("woodcrush"+1*trQuestVarGet("sound")+".wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case ATTACK_GET_WINDSONG:</Command>
<Command>		{</Command>
<Command><![CDATA[			if (yGetDatabaseCount("p"+p+"hand") < 10) {]]></Command>
<Command>				addCardToHand(p, 0, SPELL_SING, true);</Command>
<Command>				updateHandPlayable(p);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_BLOCK_DEATH:</Command>
<Command>		{</Command>
<Command><![CDATA[			if(yGetVarByIndex("allUnits", "health", target)<=0 && yGetVarByIndex("allUnits", "OnDeath", target)>0){]]></Command>
<Command>				ySetVarByIndex("allUnits", "OnDeath", target, 0);</Command>
<Command>				trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetUnitAtIndex("allUnits", target)));</Command>
<Command>				DeploySober("Olympus Temple SFX", "pos");</Command>
<Command>				trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void OnPlay(int unit = 0, int event = 0) {</Command>
<Command>	int p = yGetVarByIndex("allUnits", "player", unit);</Command>
<Command>	bool done = true;</Command>
<Command>	switch(event)</Command>
<Command>	{</Command>
<Command>		case PLAY_GET_SPARK:</Command>
<Command>		{</Command>
<Command>			addCardToHand(p, kbGetProtoUnitID("Statue of Lightning"), SPELL_SPARK);</Command>
<Command>			updateHandPlayable(p);</Command>
<Command>		}</Command>
<Command>		case PLAY_GET_TRAP:</Command>
<Command>		{</Command>
<Command>			addCardToHand(p, kbGetProtoUnitID("Petrobolos"));</Command>
<Command>			updateHandPlayable(p);</Command>
<Command>		}</Command>
<Command>		case PLAY_FOOD:</Command>
<Command>		{</Command>
<Command>			done = false;</Command>
<Command>			chooseSpell(SPELL_FOOD);</Command>
<Command>		}</Command>
<Command>		case PLAY_DOUBLEBLADE:</Command>
<Command>		{</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+1*yGetUnitAtIndex("allUnits", unit), true);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Avenger"));</Command>
<Command>			trUnitOverrideAnimation(39, 0, 0, 1, -1);</Command>
<Command>			trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*yGetVarByIndex("allUnits", "tile", unit)));</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				if (yGetVar("allUnits", "player") == 3 - p) {</Command>
<Command><![CDATA[					if (zDistanceToVectorSquared("allUnits", "pos") < 64) {]]></Command>
<Command>						damageUnit("allUnits", 1*yGetPointer("allUnits"), 1);</Command>
<Command>						deployAtTile(0, "Lightning sparks", 1*yGetVar("allUnits", "tile"));</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trSoundPlayFN("sphinxspecialattack.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		case PLAY_LEGENDARY:</Command>
<Command>		{</Command>
<Command>			trSoundPlayFN("herocreation.wav","1",-1,"","");</Command>
<Command>			trSoundPlayFN("lightningbirth.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	if (done) {</Command>
<Command>		removeDeadUnits();</Command>
<Command>		xsEnableRule("gameplay_01_select");</Command>
<Command>		highlightReady(999999);</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>const int GAMEPLAY_SELECT = 0;</Command>
<Command>const int GAMEPLAY_WORK = 1;</Command>
<Command>const int GAMEPLAY_MOVING = 2;</Command>
<Command>const int GAMEPLAY_SUMMONING = 3;</Command>
<Command>const int GAMEPLAY_ATTACKING = 4;</Command>


<Command>void processAttack(string db = "attacks") {</Command>
<Command>	int attackerIndex = yDatabaseNext(db);</Command>
<Command>	int targetIndex = yGetVar(db, "target");</Command>
<Command>	int attackerUnit = yGetUnitAtIndex("allUnits", attackerIndex);</Command>
<Command>	int targetUnit = yGetUnitAtIndex("allUnits", targetIndex);</Command>
<Command>	int attackerID = kbGetBlockID(""+attackerUnit);</Command>
<Command>	switch(1*yGetVar(db, "phase"))</Command>
<Command>	{</Command>
<Command>		case ATTACK_START:</Command>
<Command>		{</Command>
<Command>			if (yGetVarByIndex("allUnits", "health", attackerIndex) > 0) {</Command>
<Command>				trVectorQuestVarSet("d1pos", kbGetBlockPosition(""+attackerUnit, true));</Command>
<Command>				trVectorQuestVarSet("d2pos", kbGetBlockPosition(""+targetUnit, true));</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+attackerUnit, true);</Command>
<Command>				trSetUnitOrientation(zGetUnitVector("d1pos", "d2pos"), xsVectorSet(0,1,0), true);</Command>
<Command>				if (yGetVarByIndex("allUnits", "range", attackerIndex) == 1) {</Command>
<Command>					trUnitOverrideAnimation(1,0,0,1,-1);</Command>
<Command>				} else {</Command>
<Command>					trUnitOverrideAnimation(12,0,0,1,-1);</Command>
<Command>				}</Command>
<Command>				ySetVar(db, "phase", ATTACK_ANIMATE);</Command>
<Command>				ySetVar(db, "timeout", trTime() + 1);</Command>
<Command>			} else {</Command>
<Command>				yRemoveFromDatabase(db);</Command>
<Command>				yRemoveUpdateVar(db, "target");</Command>
<Command>				yRemoveUpdateVar(db, "phase");</Command>
<Command>				yRemoveUpdateVar(db, "timeout");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_ANIMATE:</Command>
<Command>		{</Command>
<Command><![CDATA[			if ((kbUnitGetAnimationActionType(attackerID) == 16) == false || trTime() > yGetVar(db, "timeout")) {]]></Command>
<Command>				ySetVar(db, "phase", ATTACK_DONE);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		case ATTACK_DONE:</Command>
<Command>		{</Command>
<Command>			if (HasKeyword(LIGHTNING, 1*yGetVarByIndex("allUnits", "keywords", attackerIndex))) {</Command>
<Command>				lightning(targetIndex, yGetVarByIndex("allUnits", "attack", attackerIndex),</Command>
<Command>					HasKeyword(DEADLY, 1*yGetVarByIndex("allUnits", "keywords", attackerIndex)));</Command>
<Command><![CDATA[			} else if (HasKeyword(DEADLY, 1*yGetVarByIndex("allUnits", "keywords", attackerIndex)) &&]]></Command>
<Command>				yGetVarByIndex("allUnits", "spell", targetIndex) == SPELL_NONE) {</Command>
<Command>				ySetVarByIndex("allUnits", "health", targetIndex, 0);</Command>
<Command>				damageUnit("allUnits", targetIndex, 1);</Command>
<Command>				deployAtTile(0, "Lampades Blood", 1*yGetVarByIndex("allUnits", "tile", targetIndex));</Command>
<Command>			} else {</Command>
<Command>				damageUnit("allUnits", targetIndex, yGetVarByIndex("allUnits", "attack", attackerIndex));</Command>
<Command>				deployAtTile(0, "Lightning sparks", 1*yGetVarByIndex("allUnits", "tile", targetIndex));</Command>
<Command>			}</Command>
<Command>			int n = 1*xsPow(2, ATTACK_EVENT_COUNT - 1);</Command>
<Command>			int events = 1*yGetVarByIndex("allUnits", "OnAttack", attackerIndex);</Command>
<Command>			for(x=ATTACK_EVENT_COUNT - 1; >=0) {</Command>
<Command>				if (events >= n) {</Command>
<Command>					OnAttack(attackerIndex, targetIndex, x);</Command>
<Command>					events = events - n;</Command>
<Command>				}</Command>
<Command>				n = n / 2;</Command>
<Command>			}</Command>

<Command>			yRemoveFromDatabase(db);</Command>
<Command>			yRemoveUpdateVar(db, "target");</Command>
<Command>			yRemoveUpdateVar(db, "phase");</Command>
<Command>			yRemoveUpdateVar(db, "timeout");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool attackUnitAtCursor(int p = 0) {</Command>
<Command>	int target = findNearestUnit("p"+p+"clickPos", 8);</Command>
<Command>	int a = trQuestVarGet("activeUnitIndex");</Command>

<Command>	if (target == -1) {</Command>
<Command>		return(false);</Command>
<Command>	}</Command>
<Command>	if (yGetVarByIndex("allUnits", "player", target) == 3 - p) {</Command>
<Command>		trQuestVarSet("targetUnit", yGetUnitAtIndex("allUnits", target));</Command>
<Command>		trVectorSetUnitPos("d1pos", "activeUnit");</Command>
<Command>		trVectorSetUnitPos("d2pos", "targetUnit");</Command>
<Command>		float range = xsPow(yGetVarByIndex("allUnits", "range", a) * 6 + 3, 2);</Command>
<Command>		float dist = 0;</Command>
<Command><![CDATA[		if (zDistanceBetweenVectorsSquared("d1pos", "d2pos") < range) {]]></Command>
<Command>			// Guard activates</Command>
<Command>			for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>				yDatabaseNext("allUnits");</Command>
<Command>				dist = zDistanceToVectorSquared("allUnits", "d2pos");</Command>
<Command><![CDATA[				if (dist < 64 && dist > 9 &&]]></Command>
<Command><![CDATA[					yGetVar("allUnits", "stunTime") == 0 &&]]></Command>
<Command><![CDATA[					yGetVar("allUnits", "player") == 3 - p &&]]></Command>
<Command>					HasKeyword(GUARD, 1*yGetVar("allUnits", "keywords"))) {</Command>
<Command>					trSoundPlayFN("bronzebirth.wav","1",-1,"","");</Command>
<Command>					trSoundPlayFN("militarycreate.wav","1",-1,"","");</Command>
<Command>					trUnitHighlight(2.0, true);</Command>
<Command>					int guardTile = yGetVar("allUnits", "tile");</Command>
<Command>					int saveTile = yGetVarByIndex("allUnits", "tile", target);</Command>
<Command>					teleportToTile("allUnits", saveTile);</Command>
<Command>					teleportToTile("allUnits", guardTile, target);</Command>
<Command>					target = yGetPointer("allUnits");</Command>
<Command>					trQuestVarSet("targetUnit", trQuestVarGet("allUnits"));</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			refreshGuardAll();</Command>

<Command>			startAttack(a, target, HasKeyword(AMBUSH, 1*yGetVarByIndex("allUnits", "keywords", a)), true);</Command>

<Command>			// Counterattack</Command>
<Command>			trQuestVarSet("targetUnitIndex", target);</Command>
<Command>			range = xsPow(yGetVarByIndex("allUnits", "range", target) * 6 + 3, 2);</Command>
<Command><![CDATA[			if ((zDistanceBetweenVectorsSquared("d1pos", "d2pos") < range) && (yGetVarByIndex("allUnits", "stunTime", target) == 0)) {]]></Command>
<Command>				startAttack(target, a, false, true);</Command>
<Command>			}</Command>

<Command>			ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"),</Command>
<Command>				xsMax(ACTION_DONE, yGetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"))));</Command>
<Command>			xsEnableRule("gameplay_05_attackComplete");</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	return(false);</Command>
<Command>}</Command>

<Command>rule resolve_attacks</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("ambushAttacks") > 0) {</Command>
<Command>		processAttack("ambushAttacks");</Command>
<Command>	} else if (yGetDatabaseCount("attacks") > 0) {</Command>
<Command>		processAttack("attacks");</Command>
<Command>	}</Command>
<Command><![CDATA[	if (trTimeMS() > trQuestVarGet("lightningNext") &&]]></Command>
<Command>		(trQuestVarGet("lightningActivate") == trQuestVarGet("lightningPop")) == false) {</Command>
<Command>		trQuestVarSet("lightningNext", trTimeMS() + 100);</Command>
<Command>		int index = modularCounterNext("lightningActivate");</Command>
<Command>		int targetIndex = trQuestVarGet("lightning"+index);</Command>
<Command>		// If Deadly and target isn't a commander</Command>
<Command><![CDATA[		if (trQuestVarGet("lightning"+index+"damage") == -1 &&]]></Command>
<Command>			yGetVarByIndex("allUnits", "spell", targetIndex) == SPELL_NONE) {</Command>
<Command>			ySetVarByIndex("allUnits", "health", targetIndex, 0);</Command>
<Command>			damageUnit("allUnits", targetIndex, 1);</Command>
<Command>			deployAtTile(0, "Lampades Blood", 1*yGetVarByIndex("allUnits", "tile", targetIndex));</Command>
<Command>		} else {</Command>
<Command>			damageUnit("allUnits", targetIndex, trQuestVarGet("lightning"+index+"damage"));</Command>
<Command>			deployAtTile(0, "Lightning sparks", 1*yGetVarByIndex("allUnits", "tile", targetIndex));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_toggle_camera</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(1*trQuestVarGet("p"+p+"raven"));</Command>
<Command>		if (trUnitIsSelected()) {</Command>
<Command>			trQuestVarSet("cameraCut", 1 - trQuestVarGet("cameraCut"));</Command>
<Command>			if (trQuestVarGet("cameraCut") == 1) {</Command>
<Command>				uiLookAtUnit(1*trQuestVarGet("p"+p+"block"));</Command>
<Command>			} else {</Command>
<Command>				uiLookAtUnit(kbGetBlockID(""+1*trQuestVarGet("p"+p+"commander"), true));</Command>
<Command>			}</Command>
<Command>			uiClearSelection();</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_select_show_keywords</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	yDatabaseNext("allUnits", true);</Command>
<Command>	if (trUnitIsSelected()) {</Command>
<Command>		displayCardKeywordsAndDescription("allUnits", 1*yGetPointer("allUnits"));</Command>
<Command>	}</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		yDatabaseNext("p"+p+"hand", true);</Command>
<Command>		if (trUnitIsSelected()) {</Command>
<Command>			displayCardKeywordsAndDescription("p"+p+"hand", 1*yGetPointer("p"+p+"hand"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_01_select</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_01_select");</Command>
<Command>		highlightReady(0.1);</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_SELECT);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		if (trQuestVarGet("p"+p+"click") == LEFT_CLICK) {</Command>
<Command>			int unit = findNearestUnit("p"+p+"clickPos", 8);</Command>
<Command>			trQuestVarSet("activeUnitIndex", unit);</Command>
<Command>			if (unit > -1) {</Command>

<Command><![CDATA[				if (yGetVarByIndex("allUnits", "player", unit) == p &&]]></Command>
<Command>					yGetVarByIndex("allUnits", "action", unit) == ACTION_READY) {</Command>
<Command>					highlightReachable(unit);</Command>

<Command>					// highlight attackable enemies within range</Command>
<Command>					findTargets(unit, "targets");</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(3600.0, false);</Command>

<Command>					xsDisableRule("gameplay_01_select");</Command>
<Command>					highlightReady(0.1);</Command>
<Command>					xsEnableRule("gameplay_02_work");</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				// Check if player selected a card in hand.</Command>
<Command>				unit = -1;</Command>
<Command>				float closestDistance = 9.0;</Command>
<Command>				float currentDistance = 0;</Command>
<Command>				for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>					yDatabaseNext("p"+p+"hand");</Command>
<Command>					currentDistance = zDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos");</Command>
<Command><![CDATA[					if (currentDistance < closestDistance) {]]></Command>
<Command>						closestDistance = currentDistance;</Command>
<Command>						unit = yGetPointer("p"+p+"hand");</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				if (unit > -1) {</Command>
<Command>					if (trQuestVarGet("p"+p+"mana") >= yGetVarByIndex("p"+p+"hand", "cost", unit)) {</Command>
<Command>						trQuestVarSet("gameplayPhase", GAMEPLAY_SUMMONING);</Command>
<Command>						// If it is a unit</Command>
<Command>						if (yGetVarByIndex("p"+p+"hand", "spell", unit) == 0) {</Command>
<Command>							int tile = 0;</Command>
<Command>							yClearDatabase("summonLocations");</Command>
<Command>							if (HasKeyword(AIRDROP, 1*yGetVarByIndex("p"+p+"hand", "keywords", unit))) {</Command>
<Command>								for(x=zGetBankCount("tiles"); >0) {</Command>
<Command>									zBankNext("tiles");</Command>
<Command>									if (zGetVar("tiles", "occupied") == TILE_EMPTY) {</Command>
<Command>										yAddToDatabase("summonLocations", "tiles");</Command>
<Command>									}</Command>
<Command>								}</Command>
<Command>							} else {</Command>
<Command>								for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>									yDatabaseNext("allUnits");</Command>
<Command><![CDATA[									if (yGetVar("allUnits", "player") == p && HasKeyword(BEACON, 1*yGetVar("allUnits", "keywords"))) {]]></Command>
<Command>										tile = yGetVar("allUnits", "tile");</Command>
<Command>										findAvailableTiles(tile, 1, "summonLocations");</Command>
<Command>									}</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>							for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>								tile = yDatabaseNext("summonLocations");</Command>
<Command>								if (trCurrentPlayer() == p) {</Command>
<Command>									highlightTile(tile, 3600);</Command>
<Command>								}</Command>
<Command>							}</Command>

<Command>							trQuestVarSet("summonUnitIndex", unit);</Command>
<Command>							xsEnableRule("gameplay_10_summon");</Command>
<Command>						} else {</Command>
<Command>							// If it is a spell</Command>
<Command>							chooseSpell(1*yGetVarByIndex("p"+p+"hand", "spell", unit), unit);</Command>
<Command>						}</Command>

<Command>						xsDisableRule("gameplay_01_select");</Command>
<Command>						highlightReady(0.1);</Command>
<Command>					}</Command>

<Command>				}</Command>
<Command>			}</Command>

<Command>			trQuestVarSet("p"+p+"click", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_02_work</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_02_work");</Command>
<Command>		if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>			for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>				highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>			}</Command>
<Command>			yClearDatabase("reachable");</Command>
<Command>		}</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_WORK);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("activeUnitIndex") > -1) {</Command>
<Command>					// Clear previously highlighted tiles.</Command>
<Command>					if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>						for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>							highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>						}</Command>
<Command>						yClearDatabase("reachable");</Command>
<Command>					}</Command>
<Command>					if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>						yDatabaseSelectAll("targets");</Command>
<Command>						trUnitHighlight(0.1, false);</Command>
<Command>						yClearDatabase("targets");</Command>
<Command>					}</Command>
<Command>					if (yGetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex")) == ACTION_MOVED) {</Command>
<Command>						ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_DONE);</Command>
<Command>					}</Command>

<Command>					xsDisableRule("gameplay_02_work");</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>

<Command>					// trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				int unit = trQuestVarGet("activeUnitIndex");</Command>
<Command>				trQuestVarSet("activeUnit", yGetUnitAtIndex("allUnits", 1*trQuestVarGet("activeUnitIndex")));</Command>
<Command>				if (attackUnitAtCursor(p) == false) {</Command>
<Command>					trQuestVarSet("moveTile", -1);</Command>
<Command>					for (x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>						yDatabaseNext("reachable");</Command>
<Command><![CDATA[						if (zDistanceToVectorSquared("reachable", "p"+p+"clickPos") < 9) {]]></Command>
<Command>							trQuestVarCopy("moveTile", "reachable");</Command>
<Command>							break;</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if (trQuestVarGet("moveTile") == -1) {</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							trSoundPlayFN("cantdothat.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>					} else {</Command>
<Command>						// un-highlight all tiles</Command>
<Command>						for (x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>							highlightTile(1*yDatabaseNext("reachable", false), 0.1);</Command>
<Command>						}</Command>
<Command>						yClearDatabase("reachable");</Command>

<Command>						if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>							yDatabaseSelectAll("targets");</Command>
<Command>							trUnitHighlight(0.1, false);</Command>
<Command>							yClearDatabase("targets");</Command>
<Command>						}</Command>

<Command>						int tile = yGetVarByIndex("allUnits", "tile", 1*trQuestVarGet("activeUnitIndex"));</Command>
<Command>						zSetVarByIndex("tiles", "occupied", tile, xsMax(TILE_EMPTY, zGetVarByIndex("tiles", "terrain", tile)));</Command>
<Command>						if (HasKeyword(GUARD, 1*yGetVarByIndex("allUnits", "keywords", 1*trQuestVarGet("activeUnitIndex")))) {</Command>
<Command>							tileGuard(tile, false);</Command>
<Command>						}</Command>

<Command>						trVectorSetUnitPos("moveDestination", "moveTile");</Command>
<Command>						trQuestVarSet("activeUnitID", kbGetBlockID(""+1*trQuestVarGet("activeUnit"), true));</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelectByID(1*trQuestVarGet("activeUnitID"));</Command>
<Command>						trUnitMoveToVector("moveDestination");</Command>

<Command>						ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_MOVED);</Command>
<Command>						trQuestVarSet("moving", 0);</Command>
<Command>						trQuestVarSet("gameplayPhase", GAMEPLAY_MOVING);</Command>
<Command>						xsEnableRule("gameplay_03_moveComplete");</Command>
<Command>						xsDisableRule("gameplay_02_work");</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					trQuestVarSet("gameplayPhase", GAMEPLAY_ATTACKING);</Command>
<Command>					xsDisableRule("gameplay_02_work");</Command>
<Command>				}</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_03_moveComplete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	// unit starts moving</Command>
<Command>	if (trQuestVarGet("moving") == 0) {</Command>
<Command><![CDATA[		if (kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 11 ||]]></Command>
<Command>			kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 10) {</Command>
<Command>			trQuestVarSet("moving", 1);</Command>
<Command>		}</Command>
<Command>	} else if (trQuestVarGet("moving") == 1) {</Command>
<Command><![CDATA[		if (kbUnitGetAnimationActionType(1*trQuestVarGet("activeUnitID")) == 9 || trQuestVarGet("turnEnd") == 1) {]]></Command>
<Command>			int p = trQuestVarGet("activePlayer");</Command>

<Command>			trVectorSetUnitPos("start", "activeUnit");</Command>
<Command>			trVectorSetUnitPos("end", "moveTile");</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("moveTile"));</Command>
<Command>			trUnitConvert(p);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Transport Ship Greek"));</Command>
<Command>			trSetUnitOrientation(zGetUnitVector("start", "end"),xsVectorSet(0,1,0), true);</Command>

<Command>			int type = kbGetUnitBaseTypeID(1*trQuestVarGet("activeUnitID"));</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("activeUnitID"));</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Dwarf"));</Command>
<Command>			trImmediateUnitGarrison(""+1*trQuestVarGet("moveTile"));</Command>
<Command>			trUnitChangeProtoUnit("Dwarf");</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("activeUnitID"));</Command>
<Command>			trMutateSelected(type);</Command>

<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(1*trQuestVarGet("moveTile"));</Command>
<Command>			trUnitConvert(0);</Command>
<Command>			trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>

<Command>			if (trQuestVarGet("turnEnd") == 0) {</Command>
<Command>				findTargets(1*trQuestVarGet("activeUnitIndex"), "targets");</Command>
<Command>				if (yGetDatabaseCount("targets") == 0) {</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>
<Command>					ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_DONE);</Command>
<Command>				} else {</Command>
<Command>					xsEnableRule("gameplay_04_attack");</Command>
<Command>					ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_MOVED);</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(3600, false);</Command>
<Command>				}</Command>
<Command>			}</Command>


<Command>			ySetVarByIndex("allUnits", "tile", 1*trQuestVarGet("activeUnitIndex"), trQuestVarGet("moveTile"));</Command>
<Command>			zSetVarByIndex("tiles", "occupied", 1*trQuestVarGet("moveTile"), TILE_OCCUPIED);</Command>

<Command>			if (HasKeyword(GUARD, 1*yGetVarByIndex("allUnits", "keywords", 1*trQuestVarGet("activeUnitIndex")))) {</Command>
<Command>				refreshGuardAll();</Command>
<Command>			}</Command>


<Command>			xsDisableRule("gameplay_03_moveComplete");</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule gameplay_04_attack</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		xsDisableRule("gameplay_04_attack");</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>
<Command>	} else {</Command>
<Command>		trQuestVarSet("gameplayPhase", GAMEPLAY_WORK);</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_DONE);</Command>
<Command>				if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>					yDatabaseSelectAll("targets");</Command>
<Command>					trUnitHighlight(0.1, false);</Command>
<Command>					yClearDatabase("targets");</Command>
<Command>				}</Command>
<Command>				xsDisableRule("gameplay_04_attack");</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				if (attackUnitAtCursor(p)) {</Command>
<Command>					if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>						yDatabaseSelectAll("targets");</Command>
<Command>						trUnitHighlight(0.1, false);</Command>
<Command>						yClearDatabase("targets");</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>					xsDisableRule("gameplay_04_attack");</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_05_attackComplete</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if ((yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + trQuestVarGet("lightningActivate") - trQuestVarGet("lightningPop") == 0) ||]]></Command>
<Command>		(trTime() > cActivationTime + 3)) {</Command>
<Command>		int p = trQuestVarGet("activePlayer");</Command>

<Command>		if (yGetDatabaseCount("reachable") > 0) {</Command>
<Command>			for(x=yGetDatabaseCount("reachable"); >0) {</Command>
<Command>				highlightTile(1*yDatabaseNext("reachable"), 0.1);</Command>
<Command>			}</Command>
<Command>			yClearDatabase("reachable");</Command>
<Command>		}</Command>
<Command>		if (yGetDatabaseCount("targets") > 0) {</Command>
<Command>			yDatabaseSelectAll("targets");</Command>
<Command>			trUnitHighlight(0.1, false);</Command>
<Command>			yClearDatabase("targets");</Command>
<Command>		}</Command>

<Command>		if (trQuestVarGet("turnEnd") == 0) {</Command>
<Command><![CDATA[			if (HasKeyword(FURIOUS, 1*yGetVarByIndex("allUnits", "keywords", 1*trQuestVarGet("activeUnitIndex"))) &&]]></Command>
<Command><![CDATA[				yGetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex")) < ACTION_FURY &&]]></Command>
<Command>				yGetVarByIndex("allUnits", "health", 1*trQuestVarGet("activeUnitIndex")) > 0) {</Command>
<Command>				ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("activeUnitIndex"), ACTION_FURY);</Command>
<Command>				xsEnableRule("gameplay_04_attack");</Command>
<Command>				yClearDatabase("targets");</Command>
<Command>				findTargets(1*trQuestVarGet("activeUnitIndex"), "targets");</Command>
<Command>				yDatabaseSelectAll("targets");</Command>
<Command>				trUnitHighlight(3600, false);</Command>
<Command>			} else {</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		removeDeadUnits();</Command>
<Command>		refreshGuardAll();</Command>

<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			if (trQuestVarGet("activeUnit") == yDatabaseNext("allUnits")) {</Command>
<Command>				trQuestVarSet("activeUnitIndex", yGetPointer("allUnits"));</Command>
<Command>				break;</Command>
<Command>			}</Command>
<Command>		}</Command>

<Command>		xsDisableRule("gameplay_05_attackComplete");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule gameplay_10_summon</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command>	if (trQuestVarGet("turnEnd") == 1) {</Command>
<Command>		for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>			yDatabaseNext("summonLocations");</Command>
<Command>			if (trCurrentPlayer() == p) {</Command>
<Command>				highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yClearDatabase("summonLocations");</Command>
<Command>		xsDisableRule("gameplay_10_summon");</Command>
<Command>	} else {</Command>
<Command>		switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>		{</Command>
<Command>			case LEFT_CLICK:</Command>
<Command>			{</Command>
<Command>				int tile = -1;</Command>
<Command>				for(x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>					yDatabaseNext("summonLocations");</Command>
<Command><![CDATA[					if (zDistanceToVectorSquared("summonLocations", "p"+p+"clickPos") < 9) {]]></Command>
<Command>						tile = trQuestVarGet("summonLocations");</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				// Invalid location</Command>
<Command><![CDATA[				if (tile < 0) {]]></Command>
<Command>					for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					yClearDatabase("summonLocations");</Command>
<Command>					xsEnableRule("gameplay_01_select");</Command>
<Command>					highlightReady(100);</Command>
<Command>					xsDisableRule("gameplay_10_summon");</Command>
<Command>					// We don't set the player click to 0 in case this click was used to select another unit in hand.</Command>
<Command>				} else {</Command>
<Command>					ySetPointer("p"+p+"hand", 1*trQuestVarGet("summonUnitIndex"));</Command>
<Command>					int unit = yGetUnitAtIndex("p"+p+"hand", 1*trQuestVarGet("summonUnitIndex"));</Command>

<Command>					teleportToTile("p"+p+"hand", tile, 1*trQuestVarGet("summonUnitIndex"));</Command>

<Command>					trQuestVarSet("p"+p+"mana", trQuestVarGet("p"+p+"mana") - yGetVar("p"+p+"hand", "cost"));</Command>
<Command>					trSoundPlayFN("mythcreate.wav","1",-1,"","");</Command>

<Command>					transferUnit("allUnits", "p"+p+"hand");</Command>
<Command>					if (HasKeyword(CHARGE, 1*yGetVar("p"+p+"hand", "keywords")) == true) {</Command>
<Command>						yAddUpdateVar("allUnits", "action", ACTION_READY);</Command>
<Command>					} else {</Command>
<Command>						yAddUpdateVar("allUnits", "action", ACTION_SLEEPING);</Command>
<Command>					}</Command>
<Command>					updateMana();</Command>

<Command>					// If the unit has an OnPlay effect</Command>
<Command>					if (yGetVar("p"+p+"hand", "OnPlay") > 0) {</Command>
<Command>						int n = 1*xsPow(2, PLAY_EVENT_COUNT - 1);</Command>
<Command>						int events = 1*yGetVar("p"+p+"hand", "OnPlay");</Command>
<Command>						int latest = yGetDatabaseCount("allUnits") - 1;</Command>
<Command>						for(x=PLAY_EVENT_COUNT - 1; >=0) {</Command>
<Command>							if (events >= n) {</Command>
<Command>								OnPlay(latest, x);</Command>
<Command>								events = events - n;</Command>
<Command>							}</Command>
<Command>							n = n / 2;</Command>
<Command>						}</Command>
<Command>					} else {</Command>
<Command>						xsEnableRule("gameplay_01_select");</Command>
<Command>						highlightReady(100);</Command>
<Command>					}</Command>

<Command>					removeUnit("p"+p+"hand");</Command>

<Command>					zSetVarByIndex("tiles", "occupied", tile, TILE_OCCUPIED);</Command>
<Command>					updateHandPlayable(p);</Command>

<Command>					for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					yClearDatabase("summonLocations");</Command>


<Command>					xsDisableRule("gameplay_10_summon");</Command>
<Command>					trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			case RIGHT_CLICK:</Command>
<Command>			{</Command>
<Command>				for (x=yGetDatabaseCount("summonLocations"); >0) {</Command>
<Command>					yDatabaseNext("summonLocations");</Command>
<Command>					if (trCurrentPlayer() == p) {</Command>
<Command>						highlightTile(1*trQuestVarGet("summonLocations"), 0.1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>				yClearDatabase("summonLocations");</Command>
<Command>				trQuestVarSet("p"+p+"click", 0);</Command>
<Command>				xsEnableRule("gameplay_01_select");</Command>
<Command>				highlightReady(100);</Command>
<Command>				xsDisableRule("gameplay_10_summon");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>const int BOT_PHASE_CARD_CHOOSE = 0;</Command>
<Command>const int BOT_PHASE_CARD_PLAY = 1;</Command>
<Command>const int BOT_PHASE_UNIT_CHOOSE = 2;</Command>
<Command>const int BOT_PHASE_UNIT_MOVE = 3;</Command>
<Command>const int BOT_PHASE_UNIT_ATTACK = 4;</Command>
<Command>const int BOT_PHASE_SPELL_PLAY = 5;</Command>

<Command>const int BOT_PERSONALITY_DEFAULT = 0;	// Default bot, moves and attacks</Command>
<Command>const int BOT_PERSONALITY_TRAINING = 1; // Doesn't move</Command>
<Command>const int BOT_PERSONALITY_CIVILIAN = 2; // Doesn't attack</Command>
<Command>const int BOT_PERSONALITY_DECORATIVE = 3; // Doesn't play</Command>

<Command>void InitBot(int personality = 0){</Command>
<Command>	switch(personality)</Command>
<Command>	{</Command>
<Command>		case BOT_PERSONALITY_DEFAULT:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("botNoMove", 0);</Command>
<Command>			trQuestVarSet("botNoAttack", 0);</Command>
<Command>		}</Command>

<Command>		case BOT_PERSONALITY_TRAINING:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("botNoMove", 1);</Command>
<Command>			trQuestVarSet("botNoAttack", 0);</Command>
<Command>		}</Command>

<Command>		case BOT_PERSONALITY_CIVILIAN:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("botNoMove", 0);</Command>
<Command>			trQuestVarSet("botNoAttack", 1);</Command>
<Command>		}</Command>

<Command>		case BOT_PERSONALITY_DECORATIVE:</Command>
<Command>		{</Command>
<Command>			trQuestVarSet("botNoMove", 1);</Command>
<Command>			trQuestVarSet("botNoAttack", 1);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule Bot1</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (true){</Command>
<Command>		trQuestVarSet("botTimeNext", trTimeMS() + 300);</Command>
<Command>		trQuestVarSet("botClick", -1);</Command>

<Command><![CDATA[		if(trQuestVarGet("botNoMove") == 1 && trQuestVarGet("botNoAttack") == 1){]]></Command>
<Command>			// End Turn</Command>
<Command>			trQuestVarSet("botPhase", -1);</Command>
<Command>			trQuestVarSet("botThinking", 47);</Command>
<Command>		} else if (trQuestVarGet("castDone") == CASTING_IN_PROGRESS) {</Command>
<Command>			trQuestVarSet("botPhase", BOT_PHASE_SPELL_PLAY);</Command>
<Command>		}</Command>


<Command>		switch(1*trQuestVarGet("botPhase"))</Command>
<Command>		{</Command>
<Command>			case BOT_PHASE_CARD_CHOOSE:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("gameplayPhase") == GAMEPLAY_SELECT) {</Command>
<Command>					trQuestVarSet("botActiveKeywords", 0);</Command>
<Command>					int maxCardCost = -1;</Command>
<Command>					int spell = 0;</Command>
<Command>					for(x=yGetDatabaseCount("p2hand"); >0) {</Command>
<Command>						yDatabaseNext("p2hand");</Command>
<Command><![CDATA[						if (yGetVar("p2hand", "cost") <= trQuestVarGet("p2mana")) {]]></Command>
<Command>							// Bot plays cast in desc order of their cost</Command>
<Command>							int currentCardCost = yGetVar("p2hand", "cost");</Command>
<Command>							// Bot loves Airdrop</Command>
<Command>							if(HasKeyword(AIRDROP, 1*yGetVar("p2hand", "keywords"))){</Command>
<Command>								currentCardCost = currentCardCost + 9000;</Command>
<Command>							}</Command>
<Command>							if(currentCardCost > maxCardCost){</Command>
<Command>								maxCardCost = currentCardCost;</Command>
<Command>								trQuestVarSet("botActiveKeywords", 1*yGetVar("p2hand", "keywords"));</Command>
<Command>								trVectorSetUnitPos("botClickPos", "p2hand");</Command>
<Command>								spell = 1*yGetVar("p2hand", "spell");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(maxCardCost > -1){</Command>
<Command>						// Bot Click Left</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>						if (spell > 0) {</Command>
<Command>							trQuestVarSet("botPhase", BOT_PHASE_SPELL_PLAY);</Command>
<Command>						} else {</Command>
<Command>							trQuestVarSet("botPhase", BOT_PHASE_CARD_PLAY);</Command>
<Command>						}</Command>
<Command>						trQuestVarSet("botSpellPop", 0);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSet("botPhase", BOT_PHASE_UNIT_CHOOSE);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					// Wait until gameplay phase is GAMEPLAY_SELECT</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case BOT_PHASE_SPELL_PLAY:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("castDone") == CASTING_NOTHING) {</Command>
<Command>					trQuestVarSet("botPhase", BOT_PHASE_CARD_CHOOSE);</Command>
<Command>				} else if (trQuestVarGet("castDone") == CASTING_CANCEL) {</Command>
<Command>					trQuestVarSet("botPhase", BOT_PHASE_UNIT_CHOOSE);</Command>
<Command>				} else if (trQuestVarGet("castPop") > trQuestVarGet("botSpellPop")) {</Command>
<Command>					trQuestVarSet("botSpellPop", trQuestVarGet("castPop"));</Command>
<Command>					if (yGetDatabaseCount("castTargets") > 0) {</Command>
<Command>						trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("castTargets"), true);</Command>
<Command>						for(x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>							yDatabaseNext("castTargets");</Command>
<Command>						}</Command>
<Command>						trQuestVarSet("castTargetUnit", yGetUnitAtIndex("allUnits", 1*trQuestVarGet("castTargets")));</Command>
<Command>						trVectorSetUnitPos("botClickPos", "castTargetUnit");</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					} else if (yGetDatabaseCount("castTiles") > 0) {</Command>
<Command>						trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("castTiles"), true);</Command>
<Command>						for(x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>							yDatabaseNext("castTiles");</Command>
<Command>						}</Command>
<Command>						trVectorSetUnitPos("botClickPos", "castTiles");</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					// Wait until spellcasting system is ready for selection</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case BOT_PHASE_CARD_PLAY:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("gameplayPhase") == GAMEPLAY_SUMMONING) {</Command>
<Command>					// Bot tries to play a unit but there are no tiles where to summon it, skip playing cards</Command>
<Command>					if(yGetDatabaseCount("summonLocations") == 0){</Command>
<Command>						trQuestVarSet("botPhase", BOT_PHASE_UNIT_CHOOSE);</Command>
<Command>						// Bot Click Right</Command>
<Command>						trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("summonLocations"), true);</Command>
<Command>					}</Command>

<Command>					for (x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>						yDatabaseNext("summonLocations");</Command>
<Command>					}</Command>
<Command>					// Bot summons a unit</Command>
<Command>					trVectorSetUnitPos("botClickPos", "summonLocations");</Command>
<Command>					// Bot Click Left</Command>
<Command>					trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>					trQuestVarSet("botPhase", BOT_PHASE_CARD_CHOOSE);</Command>
<Command>				} else {</Command>
<Command>					// Wait until gameplay phase is GAMEPLAY_SUMMONING</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case BOT_PHASE_UNIT_CHOOSE:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("gameplayPhase") == GAMEPLAY_WORK) {</Command>
<Command>					trVectorQuestVarSet("botClickPos", xsVectorSet(110,0,110));</Command>
<Command>					trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>				} else if (trQuestVarGet("gameplayPhase") == GAMEPLAY_SELECT) {</Command>
<Command>					trQuestVarSet("botActiveUnit", 0);</Command>
<Command>					trQuestVarSet("botActiveIndex", -1);</Command>
<Command>					trQuestVarSet("botActiveKeywords", 0);</Command>
<Command>					trQuestVarSet("botActiveSpeed", 0);</Command>
<Command>					trQuestVarSet("botActiveRange", 0);</Command>
<Command>					trQuestVarSet("botActiveFury", 0);</Command>
<Command>					int maxUnitCost = -1;</Command>
<Command>					for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>						yDatabaseNext("allUnits", true);</Command>
<Command><![CDATA[						if (yGetVar("allUnits", "action") == ACTION_READY && yGetVar("allUnits", "player") == 2) {]]></Command>
<Command>							int currentUnitCost = yGetVar("allUnits", "cost");</Command>
<Command>							if(currentUnitCost > maxUnitCost){</Command>
<Command>								maxUnitCost = currentUnitCost;</Command>
<Command>								trQuestVarSet("botActiveUnit", trQuestVarGet("allUnits"));</Command>
<Command>								trQuestVarSet("botActiveIndex", yGetPointer("allUnits"));</Command>
<Command>								trQuestVarSet("botActiveKeywords", 1*yGetVar("allUnits", "keywords"));</Command>
<Command>								trQuestVarSet("botActiveSpeed", 1*yGetVar("allUnits", "speed"));</Command>
<Command>								trQuestVarSet("botActiveRange", 1*yGetVar("allUnits", "range"));</Command>
<Command>								if(HasKeyword(FURIOUS, 1*trQuestVarGet("botActiveKeywords"))){</Command>
<Command>									trQuestVarSet("botActiveFury", 1);</Command>
<Command>								}</Command>
<Command>								trVectorSetUnitPos("botClickPos", "allUnits");</Command>
<Command>								trVectorSetUnitPos("botMovePos", "allUnits");</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(maxUnitCost > -1){</Command>
<Command>						// Bot Click Left</Command>
<Command>						trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>						trQuestVarSet("botPhase", BOT_PHASE_UNIT_MOVE);</Command>
<Command>					} else {</Command>
<Command>						// End Turn</Command>
<Command>						trQuestVarSet("botClick", -1);</Command>
<Command>						trQuestVarSet("botThinking", 47);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					// Wait until gameplayPhase is GAMEPLAY_SELECT</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case BOT_PHASE_UNIT_MOVE:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("gameplayPhase") == GAMEPLAY_WORK) {</Command>
<Command>					if(trQuestVarGet("botNoMove")==0){</Command>
<Command>						yClearDatabase("botReachable");</Command>
<Command>						trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*trQuestVarGet("botActiveUnit"), true));</Command>
<Command>						findAvailableTiles(findNearestTile("pos"), trQuestVarGet("botActiveSpeed"), "botReachable", HasKeyword(ETHEREAL, 1*trQuestVarGet("botActiveKeywords")));</Command>
<Command><![CDATA[						if((yGetDatabaseCount("botReachable") == 0) || (trQuestVarGet("botActiveSpeed") == 0)) {]]></Command>
<Command>							// Nowhere to move</Command>
<Command>							ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("botActiveIndex"), ACTION_DONE);</Command>
<Command>						} else {</Command>
<Command>							trQuestVarSetFromRand("botRandom", 1, yGetDatabaseCount("botReachable"), true);</Command>
<Command>							for(x=trQuestVarGet("botRandom"); >0) {</Command>
<Command>								yDatabaseNext("botReachable");</Command>
<Command>							}</Command>
<Command>							trVectorSetUnitPos("botClickPos", "botReachable");</Command>
<Command>							trVectorSetUnitPos("botMovePos", "botReachable");</Command>
<Command>							trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					trQuestVarSet("botPhase", BOT_PHASE_UNIT_ATTACK);</Command>
<Command>				} else {</Command>
<Command>					// Wait until gameplayPhase is GAMEPLAY_WORK</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>

<Command>			case BOT_PHASE_UNIT_ATTACK:</Command>
<Command>			{</Command>
<Command>				if (trQuestVarGet("gameplayPhase") == GAMEPLAY_SELECT) {</Command>
<Command>					trQuestVarSet("botPhase", BOT_PHASE_CARD_CHOOSE);</Command>
<Command>				} else if(trQuestVarGet("gameplayPhase") == GAMEPLAY_WORK){</Command>
<Command>					if(trQuestVarGet("botNoAttack") == 0){</Command>
<Command>						int maxTargetCost = -1;</Command>
<Command>						float dist = xsPow(trQuestVarGet("botActiveRange") * 6 + 1, 2);</Command>
<Command>						trVectorQuestVarSet("pos", kbGetBlockPosition(""+1*trQuestVarGet("botActiveUnit"), true));</Command>

<Command>						for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>							yDatabaseNext("allUnits");</Command>
<Command>							if (yGetVar("allUnits", "player") == 1) {</Command>
<Command><![CDATA[								if (zDistanceToVectorSquared("allUnits", "pos") < dist) {]]></Command>
<Command>									int currentTargetCost = yGetVar("allUnits", "cost");</Command>
<Command>									if(currentTargetCost > maxTargetCost){</Command>
<Command>										maxTargetCost = currentTargetCost;</Command>
<Command>										trVectorSetUnitPos("botClickPos", "allUnits");</Command>
<Command>									}</Command>
<Command>								}</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						if(maxTargetCost > -1){</Command>
<Command>							// Bot Click Right</Command>
<Command>							trQuestVarSet("botClick", RIGHT_CLICK);</Command>
<Command>							trQuestVarSet("botAttackTimer", trTime());</Command>
<Command>						} else {</Command>
<Command>							ySetVarByIndex("allUnits", "action", 1*trQuestVarGet("botActiveIndex"), ACTION_DONE);</Command>
<Command>							trQuestVarSet("botClick", LEFT_CLICK);</Command>
<Command>							trVectorQuestVarSet("botClickPos", xsVectorSet(110,0,110));</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					if(trQuestVarGet("botActiveFury") == 1){</Command>
<Command>						trQuestVarSet("botActiveFury", 0);</Command>
<Command>					} else {</Command>
<Command>						trQuestVarSet("botPhase", BOT_PHASE_UNIT_CHOOSE);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					// Wait until gameplayPhase is GAMEPLAY_WORK</Command>
<Command>					trQuestVarSet("botClick", 0);</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		xsEnableRule("Bot2");</Command>
<Command>		xsDisableRule("Bot1");</Command>

<Command>   }</Command>
<Command>}</Command>

<Command>rule Bot2</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trTimeMS() > trQuestVarGet("botTimeNext")){</Command>
<Command><![CDATA[		if(trQuestVarGet("botClick") < 0){]]></Command>
<Command>			trQuestVarSet("botThinking", trQuestVarGet("botThinking") + 1);</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("botThinking", 0);</Command>
<Command>			trVectorQuestVarSet("p2clickPos", trVectorQuestVarGet("botClickPos"));</Command>
<Command>			trQuestVarSet("p2click", trQuestVarGet("botClick"));</Command>
<Command>		}</Command>
<Command>		if(trQuestVarGet("botThinking") > 10){</Command>
<Command>			trTechInvokeGodPower(2, "Rain", vector(0,0,0), vector(0,0,0));</Command>
<Command>		} else {</Command>
<Command>			xsEnableRule("Bot1");</Command>
<Command>		}</Command>
<Command>		xsDisableRule("Bot2");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>rule match_test</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	for(x=3; >0) {</Command>
<Command>		for(p=2; >0) {</Command>

<Command>			addCardToDeck(p, "Khopesh");</Command>
<Command>			addCardToDeck(p, "Villager Atlantean");</Command>
<Command>			addCardToDeck(p, "Swordsman");</Command>
<Command>			addCardToDeck(p, "Maceman");</Command>
<Command>			addCardToDeck(p, "Skraeling");</Command>
<Command>			addCardToDeck(p, "Slinger");</Command>
<Command>			addCardToDeck(p, "Toxotes");</Command>
<Command>			addCardToDeck(p, "Raiding Cavalry");</Command>
<Command>			addCardToDeck(p, "Trident Soldier");</Command>
<Command>			addCardToDeck(p, "Jarl");</Command>
<Command>			addCardToDeck(p, "Hero Greek Ajax");</Command>

<Command>			addCardToDeck(p, "Scout");</Command>
<Command>			addCardToDeck(p, "Prodromos");</Command>
<Command>			addCardToDeck(p, "Promethean Small");</Command>
<Command>			addCardToDeck(p, "Promethean");</Command>
<Command>			addCardToDeck(p, "Hero Greek Chiron");</Command>
<Command>			addCardToDeck(p, "Hero Greek Theseus");</Command>
<Command>		}</Command>
<Command>	}</Command>

<Command>	InitBot(BOT_PERSONALITY_DEFAULT);</Command>

<Command>	xsDisableRule("match_test");</Command>
<Command>}</Command>

<Command>rule match_00_start</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	trQuestVarSet("p1commander", trGetNextUnitScenarioNameNumber());</Command>
<Command>	addCardToHand(1, kbGetProtoUnitID("Hero Greek Jason"), SPELL_COMMANDER);</Command>


<Command>	trQuestVarSet("p2commander", trGetNextUnitScenarioNameNumber());</Command>
<Command>	addCardToHand(2, kbGetProtoUnitID("Hero Greek Jason"), SPELL_COMMANDER);</Command>

<Command>	trTechGodPower(0, "spy", 2);</Command>
<Command>	for(p=2; >0) {</Command>

<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("p"+p+"commander"), true);</Command>
<Command>		trTechInvokeGodPower(0, "spy", xsVectorSet(1,1,1), xsVectorSet(1,1,1));</Command>

<Command>		yDatabaseNext("p"+p+"hand");</Command>
<Command>		teleportToTile("p"+p+"hand", 1*trQuestVarGet("p"+p+"startTile"));</Command>
<Command>		transferUnit("allUnits", "p"+p+"hand");</Command>
<Command>		yClearDatabase("p"+p+"hand");</Command>
<Command>		trQuestVarSet("p"+p+"drawCards", 4);</Command>


<Command>		zSetVarByIndex("tiles", "occupied", 1*trQuestVarGet("p"+p+"startTile"), TILE_OCCUPIED);</Command>

<Command>		shuffleDeck(p);</Command>
<Command>	}</Command>

<Command>	// Ravens</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(870);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Raven"));</Command>
<Command>	trSetSelectedScale(0,0,0);</Command>

<Command>	trUnitSelectClear();</Command>
<Command>	trUnitSelectByID(872);</Command>
<Command>	trMutateSelected(kbGetProtoUnitID("Raven"));</Command>
<Command>	trSetSelectedScale(0,0,0);</Command>

<Command>	uiFindType("Raven");</Command>
<Command>	uiCreateNumberGroup(1);</Command>

<Command>	trQuestVarSet("p1raven", 870);</Command>
<Command>	trQuestVarSet("p1block", 869);</Command>
<Command>	trQuestVarSet("p2raven", 872);</Command>
<Command>	trQuestVarSet("p2block", 871);</Command>

<Command>	uiClearSelection();</Command>

<Command>	xsDisableRule("match_00_start");</Command>
<Command>	xsEnableRule("match_01_mulliganStart");</Command>
<Command>	xsEnableRule("gameplay_toggle_camera");</Command>
<Command>}</Command>

<Command>rule match_01_mulliganStart</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (trQuestVarGet("p1drawCards") + trQuestVarGet("p2drawCards") == 0) {</Command>
<Command>		unitTransform("Spy Eye", "Healing SFX");</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>				yDatabaseNext("p"+p+"hand");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>				trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>				ySetVar("p"+p+"hand", "mulligan", 0);</Command>
<Command>			}</Command>
<Command>			trQuestVarSet("p"+p+"done", 0);</Command>
<Command>		}</Command>
<Command>		trMessageSetText("Left click to choose cards to mulligan. Right click to finish.",-1);</Command>

<Command>		if(Multiplayer){</Command>
<Command>			trCounterAddTime("counter", 21, 1, "Mulligan phase",-1);</Command>
<Command>		} else {</Command>
<Command>			trQuestVarSet("p2done", 1);</Command>
<Command>		}</Command>

<Command>		xsEnableRule("match_02_mulligan");</Command>
<Command>		xsDisableRule("match_01_mulliganStart");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule match_02_mulligan</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("p1done") + trQuestVarGet("p2done") == 2 || (Multiplayer  && (trTime() > cActivationTime + 20))) {]]></Command>
<Command>		xsEnableRule("match_03_replace");</Command>
<Command>		xsDisableRule("match_02_mulligan");</Command>
<Command>	} else {</Command>
<Command>		int unit = -1;</Command>
<Command>		for(p=2; >0) {</Command>
<Command>			if (trQuestVarGet("p"+p+"done") == 0) {</Command>
<Command>				switch(1*trQuestVarGet("p"+p+"click"))</Command>
<Command>				{</Command>
<Command>					case LEFT_CLICK:</Command>
<Command>					{</Command>
<Command>						unit = -1;</Command>
<Command>						for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>							yDatabaseNext("p"+p+"hand");</Command>
<Command><![CDATA[							if (zDistanceToVectorSquared("p"+p+"hand", "p"+p+"clickPos") < 4) {]]></Command>
<Command>								unit = yGetPointer("p"+p+"hand");</Command>
<Command>								break;</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>						if (unit > -1) {</Command>
<Command>							if (trCurrentPlayer() == p) {</Command>
<Command>								displayCardKeywordsAndDescription("p"+p+"hand", unit);</Command>
<Command>								trSoundPlayFN("ui\scroll.wav","1",-1,"","");</Command>
<Command>							}</Command>
<Command>							ySetPointer("p"+p+"hand", unit);</Command>
<Command>							ySetVar("p"+p+"hand", "mulligan", 1 - yGetVar("p"+p+"hand", "mulligan"));</Command>
<Command>							trUnitSelectClear();</Command>
<Command>							trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>							if (yGetVar("p"+p+"hand", "mulligan")  == 0) {</Command>
<Command>								trMutateSelected(kbGetProtoUnitID("Garrison Flag Sky Passage"));</Command>
<Command>							} else {</Command>
<Command>								trMutateSelected(kbGetProtoUnitID("Victory Marker"));</Command>
<Command>							}</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>					case RIGHT_CLICK:</Command>
<Command>					{</Command>
<Command>						trQuestVarSet("p"+p+"done", 1);</Command>
<Command>						if (trCurrentPlayer() == p) {</Command>
<Command>							trSoundPlayFN("favordump.wav","1",-1,"","");</Command>
<Command>						}</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>			trQuestVarSet("p"+p+"click", 0);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule match_03_replace</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trCounterAbort("counter");</Command>
<Command>	for(p=2; >0) {</Command>
<Command>		updateHandPlayable(p);</Command>
<Command>		for(x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"hand", true);</Command>
<Command>			if (yGetVar("p"+p+"hand", "mulligan") == 1) {</Command>
<Command>				addCardToDeck(p, kbGetProtoUnitName(1*yGetVar("p"+p+"hand", "proto")), yGetVar("p"+p+"hand", "spell"));</Command>
<Command>				trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") + 1);</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>			} else {</Command>
<Command>				transferUnit("temp", "p"+p+"hand");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yClearDatabase("p"+p+"hand");</Command>
<Command>		for(x=yGetDatabaseCount("temp"); >0) {</Command>
<Command>			yDatabaseNext("temp");</Command>
<Command>			transferUnit("p"+p+"hand", "temp");</Command>
<Command>		}</Command>
<Command>		yClearDatabase("temp");</Command>
<Command>		shuffleDeck(p);</Command>
<Command>	}</Command>
<Command>	trQuestVarSet("activePlayer", 2);</Command>
<Command>	xsEnableRule("turn_00_start");</Command>
<Command>	xsDisableRule("match_03_replace");</Command>
<Command>}</Command>

<Command>rule turn_00_start</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	if (yGetDatabaseCount("ambushAttacks") + yGetDatabaseCount("attacks") + trQuestVarGet("lightningActivate") - trQuestVarGet("lightningPop") == 0) {</Command>

<Command>		trQuestVarSet("turnEnd", 0);</Command>
<Command>		trSoundPlayFN("fanfare.wav","1",-1,"","");</Command>


<Command>		int p = 3 - trQuestVarGet("activePlayer");</Command>

<Command><![CDATA[		if(Multiplayer == false && p == 2){]]></Command>
<Command>			trQuestVarSet("botPhase", 0);</Command>
<Command>			trQuestVarSet("botThinking", 0);</Command>
<Command>			xsEnableRule("Bot1");</Command>
<Command>		}</Command>

<Command>		xsSetContextPlayer(p);</Command>
<Command>		for(x=yGetDatabaseCount("allUnits"); >0) {</Command>
<Command>			yDatabaseNext("allUnits");</Command>
<Command>			if (yGetVar("allUnits", "player") == p) {</Command>
<Command>				if (yGetVar("allUnits", "stunTime") > 0) {</Command>
<Command>					ySetVar("allUnits", "stunTime", yGetVar("allUnits", "stunTime") - 1);</Command>
<Command>					if (yGetVar("allUnits", "stunTime") == 0) {</Command>
<Command>						ySetVar("allUnits", "action", ACTION_READY);</Command>
<Command>						trUnitSelectClear();</Command>
<Command>						trUnitSelect(""+1*yGetVar("allUnits", "stunSFX"), true);</Command>
<Command>						trMutateSelected(kbGetProtoUnitID("Cinematic Block"));</Command>
<Command>					} else {</Command>
<Command>						ySetVar("allUnits", "action", ACTION_STUNNED);</Command>
<Command>					}</Command>
<Command>				} else {</Command>
<Command>					ySetVar("allUnits", "action", ACTION_READY);</Command>
<Command>				}</Command>
<Command>				if (HasKeyword(REGENERATE, 1*yGetVar("allUnits", "keywords"))) {</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelect(""+1*trQuestVarGet("allUnits"), true);</Command>
<Command>					trDamageUnitPercent(-100);</Command>
<Command>					ySetVar("allUnits", "health",</Command>
<Command>						xsMax(yGetVar("allUnits", "health"), kbUnitGetCurrentHitpoints(kbGetBlockID(""+1*trQuestVarGet("allUnits"), true))));</Command>
<Command>				}</Command>
<Command>			} else {</Command>
<Command>				ySetVar("allUnits", "action", ACTION_DONE);</Command>
<Command>			}</Command>
<Command>		}</Command>


<Command>		if (p == 1) {</Command>
<Command>			trQuestVarSet("maxMana", trQuestVarGet("maxMana") + 1);</Command>
<Command>		}</Command>
<Command>		trQuestVarSet("p"+p+"mana", trQuestVarGet("maxMana"));</Command>
<Command>		trQuestVarSet("activePlayer", p);</Command>
<Command>		trQuestVarSet("p"+p+"click", 0);</Command>
<Command>		highlightReady(100);</Command>

<Command>		trTechGodPower(p, "rain", 1);</Command>

<Command>		trQuestVarSet("p"+p+"drawCards", trQuestVarGet("p"+p+"drawCards") + 1);</Command>

<Command>		if(Multiplayer){</Command>
<Command>			trCounterAddTime("turnTimer", 91, 1, "Turn end", -1);</Command>
<Command>		}</Command>
<Command>		trCounterAddTime("mana", -1, -9999999,</Command>
<Command><![CDATA[			"<color={Playercolor("+p+")}>Mana: "+1*trQuestVarGet("p"+p+"mana") + "/" + 1*trQuestVarGet("maxMana"));]]></Command>

<Command>		if (trQuestVarGet("activePlayer") == 1) {</Command>
<Command>			trOverlayTextColour(0, 0, 255);</Command>
<Command>		} else {</Command>
<Command>			trOverlayTextColour(255,0,0);</Command>
<Command>		}</Command>

<Command>		xsEnableRule("gameplay_01_select");</Command>
<Command>		xsEnableRule("turn_01_end");</Command>
<Command>		xsDisableRule("turn_00_start");</Command>
<Command>	}</Command>
<Command>}</Command>


<Command>rule turn_01_end</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	int p = trQuestVarGet("activePlayer");</Command>
<Command><![CDATA[	if (trCheckGPActive("rain", p) == true || (Multiplayer && (trTime() > cActivationTime + 90))) {]]></Command>
<Command>		ChatLogShow(1);</Command>
<Command>		ChatLogShow(2);</Command>
<Command>		trQuestVarSet("p"+p+"manaflow", trQuestVarGet("p"+p+"mana"));</Command>
<Command>		trQuestVarSet("p"+p+"mana", -1);</Command>
<Command>		updateHandPlayable(p);</Command>

<Command>		trPlayerKillAllGodPowers(p);</Command>
<Command>		trTechGodPower(p, "vision", 1);</Command>
<Command>		trTechGodPower(p, "animal magnetism", 1);</Command>
<Command>		trCounterAbort("mana");</Command>
<Command>		trCounterAbort("turnTimer");</Command>

<Command>		trQuestVarSet("turnEnd", 1);</Command>

<Command>		// Discard fleeting cards</Command>
<Command>		bool fleeting = false;</Command>
<Command>		int type = 0;</Command>
<Command>		yDatabasePointerDefault("p"+p+"hand");</Command>
<Command>		for (x=yGetDatabaseCount("p"+p+"hand"); >0) {</Command>
<Command>			yDatabaseNext("p"+p+"hand");</Command>
<Command>			if (HasKeyword(FLEETING, 1*yGetVar("p"+p+"hand", "keywords"))) {</Command>
<Command>				fleeting = true;</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelectByID(1*yGetVar("p"+p+"hand", "pos"));</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				trUnitSelectClear();</Command>
<Command>				trUnitSelect(""+1*trQuestVarGet("p"+p+"hand"), true);</Command>
<Command>				trUnitChangeProtoUnit("Hero Death");</Command>
<Command>				if (yGetVar("p"+p+"hand", "spell") == SPELL_NONE) {</Command>
<Command>					type = yGetVar("p"+p+"hand", "proto");</Command>
<Command>					ChatLog(p, "Discarded " + trStringQuestVarGet("card_" + type + "_name"));</Command>
<Command>				} else {</Command>
<Command>					type = yGetVar("p"+p+"hand", "spell");</Command>
<Command>					ChatLog(p, "Discarded " + trStringQuestVarGet("spell_" + type + "_name"));</Command>
<Command>				}</Command>
<Command>				removeUnit("p"+p+"hand");</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command><![CDATA[		if (fleeting && trCurrentPlayer() == p) {]]></Command>
<Command>			trSoundPlayFN("olympustemplesfx.wav","1",-1,"","");</Command>
<Command>		}</Command>
<Command>		trDelayedRuleActivation("turn_00_start");</Command>
<Command>		xsDisableRule("turn_01_end");</Command>
<Command>	}</Command>
<Command>}</Command>
</Effect>
</Effects>
</trigger>