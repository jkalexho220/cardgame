<?xml version = "1.0"?>
<trigger version="2">

<!-- Z DUSK Triggers -->

<Conditions>
	<Condition name="$$22289$$Always">
		<Expression>true</Expression>
	</Condition>

</Conditions>

<Effects>
	<Effect name="$$22355$$SetIdleProcessing">
    	<Param name="IdleProc" dispName="$$22356$$Process Idle:" varType="bool">true</Param>
    	<Command>trSetUnitIdleProcessing(%mod%IdleProc%mod%);</Command>
	</Effect>

<Effect name=" Card Game">

<Command>bool playerIsPlaying(int p = 0) {</Command>
<Command><![CDATA[	return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);]]></Command>
<Command>}</Command>

<Command>void trVectorSetUnitPos(string v = "", string db = "", bool reverse = true) {</Command>
<Command>	trVectorQuestVarSet(v, kbGetBlockPosition(""+1*trQuestVarGet(db), reverse));</Command>
<Command>}</Command>

<Command>void trVectorScale(string db = "", float s = 1.0) {</Command>
<Command>	trQuestVarSet(db+"x", trQuestVarGet(db+"x") * s);</Command>
<Command>	trQuestVarSet(db+"z", trQuestVarGet(db+"z") * s);</Command>
<Command>}</Command>


<Command>void vectorSnapToGrid(string qv = "") {</Command>
<Command>	int x = trQuestVarGet(qv+"x") / 2;</Command>
<Command>	int z = trQuestVarGet(qv+"z") / 2;</Command>
<Command>	trQuestVarSet(qv+"x", x * 2 + 1);</Command>
<Command>	trQuestVarSet(qv+"z", z * 2 + 1);</Command>
<Command>}</Command>

<Command>int zModulo(int mod = 10, float val = 0) {</Command>
<Command>	int m = 0 + mod;</Command>
<Command>	int v = xsRound(val);</Command>
<Command>	return(v - xsFloor(val / m) * m);</Command>
<Command>}</Command>

<Command>float fModulo(float mod = 0, float val = 0) {</Command>
<Command>	int c = 0;</Command>
<Command>	if (val > 0) {</Command>
<Command>		c = val / mod;</Command>
<Command>	} else {</Command>
<Command>		c = val / mod - 1;</Command>
<Command>	}</Command>
<Command>	return(0.0 + val - mod * c);</Command>
<Command>}</Command>


<Command>void zUnitHeading(float a = 0) {</Command>
<Command>	trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);</Command>
<Command>}</Command>

<Command>void zInitProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>	trQuestVarSet("p"+p+"pf"+kbGetProtoUnitID(r)+"f"+f, v);</Command>
<Command>}</Command>

<Command>void zSetProtoUnitStat(string r = "", int p = 0, int f = 0, float v = 0.0) {</Command>
<Command>	for(zsps=0; >1){}</Command>
<Command>	zsps = kbGetProtoUnitID(r);</Command>
<Command>	trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet("p"+p+"pf"+zsps+"f"+f));</Command>
<Command>	trQuestVarSet("p"+p+"pf"+zsps+"f"+f, 0.0 + v);</Command>
<Command>}</Command>

<Command>void vectorToGrid(string from = "", string to = ""){</Command>
<Command>	int x = 0 + trQuestVarGet(from+"x") / 2;</Command>
<Command>	int z = 0 + trQuestVarGet(from+"z") / 2;</Command>
<Command>	trQuestVarSet(to+"x", x);</Command>
<Command>	trQuestVarSet(to+"z", z);</Command>
<Command>}</Command>

<Command>void gridToVector(string from = "", string to = "") {</Command>
<Command>	trQuestVarSet(to+"x", trQuestVarGet(from+"x") * 2 + 1);</Command>
<Command>	trQuestVarSet(to+"z", trQuestVarGet(from+"z") * 2 + 1);</Command>
<Command>}</Command>

<Command>float gridDistanceSquared(string from = "", string to = "") {</Command>
<Command>	float xdiff = trQuestVarGet(to+"x") - trQuestVarGet(from+"x");</Command>
<Command>	float zdiff = trQuestVarGet(to+"z") - trQuestVarGet(from+"z");</Command>
<Command>	return(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>}</Command>

<Command>void zSquareVar(string qv = "") {</Command>
<Command>	trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));</Command>
<Command>}</Command>

<Command>float zDistanceBetweenVectorsSquared(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xdiff * xdiff + zdiff * zdiff;</Command>
<Command>	return(dist);</Command>
<Command>}</Command>



<Command>float zDistanceBetweenVectors(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float zDistanceBetweenVectors3d(string start = "", string end = "") {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float ydiff = trQuestVarGet(end + "Y") - trQuestVarGet(start + "Y");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);</Command>
<Command>	return(dist);</Command>
<Command>}</Command>

<Command>float zDistanceToVectorSquared(string qv = "", string v = "") {</Command>
<Command>	trVectorQuestVarSet("abcd", kbGetBlockPosition(""+1*trQuestVarGet(qv), true));</Command>
<Command>	return(zDistanceBetweenVectorsSquared("abcd", v));</Command>
<Command>}</Command>

<Command>float zDistanceToVector(string qv = "", string v = "") {</Command>
<Command>	trVectorQuestVarSet("abcd", kbGetBlockPosition(""+1*trQuestVarGet(qv), true));</Command>
<Command>	return(zDistanceBetweenVectors("abcd", v));</Command>
<Command>}</Command>

<Command>void trVectorSetFromAngle(string qv = "", float angle = 0) {</Command>
<Command>	trVectorQuestVarSet(qv,xsVectorSet(Math_sin(angle), 0, Math_cos(angle)));</Command>
<Command>}</Command>

<Command>float angleBetweenVectors(string from = "", string to = "") {</Command>
<Command>	float a = Math_atan((trQuestVarGet(to+"X")-trQuestVarGet(from+"X"))/(trQuestVarGet(to+"Z")-trQuestVarGet(from+"Z")));</Command>
<Command>	if (trVectorQuestVarGetZ(from) > trVectorQuestVarGetZ(to)) {</Command>
<Command>	    if (trVectorQuestVarGetX(from) > trVectorQuestVarGetX(to)) {</Command>
<Command>			a = a - PI;</Command>
<Command>	    } else {</Command>
<Command>			a = a + PI;</Command>
<Command>	    }</Command>
<Command>  	}</Command>
<Command>  	return(a);</Command>
<Command>}</Command>

<Command>vector zGetUnitVector(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);</Command>
<Command>	vector ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector zGetUnitVector3d(string start = "", string end = "", float mod = 1.0) {</Command>
<Command>	float xdiff = trQuestVarGet(end + "X") - trQuestVarGet(start + "X");</Command>
<Command>	float ydiff = trQuestVarGet(end + "Y") - trQuestVarGet(start + "Y");</Command>
<Command>	float zdiff = trQuestVarGet(end + "Z") - trQuestVarGet(start + "Z");</Command>
<Command>	float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);</Command>
<Command>	vector ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector crossProduct(string a = "", string b = "") {</Command>
<Command>	float x = trQuestVarGet(a + "y") * trQuestVarGet(b + "z") - trQuestVarGet(a + "z") * trQuestVarGet(b + "y");</Command>
<Command>	float y = trQuestVarGet(a + "z") * trQuestVarGet(b + "x") - trQuestVarGet(a + "x") * trQuestVarGet(b + "z");</Command>
<Command>	float z = trQuestVarGet(a + "x") * trQuestVarGet(b + "y") - trQuestVarGet(a + "y") * trQuestVarGet(b + "x");</Command>
<Command>	vector ret = xsVectorSet(x, y, z);</Command>
<Command>	return(ret);</Command>
<Command>}</Command>

<Command>vector intersectionWithCircle(string start = "", string end = "", string center = "", float radius = 0) {</Command>
<Command>	trVectorQuestVarSet("iDir", zGetUnitVector(start, end));</Command>
<Command>	float x = 0;</Command>
<Command>	float z = 0;</Command>
<Command>	float dist = 0;</Command>
<Command>	float len = radius * 2;</Command>
<Command>	float lenmod = radius;</Command>
<Command>	for(i=8; >0) {</Command>
<Command>		x = trQuestVarGet(start+"x") + trQuestVarGet("iDirx") * len;</Command>
<Command>		z = trQuestVarGet(start+"z") + trQuestVarGet("iDirz") * len;</Command>
<Command>		dist = xsPow(x - trQuestVarGet(center+"x"), 2) + xsPow(z - trQuestVarGet(center+"z"), 2);</Command>
<Command>		if (dist > radius * radius) {</Command>
<Command>			len = len - lenmod;</Command>
<Command>		} else {</Command>
<Command>			len = len + lenmod;</Command>
<Command>		}</Command>
<Command>		lenmod = lenmod * 0.5;</Command>
<Command>	}</Command>
<Command>	return(xsVectorSet(x,0,z));</Command>
<Command>}</Command>

<Command>void modularCounterInit(string name = "", int size = 0) {</Command>
<Command>	trQuestVarSet("counter" + name + "size", size);</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	trQuestVarSet(name, 1);</Command>
<Command>}</Command>

<Command>int modularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "pointer", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "pointer") > trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "pointer", 1);</Command>
<Command>	}</Command>
<Command>	trQuestVarCopy(name, "counter" + name + "pointer");</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>}</Command>

<Command>int peekModularCounterNext(string name = "") {</Command>
<Command>	trQuestVarSet("counter" + name + "fake", 1 + trQuestVarGet("counter" + name + "pointer"));</Command>
<Command>	if (trQuestVarGet("counter" + name + "fake") >= trQuestVarGet("counter" + name + "size")) {</Command>
<Command>		trQuestVarSet("counter" + name + "fake", 1);</Command>
<Command>	}</Command>
<Command>	return(0 + trQuestVarGet("counter" + name + "fake"));</Command>
<Command>}</Command>

<Command>void zBankInit(string name = "", int start = 0, int length = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"start", start);</Command>
<Command>	trQuestVarSet("z"+name+"end", start + length);</Command>
<Command>	trQuestVarSet("z"+name+"pointer", start);</Command>
<Command>	trQuestVarSet(name, start);</Command>
<Command>}</Command>

<Command>int zBankNext(string name = "", bool select = false) {</Command>
<Command>	trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"pointer") + 1);</Command>
<Command>	if (trQuestVarGet("z"+name+"pointer") >= trQuestVarGet("z"+name+"end")) {</Command>
<Command>		trQuestVarSet("z"+name+"pointer", trQuestVarGet("z"+name+"start"));</Command>
<Command>	}</Command>
<Command>	trQuestVarCopy(name, "z"+name+"pointer");</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelectByID(1*trQuestVarGet(name));</Command>
<Command>	}</Command>
<Command>	return(1*trQuestVarGet(name));</Command>
<Command>}</Command>

<Command>void zSetVar(string name = "", string var = "", float val = 0) {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>void zSetVarByIndex(string name = "", string var = "", int index = 0, float val = 0) {</Command>
<Command>	trQuestVarSet("z"+name+"i"+index+"v"+var, val);</Command>
<Command>}</Command>

<Command>float zGetVar(string name = "", string var = "") {</Command>
<Command>	int index = trQuestVarGet(name);</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>float zGetVarByIndex(string name = "", string var = "", int index = 0) {</Command>
<Command>	return(trQuestVarGet("z"+name+"i"+index+"v"+var));</Command>
<Command>}</Command>

<Command>int zGetBankCount(string name = "") {</Command>
<Command>	return(trQuestVarGet("z"+name+"end") - trQuestVarGet("z"+name+"start"));</Command>
<Command>}</Command>

<Command>void yAddToDatabase(string to = "", string from = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + to + "count");</Command>
<Command>   	trQuestVarSet("zdatalite" + to + "index"+zdatacount, trQuestVarGet(from));</Command>
<Command>   	trQuestVarSet("zdatalite" + to + "count", zdatacount+1);</Command>
<Command>}</Command>

<Command>int yGetDatabaseCount(string db = "") {</Command>
<Command>	return(trQuestVarGet("zdatalite" + db + "count"));</Command>
<Command>}</Command>

<Command>int yDatabaseNext(string db = "", bool select = false) {</Command>
<Command>	for(zdatapointer=0;>1){}</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "pointer")-1);</Command>
<Command>	if (0 > trQuestVarGet("zdatalite" + db + "pointer")) {</Command>
<Command>		trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "count")-1);</Command>
<Command>	}</Command>
<Command>	if (trQuestVarGet("zdatalite" + db + "pointer") >= trQuestVarGet("zdatalite" + db + "count")) {</Command>
<Command>		trQuestVarSet("zdatalite" + db + "pointer", trQuestVarGet("zdatalite" + db + "count")-1);</Command>
<Command>	}</Command>
<Command>	zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet(db, trQuestVarGet("zdatalite" + db + "index"+zdatapointer));</Command>
<Command>	if (select) {</Command>
<Command>		trUnitSelectClear();</Command>
<Command>		trUnitSelect(""+1*trQuestVarGet(db), true);</Command>
<Command>		return(kbGetBlockID(""+1*trQuestVarGet(db), true));</Command>
<Command>	}</Command>
<Command>	return(trQuestVarGet(db));</Command>
<Command>}</Command>

<Command>void yDatabaseSelectAll(string db = "") {</Command>
<Command>	trUnitSelectClear();</Command>
<Command><![CDATA[	for(zdatapointer=0; <yGetDatabaseCount(db)) {]]></Command>
<Command>		trUnitSelect(""+1*trQuestVarGet("zdatalite"+db+"index"+zdatapointer), true);</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>bool yDatabaseContains(string db = "", int index = 0) {</Command>
<Command>	for (x=yGetDatabaseCount(db) - 1; >=0) {</Command>
<Command>		if (xsRound(trQuestVarGet("zdatalite" + db + "index" + x)) == index) {</Command>
<Command>			trQuestVarSet("zdatalite" + db + "pointer", x);</Command>
<Command>			trQuestVarSet(db, index);</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelect(""+index, true);</Command>
<Command>			return(true);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(false);</Command>
<Command>}</Command>


<Command>void yDatabasePointerDefault(string db = "") {</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", 0);</Command>
<Command>}</Command>

<Command>void yRemoveFromDatabase(string db = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count") - 1;</Command>
<Command>	int zdataremove = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "index"+zdataremove,</Command>
<Command>		trQuestVarGet("zdatalite" + db + "index"+zdatacount));</Command>
<Command>	trQuestVarSet("zdatalite" + db + "count", zdatacount);</Command>
<Command>}</Command>

<Command>void yRemoveUpdateVar(string db = "", string attr = "") {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count");</Command>
<Command>	int zdataremove = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdataremove + "" + attr,</Command>
<Command>		trQuestVarGet("zdatalite" + db + "" + zdatacount + "" + attr));</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, 0);</Command>
<Command>}</Command>

<Command>void yTransferUpdateVar(string to = "", string from = "", string attr = "") {</Command>
<Command>	int zdatato = trQuestVarGet("zdatalite" + to + "count");</Command>
<Command>	int zdatafrom = trQuestVarGet("zdatalite" + from + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + to + ""  + zdatato + "" + attr,</Command>
<Command>		trQuestVarGet("zdatalite" + from + ""  + zdatafrom + "" + attr));</Command>
<Command>}</Command>

<Command>void yAddUpdateVar(string db = "", string attr = "", float value = 0.0) {</Command>
<Command>	int zdatacount = trQuestVarGet("zdatalite" + db + "count") - 1;</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatacount + "" + attr, value);</Command>
<Command>}</Command>

<Command>float yGetVar(string db = "", string attr = "") {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	return(trQuestVarGet("zdatalite" + db + "" + zdatapointer + "" + attr));</Command>
<Command>}</Command>

<Command>void ySetVar(string db = "", string attr = "", float value = 0.0) {</Command>
<Command>	int zdatapointer = trQuestVarGet("zdatalite" + db + "pointer");</Command>
<Command>	trQuestVarSet("zdatalite" + db + "" + zdatapointer + "" + attr, value);</Command>
<Command>}</Command>

<Command>void yClearDatabase(string db = "") {</Command>
<Command>	trQuestVarSet("zdatalite" + db + "count", 0);</Command>
<Command>	trQuestVarSet("zdatalite" + db + "pointer", 0);</Command>
<Command>	trQuestVarSet(db, 0);</Command>
<Command>}</Command>


<Command>int yFindLatestReverse(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {</Command>
<Command>		int i = kbGetBlockID(""+x, true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				trQuestVarSet(qv, x);</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>int yFindLatest(string qv = "", string proto = "", int p = 0) {</Command>
<Command>	int id = kbGetProtoUnitID(proto);</Command>
<Command>	trUnitSelectClear();</Command>
<Command>	trQuestVarSet("next",trGetNextUnitScenarioNameNumber() - 1);</Command>
<Command>	while(trQuestVarGet("next") > trQuestVarGet(qv)) {</Command>
<Command>		trQuestVarSet(qv, 1 + trQuestVarGet(qv));</Command>
<Command>		int i = kbGetBlockID(""+1*trQuestVarGet(qv), true);</Command>
<Command>		if (kbGetUnitBaseTypeID(i) == id) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			trUnitSelectByID(i);</Command>
<Command>			if (trUnitIsOwnedBy(p)) {</Command>
<Command>				return(i);</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>
<Command>void DeploySober(string p="", string v=""){</Command>
<Command>	int next = trGetNextUnitScenarioNameNumber();</Command>
<Command>	trArmyDispatch("1,10",p,1,trVectorQuestVarGetX(v), trVectorQuestVarGetY(v), trVectorQuestVarGetZ(v),0,true);</Command>
<Command>	trUnitSelectClear();trUnitSelect(""+next, true);</Command>
<Command>	trUnitTeleport(trVectorQuestVarGetX(v),trVectorQuestVarGetY(v),trVectorQuestVarGetZ(v));</Command>
<Command>}</Command>


<Command>rule initializeEverything</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	// Set idle processing to false so the game doesn't lag from trying to process 128 murmillos</Command>
<Command>	trSetUnitIdleProcessing(false);</Command>
<Command>    trSetObscuredUnits(false);</Command>
<Command>	trSetCivAndCulture(1, 9, 3); // Set P1 to Kronos</Command>
<Command>	trSetCivAndCulture(2, 9, 3); // Set P2 to Kronos</Command>
<Command>	bool multiplayer = aiIsMultiplayer(); 	// nottud is smart</Command>
<Command><![CDATA[	if(multiplayer && kbIsPlayerHuman(2) == false){]]></Command>
<Command>		multiplayer = false; // or kick?</Command>
<Command>	}</Command>
<Command>	if(multiplayer){</Command>
<Command>		trChatSend(0, "Mode:Multiplayer");</Command>
<Command>	} else {</Command>
<Command>		trChatSend(0, "Mode:Singleplayer");</Command>
<Command>		bool virgin = true;</Command>
<Command>		trChatSend(0, "Checking if played before...");</Command>
<Command><![CDATA[		if(virgin && trQuestVarGet("chad") == 0){]]></Command>
<Command>			xsEnableRule("CinPrologue00");</Command>
<Command>		}</Command>
<Command>	}</Command>


<Command>	// Modify vision revealer pop count</Command>
<Command>	trModifyProtounit("Vision Revealer", 1, 6, 9999);</Command>
<Command>	trModifyProtounit("Vision Revealer", 2, 6, 9999);</Command>
<Command>	// Modify vision sfx hp</Command>
<Command>	trModifyProtounit("Vision SFX", 1, 0, -9999);</Command>
<Command>	trModifyProtounit("Vision SFX", 2, 0, -9999);</Command>
<Command>	// Modify animal attractor flying</Command>
<Command>	trModifyProtounit("Animal Attractor", 1, 55, 4);</Command>
<Command>	trModifyProtounit("Animal Attractor", 2, 55, 4);</Command>

<Command>	// Disable god powers</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(1, false);</Command>
<Command>	trPlayerTechTreeEnabledGodPowers(2, false);</Command>

<Command>	xsDisableRule("initializeEverything");</Command>
<Command>}</Command>

<Command>const int TILE_EMPTY = 0;</Command>
<Command>const int TILE_IMPASSABLE = 1;</Command>
<Command>const int TILE_OCCUPIED = 2;</Command>


<Command>void setupBoard() {</Command>
<Command>	unitTransform("Statue of Automaton Base", "Rocket");</Command>

<Command>	trQuestVarSet("borders", trQuestVarGet("zbordersend") - 2);</Command>
<Command>	bool allborders = false;</Command>
<Command>	int count = 0;</Command>
<Command>	int statue = kbGetProtoUnitID("Statue of Automaton Base");</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		trVectorSetUnitPos("currentPos", "tiles", false);</Command>
<Command>		if (allborders == false) {</Command>
<Command>			for(y=6; >0) {</Command>
<Command>				zBankNext("borders");</Command>
<Command>				yAddToDatabase("borderSearch", "borders");</Command>
<Command>				if (trQuestVarGet("borders") == trQuestVarGet("zbordersend") - 2) {</Command>
<Command>					allborders = true;</Command>
<Command>					break;</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>


<Command>		// Assigning neighbors to the tile</Command>
<Command>		for (y=yGetDatabaseCount("neighbors"); >0) {</Command>
<Command>			yDatabaseNext("neighbors");</Command>
<Command>			if (zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors")) == 6) {</Command>
<Command>				yRemoveFromDatabase("neighbors");</Command>
<Command>			} else {</Command>
<Command>				// Tiles have radius 3 and are 6 units apart.</Command>
<Command>				// Add this tile to the neighborlist of adjacent tiles and add adjacent neighbors to this tile's neighborlist</Command>
<Command><![CDATA[				if (zDistanceToVectorSquared("neighbors", "currentPos") < 40) {]]></Command>
<Command>					count = zGetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"));</Command>
<Command>					zSetVarByIndex("tiles", "neighbor"+count, 1*trQuestVarGet("neighbors"), trQuestVarGet("tiles"));</Command>
<Command>					zSetVarByIndex("tiles", "neighborCount", 1*trQuestVarGet("neighbors"), count + 1);</Command>

<Command>					count = zGetVar("tiles", "neighborCount");</Command>
<Command>					zSetVar("tiles", "neighbor"+count, trQuestVarGet("neighbors"));</Command>
<Command>					zSetVar("tiles", "neighborCount", count + 1);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		yAddToDatabase("neighbors", "tiles");</Command>

<Command>		// Assigning borders to the tile</Command>
<Command>		for (y=yGetDatabaseCount("borderSearch"); >0) {</Command>
<Command>			yDatabaseNext("borderSearch");</Command>
<Command>			if (yGetVar("borderSearch", "count") == 2) {</Command>
<Command>				yRemoveFromDatabase("borderSearch");</Command>
<Command>				yRemoveUpdateVar("borderSearch", "count");</Command>
<Command>			} else {</Command>
<Command><![CDATA[				if (zDistanceToVectorSquared("borderSearch", "currentPos") < 10) {]]></Command>
<Command>					count = zGetVar("tiles", "borderCount");</Command>
<Command>					zSetVar("tiles", "border"+count, trQuestVarGet("borderSearch"));</Command>
<Command>					zSetVar("tiles", "borderCount", count + 1);</Command>
<Command>					ySetVar("borderSearch", "count", yGetVar("borderSearch", "count") + 1);</Command>
<Command>					trUnitSelectClear();</Command>
<Command>					trUnitSelectByID(1*trQuestVarGet("borderSearch"));</Command>
<Command>					trMutateSelected(statue);</Command>
<Command>					if (count == 6) {</Command>
<Command>						break;</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>		zBankNext("tiles");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>int findNearestTile(string v = "") {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command><![CDATA[		if (zDistanceToVectorSquared("tiles", v) < 9) {]]></Command>
<Command>			return(1*trQuestVarGet("tiles"));</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>	return(-1);</Command>
<Command>}</Command>

<Command>void findAvailableTiles(int id = 0, int distance = 1, string db = "", bool ghost = false) {</Command>
<Command>	for (x=zGetBankCount("tiles"); >0) {</Command>
<Command>		zBankNext("tiles");</Command>
<Command>		zSetVar("tiles", "searched", 0);</Command>
<Command>	}</Command>
<Command>	int push = 0;</Command>
<Command>	int pop = -1;</Command>
<Command>	int tile = 0;</Command>
<Command>	int neighbor = 0;</Command>
<Command>	trQuestVarSet("search"+push+"tile", id);</Command>
<Command>	trQuestVarSet("search"+push+"distance", distance);</Command>
<Command><![CDATA[	while (pop < push) {]]></Command>
<Command>		pop = pop + 1;</Command>
<Command>		tile = trQuestVarGet("search"+pop+"tile");</Command>
<Command>		// Add it to the db if it is not occupied</Command>
<Command><![CDATA[		if (zGetVarByIndex("tiles", "occupied", tile) < TILE_OCCUPIED) {]]></Command>
<Command>			yAddToDatabase(db, "search"+pop+"tile");</Command>
<Command>		}</Command>
<Command>		// Search neighbors</Command>
<Command>		if (trQuestVarGet("search"+pop+"distance") > 0) {</Command>
<Command><![CDATA[			for (x=0; < zGetVarByIndex("tiles", "neighborCount", tile)) {]]></Command>
<Command>				neighbor = zGetVarByIndex("tiles", "neighbor"+x, tile);</Command>
<Command>				if (zGetVarByIndex("tiles", "searched", neighbor) == 0) {</Command>
<Command>					zSetVarByIndex("tiles", "searched", neighbor, 1);</Command>
<Command>					// Add to fringe if it can be moved through.</Command>
<Command><![CDATA[					if (zGetVarByIndex("tiles", "occupied", neighbor) == TILE_EMPTY || ghost) {]]></Command>
<Command>						push = push + 1;</Command>
<Command>						trQuestVarSet("search"+push+"tile", neighbor);</Command>
<Command>						trQuestVarSet("search"+push+"distance", trQuestVarGet("search"+pop+"distance") - 1);</Command>
<Command>					}</Command>
<Command>				}</Command>
<Command>			}</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>void highlightTile(int tile = 0, float duration = 0.1) {</Command>
<Command>	trUnitSelectClear();</Command>
<Command><![CDATA[	for (x=0; < zGetVarByIndex("tiles", "borderCount", tile)) {]]></Command>
<Command>		trUnitSelectByID(zGetVarByIndex("tiles", "border"+x, tile));</Command>
<Command>	}</Command>
<Command>	trUnitHighlight(duration, false);</Command>
<Command>}</Command>

<Command>rule initializeBoard</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command><![CDATA[	if (trQuestVarGet("dimension") <= 1) {]]></Command>
<Command>		trQuestVarSetFromRand("dimension", 6, 8, true);</Command>
<Command>	}</Command>
<Command>	int tiles = 1 + 3 * (xsPow(trQuestVarGet("dimension"), 2) - trQuestVarGet("dimension"));</Command>
<Command>	// Number of tiles in a hexagonal grid of X*X*X dimensions:</Command>
<Command>	// 3*(X^2-X) + 1</Command>
<Command>	zBankInit("tiles", 128, tiles);</Command>
<Command>	zBankInit("borders", 297, 552);</Command>

<Command>	setupBoard();</Command>


<Command>	xsDisableRule("initializeBoard");</Command>
<Command>}</Command>
<Command>void MusicHigh(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\8_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\9_out\music.mp3", "29", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\23_out\music 2.mp3", "30", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\8_in\music.mp3", "56", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicMedium(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\05_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\31_out\music.mp3", "34", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\22_in\music 2.mp3", "14", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("xpack\xcinematics\7_out\music.mp3", "19", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>
<Command>void MusicLow(){</Command>
<Command>	trQuestVarSetFromRand("random", 1, 4, true);</Command>
<Command>	if(trQuestVarGet("random") == 1){</Command>
<Command>		trSoundPlayFN("cinematics\26_out\music.mp3", "37", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 2){</Command>
<Command>		trSoundPlayFN("cinematics\21_in\music.mp3", "51", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 3){</Command>
<Command>		trSoundPlayFN("cinematics\04_in\music 1.mp3", "13", -1, "","");</Command>
<Command>	}</Command>
<Command>	if(trQuestVarGet("random") == 4){</Command>
<Command>		trSoundPlayFN("cinematics\26_in\music.mp3", "26", -1, "","");</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule CinPrologue00</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>	trChangeTerrainHeight(0, 0, 60, 60, 0, false);</Command>
<Command>	trPaintTerrain(0, 0, 60, 60, 5, 4, false); //Black</Command>
<Command>	trPaintTerrain(30, 30, 60, 60, 0, 9, false); //GaiaCreepASnow</Command>
<Command>    trPaintTerrain(0, 30, 30, 60, 0, 5, false); //CliffGreekB</Command>
<Command>    trLetterBox(true);</Command>
<Command>    trSoundPlayDialog("default", "1", -1, false, " :It was a fine day for Rogers.", "");</Command>
<Command>    trUIFadeToColor(0,0,0,1000,1000,false);</Command>
<Command>	trCameraCut(vector(-21.635717,32.595444,96.573792), vector(0.707104,-0.707109,-0.001133), vector(0.707104,0.707109,-0.001133), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>    trSetFogAndBlackmap(false, false);</Command>
<Command>    trQuestVarSet("idsStart", trGetNextUnitScenarioNameNumber());</Command>
<Command>    trArmyDispatch("1,10", "Hero Greek Jason", 1, -0.19, 0.00, 97.42, 0, true);</Command>
<Command>	unitTransform("Hero Birth","Cinematic Block");</Command>
<Command>    trArmySelect("1,10");</Command>
<Command>    trUnitMoveToPoint(24.06, 0.00, 97.19, -1, false);</Command>
<Command>    trQuestVarSet("otherRogers", trGetNextUnitScenarioNameNumber());</Command>
<Command>    trArmyDispatch("1,10", "Hero Greek Jason", 1, 73.67, 0.00, 105.90, 270, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 71.27, -0.00, 109.91, 47, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 77.61, 0.00, 102.63, 333, true);</Command>
<Command>    trArmyDispatch("1,10", "Columns Broken", 1, 72.03, 0.00, 101.51, 111, true);</Command>
<Command>    trArmyDispatch("1,10", "Skeleton", 1, 78.01, 0.00, 109.91, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 70.03, 0.00, 101.93, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 74.71, 0.00, 109.70, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Mist Olympus", 1, 77.57, 0.00, 103.82, 222, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 11.34, 0.00, 104.54, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 15.13, 0.00, 82.10, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 7.41, 0.00, 86.42, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 7.99, 0.00, 93.50, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 9.34, 0.00, 108.28, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 17.80, 0.00, 103.35, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 25.46, -0.00, 107.95, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 32.37, 0.00, 113.47, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 45.28, 0.00, 108.99, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 48.73, 0.00, 90.59, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Berry Bush", 1, 30.57, 0.00, 92.07, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 34.31, 0.00, 95.09, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.62, 0.00, 94.96, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 29.75, 0.00, 107.86, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 43.11, 0.00, 107.56, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rock Limestone Big", 1, 18.63, 0.00, 91.59, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rain", 1, 32.11, 0.00, 91.33, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Rain", 1, 42.46, 0.00, 95.41, 0, true);</Command>
<Command>    trArmyDispatch("1,10", "Gate", 1, 119.84, 0.00, 100.72, 270, true);</Command>
<Command>    trArmySelect("1,10");</Command>
<Command>    trSetSelectedScale(2.5, 1.5, 2.5);</Command>
<Command>    trTechSetStatus(1, 413, 4);</Command>
<Command>    MusicLow();</Command>
<Command>    xsDisableRule("CinPrologue00");</Command>
<Command>	xsEnableRule("CinPrologue01");</Command>
<Command>}</Command>

<Command>rule CinPrologue01</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :He finished work and was heading home feeling good.", "");</Command>
<Command>      trRenderSky(true, "SkyBlue");</Command>
<Command>      xsDisableRule("CinPrologue01");</Command>
<Command>	  xsEnableRule("CinPrologue02");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue02</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :However fate was about to intervene...", "");</Command>
<Command>      trCameraCut(vector(115.395638,-62.376621,13.212063), vector(-0.913248,0.407394,0.002918), vector(0.407396,0.913250,-0.001302), vector(0.003194,0.000000,0.999995));</Command>
<Command>      trSoundPlayFN("lightthunder.wav", "14", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue02");</Command>
<Command>	  xsEnableRule("CinPrologue03");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue03</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trFadeOutAllSounds(0.0);</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike2.wav", "2", -1, "","");</Command>
<Command>      trRenderSky(true, "SkyStormy");</Command>
<Command>      trSoundPlayFN("lightningbirth.wav", "4", -1, "","");</Command>
<Command>	  MusicHigh();</Command>
<Command>      xsDisableRule("CinPrologue03");</Command>
<Command>	  xsEnableRule("CinPrologue04");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue04</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trCameraCut(vector(15.341919,89.480629,24.112017), vector(0.000398,-1.000000,-0.000003), vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(23.99, 0.00, 34.41));</Command>
<Command><![CDATA[	  for(x=0;<20){]]></Command>
<Command>		  trVectorQuestVarSet("V", xsVectorSet(trVectorQuestVarGetX("V"),trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V") - 1));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command><![CDATA[	  for(x=0;<12){]]></Command>
<Command>		  trVectorQuestVarSet("V", xsVectorSet(trVectorQuestVarGetX("V") - 0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V") - -0.75));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command><![CDATA[	  for(x=0;<12){]]></Command>
<Command>		  trVectorQuestVarSet("V", xsVectorSet(trVectorQuestVarGetX("V") - 0.75,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V") - 0.75));</Command>
<Command>		  DeploySober("Curse SFX", "V");</Command>
<Command>	  }</Command>
<Command>      trSoundPlayFN("lightningstrike1.wav", "2", -1, "","");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trOverlayText("Zenophobia presents...", 4.0, -1, -1, -1);</Command>
<Command>      trSoundPlayFN("godpower.wav", "6", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue04");</Command>
<Command>	  xsEnableRule("CinPrologue05");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue05</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :Spooked by the sudden storm, Rogers picked up the pace!", "");</Command>
<Command>      trCameraCut(vector(34.321800,34.885281,60.436821), vector(0.004775,-0.665678,0.746224), vector(0.004259,0.746244,0.665658), vector(0.999979,0.000000,-0.006399));</Command>
<Command>	  trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>	  trUnitMoveToPoint(58.63, 0.00, 101.83, -1, false);</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue05");</Command>
<Command>	  xsEnableRule("CinPrologue06");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue06</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " :Inevitably, he stumbled and fell.", "");</Command>
<Command>      trUnitSelectClear();</Command>
<Command>      trUnitSelect(""+1*trQuestVarGet("idsStart"));</Command>
<Command>      trDamageUnitPercent(100);</Command>
<Command>	  trUnitSetAnimation("default",false,-1);</Command>
<Command>      xsDisableRule("CinPrologue06");</Command>
<Command>	  xsEnableRule("CinPrologue07");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue07</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,false);</Command>
<Command>      trSoundPlayFN("lightningstrike4.wav", "5", -1, "","");</Command>
<Command>      trSoundPlayFN("vortexstart.wav", "3", -1, "","");</Command>
<Command>      trCameraCut(vector(16.595451,124.640816,14.744846), vector(0.000398,-1.000000,-0.000003), vector(0.999984,0.000398,-0.005602), vector(-0.005602,0.000000,-0.999984));</Command>
<Command>      trOverlayText("...in collaboration with Nickonhawk...", 4.0, 450, 600, 1000);</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(7.98, 0.00, 2.24));</Command>
<Command>	  string n = "Curse SFX";</Command>
<Command>	  string g = "Increase Prosperity Small";</Command>
<Command><![CDATA[	  for(z=0;<26){]]></Command>
<Command><![CDATA[		  for(x=0;<24){]]></Command>
<Command>			  string p = "";</Command>
<Command><![CDATA[			  if(z==0 && x>14 && x<17){p=n;}]]></Command>
<Command><![CDATA[			  if(z==1 && (x>3 && x<6 || x>11 && x<19)){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==2 && x<19){ if(x>14){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==3 && x<19){ if(x>11 && x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==4){ if(x>10 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==5){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==6){ if(x>8 && x<17){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==7 && x<22){ if(x>8&&x<18){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==8 && x<19 && x!=12){ if(x>12){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==9 && x<19 && x!=12 && x!=13){ if(x>16){p=g;}else{p=n;} }]]></Command>
<Command><![CDATA[			  if(z==10 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==11 && x>0 && x<15){p=n;}]]></Command>
<Command><![CDATA[			  if(z==12 && x>0 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==13 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==14 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==15 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==16 && x<11){p=n;}]]></Command>
<Command><![CDATA[			  if(z==17 && x<13){p=n;}]]></Command>
<Command><![CDATA[			  if(z==18 && x<15){p=n;}]]></Command>
<Command><![CDATA[			  if(z==19 && x<17){p=n;}]]></Command>
<Command><![CDATA[			  if(z==20 && x>0 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==21 && x>2 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==22 && x>4 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==23 && x>14 && x<19){p=n;}]]></Command>
<Command><![CDATA[			  if(z==24 && x>14 && x<18){p=n;}]]></Command>
<Command><![CDATA[			  if(z==25 && x>14 && x<17){p=n;}]]></Command>
<Command>			  if(p!=""){</Command>
<Command>				  trArmyDispatch("1,10",p,1,trVectorQuestVarGetX("V")+x,0,trVectorQuestVarGetZ("V")+z,0,true);</Command>
<Command>			}</Command>
<Command>		}}</Command>
<Command>      xsDisableRule("CinPrologue07");</Command>
<Command>	  xsEnableRule("CinPrologue08");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue08</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      trUIFadeToColor(255,255,255,500,0,true);</Command>
<Command>      trFadeOutAllSounds(3.0);</Command>
<Command>      trSoundPlayFN("lightningstrike5.wav", "4", -1, "","");</Command>
<Command>      trVectorQuestVarSet("V", xsVectorSet(74.62, 0.00, 119.92));</Command>
<Command>      trVectorQuestVarSet("U", trVectorQuestVarGet("V"));</Command>
<Command>      trVectorQuestVarSet("U", xsVectorSet(trVectorQuestVarGetX("U"),trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U") - 28));</Command>
<Command><![CDATA[	  for(x=0;<18){]]></Command>
<Command>		  trVectorQuestVarSet("V", xsVectorSet(trVectorQuestVarGetX("V") + 8,trVectorQuestVarGetY("V"),trVectorQuestVarGetZ("V")));</Command>
<Command>		  trArmyDispatch("1,10", "Dwarf", 1, trVectorQuestVarGetX("V"), trVectorQuestVarGetY("V"), trVectorQuestVarGetZ("V"), 270, true);</Command>
<Command>		  trVectorQuestVarSet("U", xsVectorSet(trVectorQuestVarGetX("U") + 8,trVectorQuestVarGetY("U"),trVectorQuestVarGetZ("U")));</Command>
<Command>		  trArmyDispatch("1,10", "Dwarf", 1, trVectorQuestVarGetX("U"), trVectorQuestVarGetY("U"), trVectorQuestVarGetZ("U"), 90, true);</Command>
<Command>	  }</Command>
<Command>      unitTransform("Dwarf","Palace");</Command>
<Command>      xsDisableRule("CinPrologue08");</Command>
<Command>	  xsEnableRule("CinPrologue09");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue09</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 2){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : When Rogers woke up, he found himself in a different place.", "");</Command>
<Command>      trUIFadeToColor(255,255,255,2000,0,false);</Command>
<Command>      trSoundPlayFN("visionswoosh.wav", "4", -1, "","");</Command>
<Command>      trSoundPlayFN("skypassageout.wav", "1", -1, "","");</Command>
<Command>	  trCameraCut(vector(54.713875,7.545822,105.967346), vector(0.930725,-0.365716,-0.001491), vector(0.365710,0.930729,-0.000586), vector(-0.001603,0.000000,-0.999999));</Command>
<Command>      xsDisableRule("CinPrologue09");</Command>
<Command>	  xsEnableRule("CinPrologue10");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue10</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>      trSoundPlayDialog("default", "1", -1, false, " : ", "");</Command>
<Command>      unitTransform("Mist Olympus","Cinematic Block");</Command>
<Command>	  trUnitSelectClear();trUnitSelect(""+1*trQuestVarGet("otherRogers"));</Command>
<Command>	  trUnitMoveToPoint(75, 0.00, 104.7, -1, false);</Command>
<Command>      trCamTrackLoad("Prologue");</Command>
<Command>      trCamTrackPlay(-1, -1);</Command>
<Command>      xsDisableRule("CinPrologue10");</Command>
<Command>	  xsEnableRule("CinPrologue11");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue11</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 4){</Command>
<Command>	  trOverlayText("G A M E S   O F   H E A V E N", 4.7, 500, 200, 1000);</Command>
<Command>      trSoundPlayFN("xsentinelbirth.wav", "3", -1, "","");</Command>
<Command>      trSoundPlayFN("cinematics\32_in\music.mp3", "15", -1, "","");</Command>
<Command>      xsDisableRule("CinPrologue11");</Command>
<Command>	  xsEnableRule("CinPrologue12");</Command>
<Command>   }</Command>
<Command>}</Command>

<Command>rule CinPrologue12</Command>
<Command>highFrequency</Command>
<Command>inactive</Command>
<Command>{</Command>
<Command>   if ((trTime()-cActivationTime) >= 7){</Command>
<Command>      trPaintTerrain(0, 0, 100, 100, 5, 4, false); //Black</Command>
<Command>	  int next = trGetNextUnitScenarioNameNumber();</Command>
<Command><![CDATA[	  for(i=trQuestVarGet("idsStart");<next){]]></Command>
<Command>		  trUnitSelectClear();trUnitSelect(""+i);</Command>
<Command>		  trUnitDestroy();</Command>
<Command>	  }</Command>
<Command>      trLetterBox(false);</Command>
<Command>      xsDisableRule("CinPrologue12");</Command>
<Command>   }</Command>
<Command>}</Command>
<Command>rule detectClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>{</Command>
<Command>	for (p=2; >0) {</Command>
<Command>		if (trPlayerGetPopulation(p) > 9000) {</Command>
<Command>			trUnitSelectClear();</Command>
<Command>			yFindLatestReverse("vision", "Vision Revealer", p);</Command>
<Command>			trVectorSetUnitPos("p"+p+"clickPos", "vision", true);</Command>
<Command>			trQuestVarSet("p"+p+"click", 2);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			trTechGodPower(p, "Vision", 1);</Command>
<Command>		} else if (trPlayerUnitCountSpecific(p, "Animal Attractor") >= 1) {</Command>
<Command>			yFindLatest("magnet", "Animal Attractor", p);</Command>
<Command>			trVectorSetUnitPos("p"+p+"clickPos", "magnet", true);</Command>
<Command>			trQuestVarSet("p"+p+"click", 1);</Command>
<Command>			trUnitDestroy();</Command>
<Command>			trTechGodPower(p, "Animal magnetism", 1);</Command>
<Command>		}</Command>
<Command>	}</Command>
<Command>}</Command>

<Command>rule initializeClick</Command>
<Command>highFrequency</Command>
<Command>active</Command>
<Command>runImmediately</Command>
<Command>{</Command>
<Command>	trTechGodPower(1, "Animal magnetism", 1);</Command>
<Command>	trTechGodPower(2, "Animal magnetism", 1);</Command>
<Command>	trTechGodPower(1, "Vision", 1);</Command>
<Command>	trTechGodPower(2, "Vision", 1);</Command>
<Command>	map("mouse1down", "game", "uiSetSpecialPower(227) uiSpecialPowerAtPointer");</Command>
<Command>	map("mouse2up", "game", "uiSetSpecialPower(220) uiSpecialPowerAtPointer");</Command>
<Command>	xsDisableRule("initializeClick");</Command>
<Command>}</Command>
</Effect>
</Effects>
</trigger>